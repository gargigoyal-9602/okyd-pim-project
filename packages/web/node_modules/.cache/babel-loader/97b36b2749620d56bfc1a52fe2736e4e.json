{"ast":null,"code":"// packages\nimport { Dimensions, PixelRatio } from 'react-native'; // Retrieve initial screen's width\n\nlet screenWidth = Dimensions.get('window').width; // Retrieve initial screen's height\n\nlet screenHeight = Dimensions.get('window').height;\n/**\n * Converts provided width percentage to independent pixel (dp).\n * @param  {string} widthPercent The percentage of screen's width that UI element should cover\n *                               along with the percentage symbol (%).\n * @return {number}              The calculated dp depending on current device's screen width.\n */\n\nconst widthPercentageToDP = widthPercent => {\n  // Parse string percentage input and convert it to number.\n  const elemWidth = typeof widthPercent === \"number\" ? widthPercent : parseFloat(widthPercent); // Use PixelRatio.roundToNearestPixel method in order to round the layout\n  // size (dp) to the nearest one that correspons to an integer number of pixels.\n\n  return PixelRatio.roundToNearestPixel(screenWidth * elemWidth / 100);\n};\n/**\n * Converts provided height percentage to independent pixel (dp).\n * @param  {string} heightPercent The percentage of screen's height that UI element should cover\n *                                along with the percentage symbol (%).\n * @return {number}               The calculated dp depending on current device's screen height.\n */\n\n\nconst heightPercentageToDP = heightPercent => {\n  // Parse string percentage input and convert it to number.\n  const elemHeight = typeof heightPercent === \"number\" ? heightPercent : parseFloat(heightPercent); // Use PixelRatio.roundToNearestPixel method in order to round the layout\n  // size (dp) to the nearest one that correspons to an integer number of pixels.\n\n  return PixelRatio.roundToNearestPixel(screenHeight * elemHeight / 100);\n};\n/**\n * Event listener function that detects orientation change (every time it occurs) and triggers \n * screen rerendering. It does that, by changing the state of the screen where the function is\n * called. State changing occurs for a new state variable with the name 'orientation' that will\n * always hold the current value of the orientation after the 1st orientation change.\n * Invoke it inside the screen's constructor or in componentDidMount lifecycle method.\n * @param {object} that Screen's class component this variable. The function needs it to\n *                      invoke setState method and trigger screen rerender (this.setState()).\n */\n\n\nconst listenOrientationChange = that => {\n  Dimensions.addEventListener('change', newDimensions => {\n    // Retrieve and save new dimensions\n    screenWidth = newDimensions.window.width;\n    screenHeight = newDimensions.window.height; // Trigger screen's rerender with a state update of the orientation variable\n\n    that.setState({\n      orientation: screenWidth < screenHeight ? 'portrait' : 'landscape'\n    });\n  });\n};\n/**\n * Wrapper function that removes orientation change listener and should be invoked in\n * componentWillUnmount lifecycle method of every class component (UI screen) that\n * listenOrientationChange function has been invoked. This should be done in order to\n * avoid adding new listeners every time the same component is re-mounted.\n */\n\n\nconst removeOrientationListener = () => {\n  Dimensions.removeEventListener('change', () => {});\n};\n\nexport { widthPercentageToDP, heightPercentageToDP, listenOrientationChange, removeOrientationListener };","map":null,"metadata":{},"sourceType":"module"}