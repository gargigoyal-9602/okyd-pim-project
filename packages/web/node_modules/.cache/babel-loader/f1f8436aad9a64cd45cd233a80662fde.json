{"ast":null,"code":"import _regeneratorRuntime from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport MessageEnum, { getName } from \"../../../framework/src/Messages/MessageEnum\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nimport { isEmpty } from 'lodash'; // Customizable Area Start\n// Customizable Area End\n\nexport const configJSON = require(\"./config\");\nexport default class EmailAccountLoginController extends BlockComponent {\n  // Customizable Area Start\n  // Customizable Area End\n  constructor(props) {\n    super(props);\n    this.apiEmailLoginCallId = \"\";\n    this.validationApiCallId = \"\";\n    this.apiPasswordCallId = \"\";\n    this.apiForgotCallId = \"\";\n    this.emailReg = void 0;\n    this.labelTitle = \"\";\n\n    this.getToken = () => {\n      const msg = new Message(getName(MessageEnum.SessionRequestMessage));\n      this.send(msg);\n      console.log('msg', msg);\n    };\n\n    this.txtInputPasswordWebProps = {\n      onChange: text => {\n        this.setState({\n          errorPassword: '',\n          password: text === null || text === void 0 ? void 0 : text.target.value\n        });\n      }\n    };\n    this.txtInputConfirmPasswordWebProps = {\n      onChange: text => {\n        this.setState({\n          errorConfirmPassword: '',\n          confirmPassword: text === null || text === void 0 ? void 0 : text.target.value\n        });\n      }\n    };\n    this.txtInputEmailWebProps = {\n      onChange: text => {\n        this.setState({\n          errorEmail: '',\n          email: text === null || text === void 0 ? void 0 : text.target.value\n        }); //@ts-ignore\n\n        this.txtInputEmailProps.value = text === null || text === void 0 ? void 0 : text.target.value;\n      }\n    };\n    this.txtInputEmailMobileProps = _objectSpread(_objectSpread({}, this.txtInputEmailWebProps), {}, {\n      autoCompleteType: \"email\",\n      keyboardType: \"email-address\"\n    });\n    this.txtInputEmailProps = this.isPlatformWeb() ? this.txtInputEmailWebProps : this.txtInputEmailMobileProps;\n    this.receive = this.receive.bind(this); // Customizable Area Start\n\n    this.subScribedMessages = [getName(MessageEnum.CountryCodeMessage), getName(MessageEnum.RestAPIResponceMessage), getName(MessageEnum.ReciveUserCredentials)];\n    this.state = {\n      email: '',\n      errorEmail: '',\n      password: \"\",\n      errorPassword: \"\",\n      confirmPassword: '',\n      errorConfirmPassword: ''\n    };\n    this.emailReg = new RegExp(\"\"); // Customizable Area End\n\n    runEngine.attachBuildingBlock(this, this.subScribedMessages);\n  }\n\n  componentDidMount() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            // this.callGetValidationApi();\n            _this.send(new Message(getName(MessageEnum.RequestUserCredentials))); // Customizable Area Start\n            // Customizable Area End\n\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  }\n\n  receive(from, message) {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var apiRequestCallId, responseJson, errorReponse;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            // Customizable Area Start\n            if (getName(MessageEnum.RestAPIResponceMessage) === message.id) {\n              apiRequestCallId = message.getData(getName(MessageEnum.RestAPIResponceDataMessage));\n              responseJson = message.getData(getName(MessageEnum.RestAPIResponceSuccessMessage));\n              errorReponse = message.getData(getName(MessageEnum.RestAPIResponceErrorMessage));\n\n              if (apiRequestCallId) {\n                if (apiRequestCallId === _this2.apiPasswordCallId) {\n                  if (responseJson.data) {\n                    console.log('responseJson', responseJson); //  // @ts-ignore\n                    //  alert('Password Successfully set')\n\n                    localStorage.setItem('user_type', responseJson.data.user_type); //@ts-ignore\n\n                    _this2.props.history.push(\"/\");\n                  } else {\n                    alert('Oops,something went wrong ?');\n                  }\n                } else if (apiRequestCallId === _this2.apiForgotCallId) {\n                  console.log('responseJson', responseJson);\n\n                  if (!(responseJson === null || responseJson === void 0 ? void 0 : responseJson.errors[0].otp)) {\n                    localStorage.setItem('email', _this2.state.email);\n                    localStorage.setItem('user_type', responseJson.data.user_type);\n                    console.log('responseJson', responseJson); // @ts-ignore\n\n                    _this2.props.history.push(\"new-password\");\n                  } else {\n                    alert('Account not found');\n                  }\n                }\n              }\n            }\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }))();\n  } //apiForgotCallId\n\n\n  sendLoginFailMessage() {\n    const msg = new Message(getName(MessageEnum.LoginFaliureMessage));\n    this.send(msg);\n  } //   sendLoginSuccessMessage() {\n  //     const msg: Message = new Message(getName(MessageEnum.LoginSuccessMessage));\n  //     msg.addData(getName(MessageEnum.LoginUserName), this.state.email);\n  //     msg.addData(getName(MessageEnum.CountyCodeDataMessage), null);\n  //     msg.addData(getName(MessageEnum.LoginPassword), this.state.password);\n  //     msg.addData(\n  //       getName(MessageEnum.LoginIsRememberMe),\n  //       this.state.checkedRememberMe\n  //     );\n  //     this.send(msg);\n  //   }\n\n\n  saveLoggedInUserData(responseJson) {\n    console.log('responseJsonresponseJson', responseJson);\n\n    if (responseJson && responseJson.meta && responseJson.meta.token) {\n      const msg = new Message(getName(MessageEnum.SessionSaveMessage));\n      msg.addData(getName(MessageEnum.SessionResponseData), JSON.stringify(responseJson));\n      msg.addData(getName(MessageEnum.SessionResponseToken), responseJson.meta.token);\n      localStorage.setItem('auth', responseJson.meta.token);\n      this.send(msg);\n    }\n  }\n\n  openInfoPage() {\n    // const msg: Message = new Message(getName(MessageEnum.AccoutLoginSuccess));\n    // console.log('msg',msg)\n    // console.log('this.props',this.props)\n    // msg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n    // this.send(msg);\n    // localStorage.setItem('auth',);\n    // alert('Login Successful')\n    //@ts-ignore\n    this.props.history.push(\"/\"); // this.props.history.push(\"select-domain\")\n  }\n\n  goToForgotPassword() {\n    const msg = new Message(getName(MessageEnum.NavigationForgotPasswordMessage));\n    msg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n    msg.addData(getName(MessageEnum.NavigationForgotPasswordPageInfo), \"email\");\n    this.send(msg);\n  }\n\n  goToSocialLogin() {\n    const msg = new Message(getName(MessageEnum.NavigationSocialLogInMessage));\n    msg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n    this.send(msg);\n  }\n\n  createNewPassword() {\n    // console.log(\"API HIT\");\n    // console.log('this.state',this.state)\n    if (isEmpty(this.state.password)) {\n      this.setState({\n        errorPassword: configJSON.errorPasswordEmpty\n      });\n      return false;\n    } else if (this.state.password.length > 10) {\n      this.setState({\n        errorPassword: configJSON.errorPasswordLengthMax\n      });\n      return false;\n    } else if (this.state.password.length < 8) {\n      this.setState({\n        errorPassword: configJSON.errorPasswordLengthLess\n      });\n      return false;\n    }\n\n    if (isEmpty(this.state.confirmPassword)) {\n      this.setState({\n        errorConfirmPassword: configJSON.errorPasswordEmpty\n      });\n      return false;\n    } else if (this.state.password !== this.state.confirmPassword) {\n      this.setState({\n        errorConfirmPassword: configJSON.errorConfirmPasswordNotMatch\n      });\n      return false;\n    }\n\n    const header = {\n      \"Content-Type\": configJSON.forgotPasswordAPiContentType\n    };\n    console.log('this.state', this.state);\n    const attrs = {\n      password: this.state.password,\n      confirm_password: this.state.confirmPassword,\n      email: this.state.email || localStorage.getItem('email') || ''\n    };\n    const data = {\n      type: \"email_account\",\n      attributes: attrs\n    };\n    const httpBody = {\n      data: data\n    };\n    console.log('httpBody', httpBody);\n    const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage)); // console.log(\"requestMessage\", requestMessage);\n\n    this.apiPasswordCallId = requestMessage.messageId;\n    requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.newPasswordApiEndPoint);\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(header));\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(httpBody));\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.httpPostMethod);\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n    return true;\n  }\n\n  callGetValidationApi() {\n    const headers = {\n      \"Content-Type\": configJSON.validationApiContentType\n    };\n    const getValidationsMsg = new Message(getName(MessageEnum.RestAPIRequestMessage));\n    this.validationApiCallId = getValidationsMsg.messageId;\n    getValidationsMsg.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.urlGetValidations);\n    getValidationsMsg.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n    getValidationsMsg.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.validationApiMethodType);\n    runEngine.sendMessage(getValidationsMsg.id, getValidationsMsg);\n  }\n\n  handleForgotPassword() {\n    if (this.state.email === null || this.state.email.length === 0 || !this.emailReg.test(this.state.email)) {\n      this.setState({\n        errorEmail: configJSON.pleaseEnterAValidEmail\n      });\n      return false;\n    }\n\n    const header = {\n      \"Content-Type\": configJSON.forgotPasswordAPiContentType\n    };\n    console.log('this.state', this.state);\n    const attrs = {\n      email: this.state.email\n    };\n    const data = {\n      type: \"email_account\",\n      attributes: attrs\n    };\n    const httpBody = {\n      data: data\n    };\n    console.log('httpBody', httpBody);\n    const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage)); // console.log(\"requestMessage\", requestMessage);\n\n    this.apiForgotCallId = requestMessage.messageId;\n    requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.ForgotPasswordApiEndPoint);\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(header));\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(httpBody));\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.httpPostMethod);\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n    return true;\n  }\n\n}","map":{"version":3,"sources":["/home/lp-greenapex/gargi/okydpim-36944-react-native/src/packages/blocks/forgot-password/src/NewPasswordController.web.tsx"],"names":["Message","BlockComponent","MessageEnum","getName","runEngine","isEmpty","configJSON","require","EmailAccountLoginController","constructor","props","apiEmailLoginCallId","validationApiCallId","apiPasswordCallId","apiForgotCallId","emailReg","labelTitle","getToken","msg","SessionRequestMessage","send","console","log","txtInputPasswordWebProps","onChange","text","setState","errorPassword","password","target","value","txtInputConfirmPasswordWebProps","errorConfirmPassword","confirmPassword","txtInputEmailWebProps","errorEmail","email","txtInputEmailProps","txtInputEmailMobileProps","autoCompleteType","keyboardType","isPlatformWeb","receive","bind","subScribedMessages","CountryCodeMessage","RestAPIResponceMessage","ReciveUserCredentials","state","RegExp","attachBuildingBlock","componentDidMount","RequestUserCredentials","from","message","id","apiRequestCallId","getData","RestAPIResponceDataMessage","responseJson","RestAPIResponceSuccessMessage","errorReponse","RestAPIResponceErrorMessage","data","localStorage","setItem","user_type","history","push","alert","errors","otp","sendLoginFailMessage","LoginFaliureMessage","saveLoggedInUserData","meta","token","SessionSaveMessage","addData","SessionResponseData","JSON","stringify","SessionResponseToken","openInfoPage","goToForgotPassword","NavigationForgotPasswordMessage","NavigationPropsMessage","NavigationForgotPasswordPageInfo","goToSocialLogin","NavigationSocialLogInMessage","createNewPassword","errorPasswordEmpty","length","errorPasswordLengthMax","errorPasswordLengthLess","errorConfirmPasswordNotMatch","header","forgotPasswordAPiContentType","attrs","confirm_password","getItem","type","attributes","httpBody","requestMessage","RestAPIRequestMessage","messageId","RestAPIResponceEndPointMessage","newPasswordApiEndPoint","RestAPIRequestHeaderMessage","RestAPIRequestBodyMessage","RestAPIRequestMethodMessage","httpPostMethod","sendMessage","callGetValidationApi","headers","validationApiContentType","getValidationsMsg","urlGetValidations","validationApiMethodType","handleForgotPassword","test","pleaseEnterAValidEmail","ForgotPasswordApiEndPoint"],"mappings":"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","sourcesContent":["import { IBlock } from \"../../../framework/src/IBlock\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport MessageEnum, {\n  getName,\n} from \"../../../framework/src/Messages/MessageEnum\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nimport {identity, isEmpty} from 'lodash'\n\n// Customizable Area Start\n// Customizable Area End\n\nexport const configJSON = require(\"./config\");\n\nexport interface Props {\n  navigation: any;\n  id: string;\n  // Customizable Area Start\n  // Customizable Area End\n}\n\ninterface S {\n  // Customizable Area Start\n  email: string;\n  errorEmail: string;\n  password: string;\n  errorPassword: string;\n  confirmPassword: string;\n  errorConfirmPassword: string;\n  // Customizable Area End\n}\n\ninterface SS {\n  // Customizable Area Start\n  id: any;\n  // Customizable Area End\n}\n\nexport default class EmailAccountLoginController extends BlockComponent<\n  Props,\n  S,\n  SS\n> {\n  // Customizable Area Start\n  apiEmailLoginCallId: string = \"\";\n  validationApiCallId: string = \"\";\n  apiPasswordCallId: string = \"\";\n  apiForgotCallId: string = \"\";\n\n  emailReg: RegExp;\n  labelTitle: string = \"\";\n  // Customizable Area End\n\n  constructor(props: Props) {\n    super(props);\n    this.receive = this.receive.bind(this);\n\n    // Customizable Area Start\n    this.subScribedMessages = [\n      getName(MessageEnum.CountryCodeMessage),\n      getName(MessageEnum.RestAPIResponceMessage),\n      getName(MessageEnum.ReciveUserCredentials),\n    ];\n\n    this.state = {\n      email: '',\n      errorEmail:'',\n      password: \"\",\n      errorPassword: \"\",\n      confirmPassword:'',\n      errorConfirmPassword:'',\n    };\n\n    this.emailReg = new RegExp(\"\");\n    // Customizable Area End\n\n    runEngine.attachBuildingBlock(this as IBlock, this.subScribedMessages);\n  }\n\n  async componentDidMount() {\n    // this.callGetValidationApi();\n    this.send(new Message(getName(MessageEnum.RequestUserCredentials)));\n    // Customizable Area Start\n    \n    // Customizable Area End\n  }\n  getToken = () => {\n    const msg: Message = new Message(\n      getName(MessageEnum.SessionRequestMessage)\n    );\n    this.send(msg);\n   console.log('msg',msg)\n\n  };\n\n  // Customizable Area Start\n  \n  txtInputPasswordWebProps = {\n    onChange: (text: any) => {\n      this.setState({ errorPassword:'' , password: text?.target.value });\n    },\n  };\n\n  txtInputConfirmPasswordWebProps = {\n    onChange: (text: any) => {\n      this.setState({ errorConfirmPassword:'' , confirmPassword: text?.target.value });\n    },\n  };\n\n\n  txtInputEmailWebProps = {\n    onChange: (text: any) => {\n      this.setState({ errorEmail:''  ,email: text?.target.value });\n      //@ts-ignore\n      this.txtInputEmailProps.value = text?.target.value;\n    },\n  };\n\n  txtInputEmailMobileProps = {\n    ...this.txtInputEmailWebProps,\n    autoCompleteType: \"email\",\n    keyboardType: \"email-address\",\n  };\n\n  txtInputEmailProps = this.isPlatformWeb()\n    ? this.txtInputEmailWebProps\n    : this.txtInputEmailMobileProps;\n\n\n\n \n  async receive(from: string, message: Message) {\n    // Customizable Area Start\n    if (getName(MessageEnum.RestAPIResponceMessage) === message.id) {\n\n      const apiRequestCallId = message.getData(\n        getName(MessageEnum.RestAPIResponceDataMessage)\n      );\n\n      var responseJson = message.getData(\n        getName(MessageEnum.RestAPIResponceSuccessMessage)\n      );\n\n      var errorReponse = message.getData(\n        getName(MessageEnum.RestAPIResponceErrorMessage)\n      );\n      if (apiRequestCallId) {\n        if (apiRequestCallId === this.apiPasswordCallId) {\n          if (responseJson.data ) {\n             console.log('responseJson',responseJson)\n            //  // @ts-ignore\n            //  alert('Password Successfully set')\n             localStorage.setItem('user_type',responseJson.data.user_type)\n             //@ts-ignore\n          this.props.history.push(\"/\");\n          }else{\n            alert('Oops,something went wrong ?')\n          }\n        }\n        else if (apiRequestCallId === this.apiForgotCallId) {\n              console.log('responseJson',responseJson)\n          if (!responseJson?.errors[0].otp ) {\n            localStorage.setItem('email',this.state.email)\n            localStorage.setItem('user_type',responseJson.data.user_type)\n             console.log('responseJson',responseJson)\n             // @ts-ignore\n             this.props.history.push(\"new-password\")\n          }else{\n            alert('Account not found')\n          }\n        }\n      }\n     }\n    }\n    //apiForgotCallId\n\n  sendLoginFailMessage() {\n    const msg: Message = new Message(getName(MessageEnum.LoginFaliureMessage));\n    this.send(msg);\n  }\n\n//   sendLoginSuccessMessage() {\n//     const msg: Message = new Message(getName(MessageEnum.LoginSuccessMessage));\n\n//     msg.addData(getName(MessageEnum.LoginUserName), this.state.email);\n//     msg.addData(getName(MessageEnum.CountyCodeDataMessage), null);\n//     msg.addData(getName(MessageEnum.LoginPassword), this.state.password);\n//     msg.addData(\n//       getName(MessageEnum.LoginIsRememberMe),\n//       this.state.checkedRememberMe\n//     );\n\n//     this.send(msg);\n//   }\n\n  saveLoggedInUserData(responseJson: any) {\n    console.log('responseJsonresponseJson',responseJson)\n    if (responseJson && responseJson.meta && responseJson.meta.token) {\n      const msg: Message = new Message(getName(MessageEnum.SessionSaveMessage));\n\n      msg.addData(\n        getName(MessageEnum.SessionResponseData),\n        JSON.stringify(responseJson)\n      );\n      msg.addData(\n        getName(MessageEnum.SessionResponseToken),\n        responseJson.meta.token\n      );\n       localStorage.setItem('auth',responseJson.meta.token)\n\n      this.send(msg);\n\n      \n    }\n  }\n\n  openInfoPage() {\n    // const msg: Message = new Message(getName(MessageEnum.AccoutLoginSuccess));\n    // console.log('msg',msg)\n    // console.log('this.props',this.props)\n    // msg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n\n    // this.send(msg);\n    \n    // localStorage.setItem('auth',);\n    // alert('Login Successful')\n    //@ts-ignore\n\n    this.props.history.push(\"/\");\n    // this.props.history.push(\"select-domain\")\n  }\n\n  goToForgotPassword() {\n    const msg: Message = new Message(\n      getName(MessageEnum.NavigationForgotPasswordMessage)\n    );\n    msg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n    msg.addData(getName(MessageEnum.NavigationForgotPasswordPageInfo), \"email\");\n    this.send(msg);\n  }\n\n  goToSocialLogin() {\n    const msg: Message = new Message(\n      getName(MessageEnum.NavigationSocialLogInMessage)\n    );\n    msg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n    this.send(msg);\n  }\n\n  createNewPassword(): Boolean {\n    // console.log(\"API HIT\");\n    // console.log('this.state',this.state)\n    \n    if (isEmpty(this.state.password)) {\n       this.setState({\n          errorPassword:configJSON.errorPasswordEmpty\n      })\n      return false;\n    }else if(this.state.password.length>10){\n        this.setState({\n                errorPassword:configJSON.errorPasswordLengthMax\n            })\n      return false;\n    }else if (this.state.password.length < 8){\n        this.setState({\n                errorPassword:configJSON.errorPasswordLengthLess\n            })\n      return false;\n    }\n\n     if (isEmpty(this.state.confirmPassword)) {\n       this.setState({\n            errorConfirmPassword:configJSON.errorPasswordEmpty\n      })\n      return false;\n    }else if( this.state.password !== this.state.confirmPassword){\n        this.setState({\n            errorConfirmPassword:configJSON.errorConfirmPasswordNotMatch\n      })\n      return false;\n    }\n\n    const header = {\n      \"Content-Type\": configJSON.forgotPasswordAPiContentType,\n    };\n\n    console.log('this.state',this.state)\n    const attrs = {\n      password: this.state.password,\n      confirm_password: this.state.confirmPassword,\n      email: this.state.email || localStorage.getItem('email') || '',\n    };\n\n    const data = {\n      type: \"email_account\",\n      attributes: attrs,\n    };\n\n    const httpBody = {\n      data: data,\n    };\n\n    console.log('httpBody',httpBody)\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage) \n    );\n\n    // console.log(\"requestMessage\", requestMessage);\n    this.apiPasswordCallId = requestMessage.messageId;\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.newPasswordApiEndPoint\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(header)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestBodyMessage),\n      JSON.stringify(httpBody)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.httpPostMethod\n    );\n\n   \n    runEngine.sendMessage(requestMessage.id, requestMessage);\n\n    return true;\n  }\n\n  callGetValidationApi() {\n    const headers = {\n      \"Content-Type\": configJSON.validationApiContentType,\n    };\n\n    const getValidationsMsg = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n    this.validationApiCallId = getValidationsMsg.messageId;\n\n    getValidationsMsg.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.urlGetValidations\n    );\n\n    getValidationsMsg.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(headers)\n    );\n    getValidationsMsg.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.validationApiMethodType\n    );\n    runEngine.sendMessage(getValidationsMsg.id, getValidationsMsg);\n  }\n\n\n  handleForgotPassword() : Boolean {\n      if (\n        this.state.email === null ||\n        this.state.email.length === 0 ||\n        !this.emailReg.test(this.state.email)\n      ) {\n        this.setState({\n            errorEmail :configJSON.pleaseEnterAValidEmail\n        })  \n        return false;\n      }\n\n    const header = {\n      \"Content-Type\": configJSON.forgotPasswordAPiContentType,\n    };\n\n    console.log('this.state',this.state)\n    const attrs = {\n      email: this.state.email\n    };\n\n    const data = {\n      type: \"email_account\",\n      attributes: attrs,\n    };\n\n    const httpBody = {\n      data: data,\n    };\n\n    console.log('httpBody',httpBody)\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage) \n    );\n\n    // console.log(\"requestMessage\", requestMessage);\n    this.apiForgotCallId = requestMessage.messageId;\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.ForgotPasswordApiEndPoint\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(header)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestBodyMessage),\n      JSON.stringify(httpBody)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.httpPostMethod\n    );\n\n   \n    runEngine.sendMessage(requestMessage.id, requestMessage);\n\n      return true;\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}