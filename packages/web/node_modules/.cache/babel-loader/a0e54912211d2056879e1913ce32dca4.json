{"ast":null,"code":"import _regeneratorRuntime from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nimport MessageEnum, { getName } from \"../../../framework/src/Messages/MessageEnum\";\nimport { isEmpty } from 'lodash'; // Customizable Area Start\n\nimport { imgPasswordInVisible, imgPasswordVisible } from \"./assets\"; // Customizable Area End\n\nexport const configJSON = require(\"./config\");\nexport default class EmailAccountRegistrationController extends BlockComponent {\n  // Customizable Area Start\n  // Customizable Area End\n  constructor(props) {\n    super(props);\n    this.arrayholder = void 0;\n    this.passwordReg = void 0;\n    this.emailReg = void 0;\n    this.stringReg = void 0;\n    this.phoneReg = void 0;\n    this.numberReg = void 0;\n    this.createAccountApiCallId = void 0;\n    this.createNewAccountApiCallId = void 0;\n    this.validationApiCallId = \"\";\n    this.imgPasswordVisible = void 0;\n    this.imgPasswordInVisible = void 0;\n    this.labelHeader = void 0;\n    this.labelFirstName = void 0;\n    this.lastName = void 0;\n    this.labelEmail = void 0;\n    this.labelPassword = void 0;\n    this.labelRePassword = void 0;\n    this.labelLegalText = void 0;\n    this.labelLegalTermCondition = void 0;\n    this.labelLegalPrivacyPolicy = void 0;\n    this.btnTextSignUp = void 0;\n    this.currentCountryCode = void 0;\n    this.btnSignUpProps = {\n      onClick: () => this.createAccount()\n    };\n    this.btnLegalPrivacyPolicyProps = {\n      onClick: () => this.goToPrivacyPolicy()\n    };\n    this.btnLegalTermsAndConditionProps = {\n      onClick: () => this.goToTermsAndCondition()\n    };\n    this.txtInputEmailWebPrpos = {\n      onChange: text => {\n        this.setState({\n          errorEmail: \"\",\n          email: text.target.value\n        }); //@ts-ignore\n\n        this.txtInputEmailPrpos.value = text.target.value;\n      }\n    };\n    this.txtInputEmailMobilePrpos = _objectSpread(_objectSpread({}, this.txtInputEmailWebPrpos), {}, {\n      keyboardType: \"email-address\"\n    });\n    this.txtInputEmailPrpos = this.isPlatformWeb() ? this.txtInputEmailWebPrpos : this.txtInputEmailMobilePrpos;\n    this.txtInputCompanyNameWebPrpos = {\n      onChange: text => {\n        this.setState({\n          errorCompanyName: \"\",\n          companyName: text.target.value\n        }); //@ts-ignore\n      }\n    };\n    this.txtInputDomainNameWebPrpos = {\n      onChange: text => {\n        this.setState({\n          errorDomainName: \"\",\n          domainName: text.target.value\n        }); //@ts-ignore\n      }\n    };\n    this.txtInputFullNameWebPrpos = {\n      onChange: text => {\n        this.setState({\n          errorFullName: \"\",\n          fullName: text.target.value\n        }); //@ts-ignore\n      }\n    };\n    this.txtInputPhoneNumberWebPrpos = {\n      onChange: text => {\n        //@ts-ignore\n        this.setState({\n          errorPhnNumber: \"\",\n          phoneNumber: text === null || text === void 0 ? void 0 : text.target.value\n        });\n      }\n    };\n    this.txtInputAddressWebPrpos = {\n      onChange: text => {\n        this.setState({\n          errorAddress: \"\",\n          address: text.target.value\n        }); //@ts-ignore\n      }\n    };\n    this.txtInputCountryWebPrpos = {\n      onChange: text => {\n        this.setState({\n          country: text.target.value\n        }); //@ts-ignore\n      }\n    };\n    this.txtInputTeamOkydWebPrpos = {\n      onChange: text => {\n        this.setState({\n          teamMemberOkyd: text.target.value\n        }); //@ts-ignore\n      }\n    };\n    this.txtInputNatureofBussinessWebPrpos = {\n      onChange: text => {\n        this.setState({\n          natureOfBussiness: text.target.value\n        }); //@ts-ignore\n      }\n    };\n    this.txtInputTargetClientWebPrpos = {\n      onChange: text => {\n        this.setState({\n          clientTarget: text.target.value\n        }); //@ts-ignore\n      }\n    };\n    this.subScribedMessages = [getName(MessageEnum.RestAPIResponceMessage), getName(MessageEnum.NavigationPayLoadMessage), getName(MessageEnum.CountryCodeMessage)];\n    this.receive = this.receive.bind(this);\n    this.isStringNullOrBlank = this.isStringNullOrBlank.bind(this);\n    runEngine.attachBuildingBlock(this, this.subScribedMessages);\n    this.state = {\n      // Customizable Area Start\n      email: \"\",\n      companyName: \"\",\n      domainName: \"\",\n      fullName: \"\",\n      phoneNumber: \"\",\n      address: \"\",\n      country: \"\",\n      teamMemberOkyd: \"\",\n      natureOfBussiness: \"\",\n      clientTarget: \"\",\n      userType: \"Subscriber\",\n      activated: true,\n      errorMandatory: \"\",\n      errorEmail: \"\",\n      errorCompanyName: \"\",\n      errorDomainName: \"\",\n      errorFullName: \"\",\n      errorPhnNumber: \"\",\n      errorAddress: \"\",\n      errorCountry: \"\" // Customizable Area End\n\n    }; // Customizable Area Start\n\n    this.arrayholder = [];\n    this.passwordReg = new RegExp(\"\\\\w+\");\n    this.emailReg = new RegExp(\"\\\\w+\");\n    this.stringReg = new RegExp(/^[A-Za-z]+$/);\n    this.phoneReg = new RegExp(/^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/);\n    this.numberReg = new RegExp(/^[0-9]*$/);\n    this.imgPasswordVisible = imgPasswordVisible;\n    this.imgPasswordInVisible = imgPasswordInVisible;\n    this.labelHeader = configJSON.labelHeader;\n    this.labelFirstName = configJSON.labelFirstName;\n    this.lastName = configJSON.lastName;\n    this.labelEmail = configJSON.labelEmail;\n    this.labelPassword = configJSON.labelPassword;\n    this.labelRePassword = configJSON.labelRePassword;\n    this.labelLegalText = configJSON.labelLegalText;\n    this.labelLegalTermCondition = configJSON.labelLegalTermCondition;\n    this.labelLegalPrivacyPolicy = configJSON.labelLegalPrivacyPolicy;\n    this.btnTextSignUp = configJSON.btnTextSignUp; // Customizable Area End\n  }\n\n  receive(from, message) {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var apiRequestCallId, responseJson, errorReponse, regexData, msg, otpAuthTkn, selectedCode;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            // Customizable Area Start\n            if (getName(MessageEnum.RestAPIResponceMessage) === message.id) {\n              apiRequestCallId = message.getData(getName(MessageEnum.RestAPIResponceDataMessage));\n              responseJson = message.getData(getName(MessageEnum.RestAPIResponceSuccessMessage));\n              errorReponse = message.getData(getName(MessageEnum.RestAPIResponceErrorMessage)); // console.log('apiRequestCallId',apiRequestCallId)\n              //   console.log('createNewAccountApiCallId',this.createNewAccountApiCallId)\n\n              if (apiRequestCallId && responseJson) {\n                if (apiRequestCallId === _this.validationApiCallId) {\n                  _this.arrayholder = responseJson.data;\n\n                  if (_this.arrayholder && _this.arrayholder.length !== 0) {\n                    regexData = _this.arrayholder[0];\n\n                    if (regexData.password_validation_regexp) {\n                      _this.passwordReg = new RegExp(regexData.password_validation_regexp);\n                    }\n\n                    if (regexData.password_validation_rules) {//   this.setState({\n                      //     passwordHelperText: regexData.password_validation_rules,\n                      //   });\n                    }\n\n                    if (regexData.email_validation_regexp) {\n                      _this.emailReg = new RegExp(regexData.email_validation_regexp);\n                    }\n                  }\n                } else if (apiRequestCallId === _this.createAccountApiCallId) {\n                  if (!responseJson.errors) {\n                    msg = new Message(getName(MessageEnum.AccoutResgistrationSuccess));\n                    msg.addData(getName(MessageEnum.NavigationPropsMessage), _this.props);\n\n                    _this.send(msg);\n                  } else {\n                    //Check Error Response\n                    _this.parseApiErrorResponse(responseJson);\n                  }\n\n                  _this.parseApiCatchErrorResponse(errorReponse);\n                } else if (apiRequestCallId === _this.createNewAccountApiCallId) {\n                  console.log('responseJson', responseJson);\n\n                  if (responseJson.data) {\n                    localStorage.setItem('email', responseJson.data.attributes.email);\n                    localStorage.setItem('auth', responseJson.meta.token);\n                    localStorage.setItem('fullname', responseJson.data.attributes.fullname); // @ts-ignore\n\n                    _this.props.history.push(\"new-password\");\n                  } else {\n                    console.log('responseJson', responseJson);\n                    alert(JSON.stringify(responseJson.errors));\n                  }\n                }\n              }\n            }\n\n            if (getName(MessageEnum.NavigationPayLoadMessage) === message.id) {\n              otpAuthTkn = message.getData(getName(MessageEnum.AuthTokenDataMessage));\n\n              if (otpAuthTkn && otpAuthTkn.length > 0) {\n                // this.setState({ otpAuthToken: otpAuthTkn });\n                // runEngine.debugLog(\"otpAuthTkn\", this.state.otpAuthToken);\n                runEngine.unSubscribeFromMessages(_this, [message.id]);\n              }\n            }\n\n            if (getName(MessageEnum.CountryCodeMessage) === message.id) {\n              selectedCode = message.getData(getName(MessageEnum.CountyCodeDataMessage));\n\n              if (selectedCode !== undefined) {// this.setState({\n                //   countryCodeSelected:\n                //     selectedCode.indexOf(\"+\") > 0\n                //       ? selectedCode.split(\"+\")[1]\n                //       : selectedCode,\n                // });\n              }\n            } // Customizable Area End\n\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  } // Customizable Area Start\n\n\n  goToPrivacyPolicy() {\n    const msg = new Message(getName(MessageEnum.NavigationPrivacyPolicyMessage));\n    msg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n    this.send(msg);\n  }\n\n  goToTermsAndCondition() {\n    const msg = new Message(getName(MessageEnum.NavigationTermAndConditionMessage));\n    msg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n    this.send(msg);\n  }\n\n  isStringNullOrBlank(str) {\n    return str === null || str.length === 0;\n  }\n\n  isValidEmail(email) {\n    return this.emailReg.test(email);\n  }\n\n  createAccount() {\n    if (this.state.email === null || this.state.email.length === 0 || isEmpty(this.state.email)) {\n      this.setState({\n        errorEmail: configJSON.errorAllFieldsAreMandatory\n      });\n      return false;\n    } else if (!this.emailReg.test(this.state.email)) {\n      this.setState({\n        errorEmail: configJSON.errorEmailNotValid\n      });\n      return false;\n    }\n\n    if (isEmpty(this.state.companyName)) {\n      this.setState({\n        errorCompanyName: configJSON.errorAllFieldsAreMandatory\n      });\n      return false;\n    }\n\n    if (isEmpty(this.state.domainName)) {\n      this.setState({\n        errorDomainName: configJSON.errorAllFieldsAreMandatory\n      });\n      return false;\n    } else if (!this.state.domainName.includes('.')) {\n      this.setState({\n        errorDomainName: configJSON.errorDomainNotValid\n      });\n      return false;\n    }\n\n    if (isEmpty(this.state.fullName)) {\n      this.setState({\n        errorFullName: configJSON.errorAllFieldsAreMandatory\n      });\n      return false;\n    } else if (!this.state.fullName.match(this.stringReg)) {\n      this.setState({\n        errorFullName: configJSON.errorStingOnly\n      });\n      return false;\n    }\n\n    if (isEmpty(this.state.phoneNumber)) {\n      this.setState({\n        errorPhnNumber: configJSON.errorAllFieldsAreMandatory\n      });\n      return false;\n    } else if (!this.state.phoneNumber.match(this.phoneReg)) {\n      this.setState({\n        errorPhnNumber: configJSON.errorPhoneNumberType\n      });\n      return false;\n    } else if (this.state.phoneNumber.length > 10) {\n      this.setState({\n        errorPhnNumber: configJSON.errorPhoneNumberMax\n      });\n      return false;\n    }\n\n    if (isEmpty(this.state.address)) {\n      this.setState({\n        errorAddress: configJSON.errorAllFieldsAreMandatory\n      });\n      return false;\n    } else if (this.state.address.length > 250) {\n      this.setState({\n        errorAddress: configJSON.errorAddressMax\n      });\n      return false;\n    }\n\n    console.log('this.state', this.state);\n    const header = {\n      \"Content-Type\": configJSON.contentTypeApiAddDetail\n    };\n    const attrs = {\n      email: this.state.email,\n      company_name: this.state.companyName,\n      domain: this.state.domainName,\n      fullname: this.state.fullName,\n      full_phone_number: this.state.phoneNumber,\n      address: this.state.address,\n      country: this.state.country,\n      teamMemberOkyd: this.state.teamMemberOkyd,\n      natureOfBussiness: this.state.natureOfBussiness,\n      clientTarget: this.state.clientTarget,\n      user_type: this.state.userType,\n      activated: this.state.activated\n    };\n    const data = {\n      type: \"email_account\",\n      attributes: attrs\n    };\n    const httpBody = {\n      data: data //   token: this.state.otpAuthToken,\n\n    };\n    console.log('httpBody', httpBody);\n    const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n    this.createNewAccountApiCallId = requestMessage.messageId;\n    requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.accountsAPiEndPoint);\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(header));\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(httpBody));\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiMethodTypeAddDetail);\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n    return true;\n  }\n\n  getValidations() {\n    const headers = {\n      \"Content-Type\": configJSON.validationApiContentType\n    };\n    const getValidationsMsg = new Message(getName(MessageEnum.RestAPIRequestMessage));\n    this.validationApiCallId = getValidationsMsg.messageId;\n    getValidationsMsg.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.urlGetValidations);\n    getValidationsMsg.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n    getValidationsMsg.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.validationApiMethodType);\n    runEngine.sendMessage(getValidationsMsg.id, getValidationsMsg);\n  }\n\n  isNonNullAndEmpty(value) {\n    return value !== undefined && value !== null && value !== \"null\" && value.trim().length > 0;\n  }\n\n  validateCountryCodeAndPhoneNumber(countryCode, phoneNumber) {\n    let error = null;\n\n    if (this.isNonNullAndEmpty(phoneNumber)) {\n      if (!this.isNonNullAndEmpty(String(countryCode))) {\n        error = configJSON.errorCountryCodeNotSelected;\n      }\n    } else if (this.isNonNullAndEmpty(countryCode)) {\n      if (!this.isNonNullAndEmpty(phoneNumber)) {\n        error = \"Phone \" + configJSON.errorBlankField;\n      }\n    }\n\n    return error;\n  } // Customizable Area End\n\n\n}","map":{"version":3,"sources":["/home/lp-greenapex/gargi/okydpim-36944-react-native/src/packages/blocks/email-account-registration/src/EmailAccountRegistrationController.web.tsx"],"names":["Message","BlockComponent","runEngine","MessageEnum","getName","isEmpty","imgPasswordInVisible","imgPasswordVisible","configJSON","require","EmailAccountRegistrationController","constructor","props","arrayholder","passwordReg","emailReg","stringReg","phoneReg","numberReg","createAccountApiCallId","createNewAccountApiCallId","validationApiCallId","labelHeader","labelFirstName","lastName","labelEmail","labelPassword","labelRePassword","labelLegalText","labelLegalTermCondition","labelLegalPrivacyPolicy","btnTextSignUp","currentCountryCode","btnSignUpProps","onClick","createAccount","btnLegalPrivacyPolicyProps","goToPrivacyPolicy","btnLegalTermsAndConditionProps","goToTermsAndCondition","txtInputEmailWebPrpos","onChange","text","setState","errorEmail","email","target","value","txtInputEmailPrpos","txtInputEmailMobilePrpos","keyboardType","isPlatformWeb","txtInputCompanyNameWebPrpos","errorCompanyName","companyName","txtInputDomainNameWebPrpos","errorDomainName","domainName","txtInputFullNameWebPrpos","errorFullName","fullName","txtInputPhoneNumberWebPrpos","errorPhnNumber","phoneNumber","txtInputAddressWebPrpos","errorAddress","address","txtInputCountryWebPrpos","country","txtInputTeamOkydWebPrpos","teamMemberOkyd","txtInputNatureofBussinessWebPrpos","natureOfBussiness","txtInputTargetClientWebPrpos","clientTarget","subScribedMessages","RestAPIResponceMessage","NavigationPayLoadMessage","CountryCodeMessage","receive","bind","isStringNullOrBlank","attachBuildingBlock","state","userType","activated","errorMandatory","errorCountry","RegExp","from","message","id","apiRequestCallId","getData","RestAPIResponceDataMessage","responseJson","RestAPIResponceSuccessMessage","errorReponse","RestAPIResponceErrorMessage","data","length","regexData","password_validation_regexp","password_validation_rules","email_validation_regexp","errors","msg","AccoutResgistrationSuccess","addData","NavigationPropsMessage","send","parseApiErrorResponse","parseApiCatchErrorResponse","console","log","localStorage","setItem","attributes","meta","token","fullname","history","push","alert","JSON","stringify","otpAuthTkn","AuthTokenDataMessage","unSubscribeFromMessages","selectedCode","CountyCodeDataMessage","undefined","NavigationPrivacyPolicyMessage","NavigationTermAndConditionMessage","str","isValidEmail","test","errorAllFieldsAreMandatory","errorEmailNotValid","includes","errorDomainNotValid","match","errorStingOnly","errorPhoneNumberType","errorPhoneNumberMax","errorAddressMax","header","contentTypeApiAddDetail","attrs","company_name","domain","full_phone_number","user_type","type","httpBody","requestMessage","RestAPIRequestMessage","messageId","RestAPIResponceEndPointMessage","accountsAPiEndPoint","RestAPIRequestHeaderMessage","RestAPIRequestBodyMessage","RestAPIRequestMethodMessage","apiMethodTypeAddDetail","sendMessage","getValidations","headers","validationApiContentType","getValidationsMsg","urlGetValidations","validationApiMethodType","isNonNullAndEmpty","trim","validateCountryCodeAndPhoneNumber","countryCode","error","String","errorCountryCodeNotSelected","errorBlankField"],"mappings":"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","sourcesContent":["import { IBlock } from \"../../../framework/src/IBlock\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nimport MessageEnum, {\n  getName,\n} from \"../../../framework/src/Messages/MessageEnum\";\nimport {isEmpty} from 'lodash'\n\n// Customizable Area Start\nimport { imgPasswordInVisible, imgPasswordVisible } from \"./assets\";\n// Customizable Area End\n\nexport const configJSON = require(\"./config\");\n\nexport interface Props {\n  navigation: any;\n  id: string;\n}\n\nexport interface S {\n  // Customizable Area Start\n  fullName: string;\n  companyName: string;\n  phoneNumber: string;\n  email: string;\n  userType: string;\n  domainName: string;\n  address: string;\n  country: string;\n  teamMemberOkyd: string;\n  natureOfBussiness: string;\n  clientTarget: string;\n  errorMandatory: string;\n  errorEmail: string;\n  errorCompanyName: string;\n  errorDomainName: string;\n  errorFullName: string;\n  errorPhnNumber: string;\n  errorAddress: string;\n  errorCountry: string;\n  activated:boolean;\n\n  // Customizable Area End\n}\n\nexport interface SS {\n  // Customizable Area Start\n  id: any;\n  // Customizable Area End\n}\n\nexport default class EmailAccountRegistrationController extends BlockComponent<\n  Props,\n  S,\n  SS\n> {\n  // Customizable Area Start\n  arrayholder: any[];\n  passwordReg: RegExp;\n  emailReg: RegExp;\n  stringReg: RegExp;\n  phoneReg: RegExp;\n  numberReg: RegExp;\n  createAccountApiCallId: any;\n  createNewAccountApiCallId: any;\n\n  validationApiCallId: string = \"\";\n\n  imgPasswordVisible: any;\n  imgPasswordInVisible: any;\n\n  labelHeader: any;\n  labelFirstName: string;\n  lastName: string;\n  labelEmail: string;\n  labelPassword: string;\n  labelRePassword: string;\n  labelLegalText: string;\n  labelLegalTermCondition: string;\n  labelLegalPrivacyPolicy: string;\n  btnTextSignUp: string;\n\n  currentCountryCode: any;\n  // Customizable Area End\n\n  constructor(props: Props) {\n    super(props);\n    this.subScribedMessages = [\n      getName(MessageEnum.RestAPIResponceMessage),\n      getName(MessageEnum.NavigationPayLoadMessage),\n      getName(MessageEnum.CountryCodeMessage),\n    ];\n    this.receive = this.receive.bind(this);\n    this.isStringNullOrBlank = this.isStringNullOrBlank.bind(this);\n\n    runEngine.attachBuildingBlock(this, this.subScribedMessages);\n\n    this.state = {\n      // Customizable Area Start\n      email: \"\",\n      companyName: \"\",\n      domainName: \"\",\n      fullName: \"\",\n      phoneNumber: \"\",\n      address: \"\",\n      country: \"\",\n      teamMemberOkyd: \"\",\n      natureOfBussiness: \"\",\n      clientTarget: \"\",\n      userType: \"Subscriber\",\n      activated:true,\n      errorMandatory: \"\",\n      errorEmail: \"\",\n      errorCompanyName: \"\",\n      errorDomainName: \"\",\n      errorFullName: \"\",\n      errorPhnNumber: \"\",\n      errorAddress: \"\",\n      errorCountry: \"\",\n      // Customizable Area End\n    };\n\n    // Customizable Area Start\n    this.arrayholder = [];\n    this.passwordReg = new RegExp(\"\\\\w+\");\n    this.emailReg = new RegExp(\"\\\\w+\");\n    this.stringReg = new RegExp(/^[A-Za-z]+$/);\n    this.phoneReg = new RegExp(/^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/);\n    this.numberReg = new RegExp(/^[0-9]*$/);\n\n\n    this.imgPasswordVisible = imgPasswordVisible;\n    this.imgPasswordInVisible = imgPasswordInVisible;\n\n    this.labelHeader = configJSON.labelHeader;\n    this.labelFirstName = configJSON.labelFirstName;\n    this.lastName = configJSON.lastName;\n    this.labelEmail = configJSON.labelEmail;\n    this.labelPassword = configJSON.labelPassword;\n    this.labelRePassword = configJSON.labelRePassword;\n    this.labelLegalText = configJSON.labelLegalText;\n    this.labelLegalTermCondition = configJSON.labelLegalTermCondition;\n    this.labelLegalPrivacyPolicy = configJSON.labelLegalPrivacyPolicy;\n    this.btnTextSignUp = configJSON.btnTextSignUp;\n    // Customizable Area End\n  }\n\n  async receive(from: string, message: Message) {\n    // Customizable Area Start\n    if (getName(MessageEnum.RestAPIResponceMessage) === message.id) {\n      const apiRequestCallId = message.getData(\n        getName(MessageEnum.RestAPIResponceDataMessage)\n      );\n\n      var responseJson = message.getData(\n        getName(MessageEnum.RestAPIResponceSuccessMessage)\n      );\n\n      var errorReponse = message.getData(\n        getName(MessageEnum.RestAPIResponceErrorMessage)\n      );\n\n      // console.log('apiRequestCallId',apiRequestCallId)\n      //   console.log('createNewAccountApiCallId',this.createNewAccountApiCallId)\n      if (apiRequestCallId && responseJson) {\n        if (apiRequestCallId === this.validationApiCallId) {\n          this.arrayholder = responseJson.data;\n\n          if (this.arrayholder && this.arrayholder.length !== 0) {\n            let regexData = this.arrayholder[0];\n\n            if (regexData.password_validation_regexp) {\n              this.passwordReg = new RegExp(\n                regexData.password_validation_regexp\n              );\n            }\n\n            if (regexData.password_validation_rules) {\n              //   this.setState({\n              //     passwordHelperText: regexData.password_validation_rules,\n              //   });\n            }\n\n            if (regexData.email_validation_regexp) {\n              this.emailReg = new RegExp(regexData.email_validation_regexp);\n            }\n          }\n        } else if (apiRequestCallId === this.createAccountApiCallId) {\n          if (!responseJson.errors) {\n            const msg: Message = new Message(\n              getName(MessageEnum.AccoutResgistrationSuccess)\n            );\n\n            msg.addData(\n              getName(MessageEnum.NavigationPropsMessage),\n              this.props\n            );\n\n            this.send(msg);\n          } else {\n            //Check Error Response\n            this.parseApiErrorResponse(responseJson);\n          }\n\n          this.parseApiCatchErrorResponse(errorReponse);\n        }\n        \n         else if (apiRequestCallId === this.createNewAccountApiCallId) {\n          console.log('responseJson',responseJson)\n          if (responseJson.data ) {\n             localStorage.setItem('email',responseJson.data.attributes.email)\n             localStorage.setItem('auth',responseJson.meta.token)\n             localStorage.setItem('fullname',responseJson.data.attributes.fullname)\n\n            // @ts-ignore\n             this.props.history.push(\"new-password\")\n          } else{\n             console.log('responseJson',responseJson)\n           alert(JSON.stringify(responseJson.errors))\n          }\n        }\n      }\n    }\n\n    if (getName(MessageEnum.NavigationPayLoadMessage) === message.id) {\n      const otpAuthTkn = message.getData(\n        getName(MessageEnum.AuthTokenDataMessage)\n      );\n      if (otpAuthTkn && otpAuthTkn.length > 0) {\n        // this.setState({ otpAuthToken: otpAuthTkn });\n        // runEngine.debugLog(\"otpAuthTkn\", this.state.otpAuthToken);\n        runEngine.unSubscribeFromMessages(this as IBlock, [message.id]);\n      }\n    }\n\n    if (getName(MessageEnum.CountryCodeMessage) === message.id) {\n      var selectedCode = message.getData(\n        getName(MessageEnum.CountyCodeDataMessage)\n      );\n\n      if (selectedCode !== undefined) {\n        // this.setState({\n        //   countryCodeSelected:\n        //     selectedCode.indexOf(\"+\") > 0\n        //       ? selectedCode.split(\"+\")[1]\n        //       : selectedCode,\n        // });\n      }\n    }\n    // Customizable Area End\n  }\n\n  // Customizable Area Start\n  goToPrivacyPolicy() {\n    const msg: Message = new Message(\n      getName(MessageEnum.NavigationPrivacyPolicyMessage)\n    );\n    msg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n    this.send(msg);\n  }\n\n  goToTermsAndCondition() {\n    const msg: Message = new Message(\n      getName(MessageEnum.NavigationTermAndConditionMessage)\n    );\n    msg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n    this.send(msg);\n  }\n\n  isStringNullOrBlank(str: string) {\n    return str === null || str.length === 0;\n  }\n\n  isValidEmail(email: string) {\n    return this.emailReg.test(email);\n  }\n\n  createAccount(): boolean {\n     if (\n      this.state.email === null ||\n      this.state.email.length === 0 ||\n      isEmpty(this.state.email)\n    ){\n      this.setState({\n          errorEmail:configJSON.errorAllFieldsAreMandatory\n      })\n      return false;\n    }else if( !this.emailReg.test(this.state.email)){\n      this.setState({\n          errorEmail:configJSON.errorEmailNotValid\n      })\n      return false;\n    }\n\n     if (isEmpty(this.state.companyName)){\n      this.setState({\n          errorCompanyName :configJSON.errorAllFieldsAreMandatory\n      })\n      return false;\n    }\n\n     if (isEmpty(this.state.domainName)){\n      this.setState({\n          errorDomainName :configJSON.errorAllFieldsAreMandatory\n      })\n      return false;\n    }else if( !this.state.domainName.includes('.')){\n      this.setState({\n          errorDomainName:configJSON.errorDomainNotValid\n      })\n      return false;\n    }\n\n    if (isEmpty(this.state.fullName)){\n      this.setState({\n          errorFullName :configJSON.errorAllFieldsAreMandatory\n      })\n      return false;\n    }else if( !this.state.fullName.match(this.stringReg)){\n      this.setState({\n          errorFullName:configJSON.errorStingOnly\n      })\n      return false;\n    }\n\n    if (isEmpty(this.state.phoneNumber)){\n      this.setState({\n          errorPhnNumber :configJSON.errorAllFieldsAreMandatory\n      })\n      return false;\n    }else if( !this.state.phoneNumber.match(this.phoneReg)){\n      this.setState({\n          errorPhnNumber:configJSON.errorPhoneNumberType\n      })\n      return false;\n    }else if( this.state.phoneNumber.length>10){\n      this.setState({\n          errorPhnNumber:configJSON.errorPhoneNumberMax\n      })\n      return false;\n    }\n\n     if (isEmpty(this.state.address)){\n      this.setState({\n          errorAddress :configJSON.errorAllFieldsAreMandatory\n      })\n      return false;\n    }else if( this.state.address.length > 250){\n      this.setState({\n          errorAddress:configJSON.errorAddressMax\n      })\n      return false;\n    }\n\n   console.log('this.state',this.state)\n    const header = {\n      \"Content-Type\": configJSON.contentTypeApiAddDetail,\n    };\n\n    const attrs = {\n    email : this.state.email,\n    company_name : this.state.companyName,\n    domain : this.state.domainName,\n    fullname : this.state.fullName,\n    full_phone_number : this.state.phoneNumber,\n    address : this.state.address,\n    country : this.state.country,\n    teamMemberOkyd : this.state.teamMemberOkyd,\n    natureOfBussiness : this.state.natureOfBussiness,\n    clientTarget : this.state.clientTarget,\n    user_type : this.state.userType,\n    activated : this.state.activated,\n    };\n\n    const data = {\n      type: \"email_account\",\n      attributes: attrs,\n    };\n\n    const httpBody = {\n      data: data,\n      //   token: this.state.otpAuthToken,\n    };\n\n    console.log('httpBody',httpBody)\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n    this.createNewAccountApiCallId = requestMessage.messageId;\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.accountsAPiEndPoint\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(header)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestBodyMessage),\n      JSON.stringify(httpBody)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.apiMethodTypeAddDetail\n    );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n    return true;\n  }\n\n  getValidations() {\n    const headers = {\n      \"Content-Type\": configJSON.validationApiContentType,\n    };\n\n    const getValidationsMsg = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n    this.validationApiCallId = getValidationsMsg.messageId;\n\n    getValidationsMsg.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.urlGetValidations\n    );\n\n    getValidationsMsg.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(headers)\n    );\n    getValidationsMsg.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.validationApiMethodType\n    );\n    runEngine.sendMessage(getValidationsMsg.id, getValidationsMsg);\n  }\n\n  isNonNullAndEmpty(value: String) {\n    return (\n      value !== undefined &&\n      value !== null &&\n      value !== \"null\" &&\n      value.trim().length > 0\n    );\n  }\n\n  validateCountryCodeAndPhoneNumber(countryCode: string, phoneNumber: string) {\n    let error = null;\n\n    if (this.isNonNullAndEmpty(phoneNumber)) {\n      if (!this.isNonNullAndEmpty(String(countryCode))) {\n        error = configJSON.errorCountryCodeNotSelected;\n      }\n    } else if (this.isNonNullAndEmpty(countryCode)) {\n      if (!this.isNonNullAndEmpty(phoneNumber)) {\n        error = \"Phone \" + configJSON.errorBlankField;\n      }\n    }\n\n    return error;\n  }\n\n  btnSignUpProps = {\n    onClick: () => this.createAccount(),\n  };\n\n  btnLegalPrivacyPolicyProps = {\n    onClick: () => this.goToPrivacyPolicy(),\n  };\n\n  btnLegalTermsAndConditionProps = {\n    onClick: () => this.goToTermsAndCondition(),\n  };\n\n  txtInputEmailWebPrpos = {\n    onChange: (text: any) => {\n      this.setState({\n        errorEmail: \"\",\n        email: text.target.value,\n      });\n      //@ts-ignore\n      this.txtInputEmailPrpos.value = text.target.value;\n    },\n  };\n\n  txtInputEmailMobilePrpos = {\n    ...this.txtInputEmailWebPrpos,\n    keyboardType: \"email-address\",\n  };\n\n  txtInputEmailPrpos = this.isPlatformWeb()\n    ? this.txtInputEmailWebPrpos\n    : this.txtInputEmailMobilePrpos;\n\n  txtInputCompanyNameWebPrpos = {\n    onChange: (text: any) => {\n      this.setState({\n        errorCompanyName: \"\",\n        companyName: text.target.value,\n      });\n      //@ts-ignore\n    },\n  };\n\n  txtInputDomainNameWebPrpos = {\n    onChange: (text: any) => {\n      this.setState({\n        errorDomainName: \"\",\n        domainName: text.target.value,\n      });\n      //@ts-ignore\n    },\n  };\n\n  txtInputFullNameWebPrpos = {\n    onChange: (text: any) => {\n      this.setState({\n        errorFullName: \"\",\n        fullName: text.target.value,\n      });\n      //@ts-ignore\n    },\n  };\n\n  txtInputPhoneNumberWebPrpos = {\n    onChange: (text: Number) => {\n      //@ts-ignore\n      this.setState({ errorPhnNumber: \"\", phoneNumber: text?.target.value });\n    },\n  };\n\n  txtInputAddressWebPrpos = {\n    onChange: (text: any) => {\n      this.setState({ errorAddress: \"\", address: text.target.value });\n      //@ts-ignore\n    },\n  };\n  \n  txtInputCountryWebPrpos = {\n    onChange: (text: any) => {\n      this.setState({  country: text.target.value });\n      //@ts-ignore\n    },\n  };\n\n  txtInputTeamOkydWebPrpos = {\n    onChange: (text: any) => {\n      this.setState({  teamMemberOkyd: text.target.value });\n      //@ts-ignore\n    },\n  };\n\n  txtInputNatureofBussinessWebPrpos = {\n    onChange: (text: any) => {\n      this.setState({  natureOfBussiness: text.target.value });\n      //@ts-ignore\n    },\n  };\n\n  txtInputTargetClientWebPrpos = {\n    onChange: (text: any) => {\n      this.setState({ clientTarget: text.target.value });\n      //@ts-ignore\n    },\n  };\n\n\n\n\n  // Customizable Area End\n}\n"]},"metadata":{},"sourceType":"module"}