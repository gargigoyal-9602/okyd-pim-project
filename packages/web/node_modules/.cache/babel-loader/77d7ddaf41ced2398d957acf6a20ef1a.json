{"ast":null,"code":"import _regeneratorRuntime from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nimport MessageEnum, { getName } from \"../../../framework/src/Messages/MessageEnum\"; // Customizable Area Start\n\nimport { imgPasswordInVisible, imgPasswordVisible } from \"./assets\"; // Customizable Area End\n\nexport const configJSON = require(\"./config\");\nexport default class UserProfileBasicController extends BlockComponent {\n  // Customizable Area Start\n  // Customizable Area End\n  constructor(props) {\n    super(props);\n    this.labelFirstName = void 0;\n    this.lastName = void 0;\n    this.labelArea = void 0;\n    this.labelMobile = void 0;\n    this.labelEmail = void 0;\n    this.labelCurrentPassword = void 0;\n    this.labelNewPassword = void 0;\n    this.labelRePassword = void 0;\n    this.btnTextCancelPasswordChange = void 0;\n    this.btnTextSaveChanges = void 0;\n    this.labelHeader = void 0;\n    this.btnTextChangePassword = void 0;\n    this.arrayholder = void 0;\n    this.passwordReg = void 0;\n    this.emailReg = void 0;\n    this.apiCallMessageUpdateProfileRequestId = void 0;\n    this.validationApiCallId = \"\";\n    this.apiChangePhoneValidation = void 0;\n    this.registrationAndLoginType = \"\";\n    this.authToken = void 0;\n    this.uniqueSessionRequesterId = void 0;\n    this.userProfileGetApiCallId = void 0;\n    this.userAttr = void 0;\n    this.txtInputFirstNameProps = {\n      onChangeText: text => {\n        this.setState({\n          firstName: text\n        }); //@ts-ignore\n\n        this.txtInputFirstNameProps.value = text;\n      }\n    };\n    this.txtInputLastNameProps = {\n      onChangeText: text => {\n        this.setState({\n          lastName: text\n        }); //@ts-ignore\n\n        this.txtInputLastNameProps.value = text;\n      }\n    };\n    this.txtInputPhoneNumberlWebProps = {\n      onChangeText: text => {\n        if (this.txtInputPhoneNumberlWebProps.editable) {\n          this.setState({\n            phoneNumber: text\n          }); //@ts-ignore\n\n          this.txtInputPhoneNumberProps.value = text;\n        }\n      },\n      editable: true\n    };\n    this.txtInputPhoneNumberlMobileProps = _objectSpread(_objectSpread({}, this.txtInputPhoneNumberlWebProps), {}, {\n      autoCompleteType: \"tel\",\n      keyboardType: \"phone-pad\"\n    });\n    this.txtInputPhoneNumberProps = this.isPlatformWeb() ? this.txtInputPhoneNumberlWebProps : this.txtInputPhoneNumberlMobileProps;\n    this.txtInputEmailWebProps = {\n      value: \"\",\n      editable: true,\n      onChangeText: text => {\n        if (this.txtInputEmailProps.editable) {\n          this.setState({\n            email: text\n          });\n          this.txtInputEmailProps.value = text;\n        }\n      }\n    };\n    this.txtInputEmailMobileProps = _objectSpread(_objectSpread({}, this.txtInputEmailWebProps), {}, {\n      keyboardType: \"email-address\"\n    });\n    this.txtInputEmailProps = this.isPlatformWeb() ? this.txtInputEmailWebProps : this.txtInputEmailMobileProps;\n    this.btnEnableEditPasswordProps = {\n      onPress: () => this.enableDisableEditPassword(true)\n    };\n    this.txtInputCurrentPasswordProps = {\n      onChangeText: text => {\n        this.setState({\n          currentPasswordText: text\n        });\n        this.txtInputCurrentPasswordProps.value = text;\n      },\n      value: \"\",\n      secureTextEntry: true\n    };\n    this.btnPasswordShowHideButtonProps = {\n      onPress: () => {\n        this.setState({\n          enablePasswordField: !this.txtInputCurrentPasswordProps.secureTextEntry\n        });\n        this.txtInputCurrentPasswordProps.secureTextEntry = !this.txtInputCurrentPasswordProps.secureTextEntry;\n        this.imgPasswordShowhideProps.source = this.txtInputCurrentPasswordProps.secureTextEntry ? imgPasswordVisible : imgPasswordInVisible;\n      }\n    };\n    this.imgPasswordShowhideProps = {\n      source: imgPasswordVisible\n    };\n    this.txtInputNewPasswordProps = {\n      onChangeText: text => {\n        this.setState({\n          newPasswordText: text\n        });\n        this.txtInputNewPasswordProps.value = text;\n      },\n      value: \"\",\n      secureTextEntry: true\n    };\n    this.btnNewPasswordShowHideButtonProps = {\n      onPress: () => {\n        this.setState({\n          enableNewPasswordField: !this.txtInputNewPasswordProps.secureTextEntry\n        });\n        this.txtInputNewPasswordProps.secureTextEntry = !this.txtInputNewPasswordProps.secureTextEntry;\n        this.imgNewPasswordShowhideProps.source = this.txtInputNewPasswordProps.secureTextEntry ? imgPasswordVisible : imgPasswordInVisible;\n      }\n    };\n    this.imgNewPasswordShowhideProps = {\n      source: imgPasswordVisible\n    };\n    this.txtInputReTypePasswordProps = {\n      onChangeText: text => {\n        this.setState({\n          reTypePasswordText: text\n        });\n        this.txtInputReTypePasswordProps.value = text;\n      },\n      secureTextEntry: true,\n      value: \"\"\n    };\n    this.imgReTypePasswordShowhideProps = {\n      source: imgPasswordVisible\n    };\n    this.btnReTypePasswordShowHideProps = {\n      onPress: () => {\n        this.setState({\n          enableReTypePasswordField: !this.txtInputReTypePasswordProps.secureTextEntry\n        });\n        this.txtInputReTypePasswordProps.secureTextEntry = !this.txtInputReTypePasswordProps.secureTextEntry;\n        this.imgReTypePasswordShowhideProps.source = this.txtInputNewPasswordProps.secureTextEntry ? imgPasswordVisible : imgPasswordInVisible;\n      }\n    };\n    this.btnDisableEditPasswordProps = {\n      onPress: () => this.enableDisableEditPassword(false)\n    };\n    this.receive = this.receive.bind(this); // Customizable Area Start\n\n    this.subScribedMessages = [getName(MessageEnum.RestAPIResponceMessage), getName(MessageEnum.SessionResponseMessage), getName(MessageEnum.CountryCodeMessage)];\n    this.state = {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      phoneNumber: \"\",\n      currentCountryCode: configJSON.hintCountryCode,\n      data: [],\n      passwordHelperText: \"\",\n      enablePasswordField: true,\n      enableReTypePasswordField: true,\n      enableNewPasswordField: true,\n      edtEmailEnabled: true,\n      llDoChangePwdContainerVisible: false,\n      llChangePwdDummyShowContainerVisible: false,\n      currentPasswordText: \"\",\n      newPasswordText: \"\",\n      reTypePasswordText: \"\",\n      edtMobileNoEnabled: true,\n      countryCodeEnabled: true,\n      saveButtonDisable: false\n    };\n    this.arrayholder = [];\n    this.passwordReg = new RegExp(\"\\\\w+\");\n    this.emailReg = new RegExp(\"\\\\w+\");\n    this.labelFirstName = configJSON.labelFirstName;\n    this.lastName = configJSON.lastName;\n    this.labelArea = configJSON.labelArea;\n    this.labelMobile = configJSON.labelMobile;\n    this.labelEmail = configJSON.labelEmail;\n    this.labelCurrentPassword = configJSON.labelCurrentPassword;\n    this.labelNewPassword = configJSON.labelNewPassword;\n    this.labelRePassword = configJSON.labelRePassword;\n    this.btnTextCancelPasswordChange = configJSON.btnTextCancelPasswordChange;\n    this.btnTextSaveChanges = configJSON.btnTextSaveChanges;\n    this.labelHeader = configJSON.labelHeader;\n    this.btnTextChangePassword = configJSON.btnTextChangePassword; // Customizable Area End\n\n    runEngine.attachBuildingBlock(this, this.subScribedMessages);\n  }\n\n  receive(from, message) {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var selectedCode, apiRequestCallId, responseJson, errorReponse, regexData, email, firstName, lastName, currentCountryCode, phoneNumber, requesterId, sessionToken;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            // Customizable Area Start\n            runEngine.debugLog(\"on recieive==>\" + JSON.stringify(message));\n\n            if (getName(MessageEnum.CountryCodeMessage) === message.id) {\n              selectedCode = message.getData(getName(MessageEnum.CountyCodeDataMessage));\n\n              if (selectedCode !== undefined) {\n                _this.setState({\n                  currentCountryCode: selectedCode.indexOf(\"+\") > 0 ? selectedCode.split(\"+\")[1] : selectedCode\n                });\n              }\n            }\n\n            if (getName(MessageEnum.RestAPIResponceMessage) === message.id) {\n              apiRequestCallId = message.getData(getName(MessageEnum.RestAPIResponceDataMessage));\n              responseJson = message.getData(getName(MessageEnum.RestAPIResponceSuccessMessage));\n              errorReponse = message.getData(getName(MessageEnum.RestAPIResponceErrorMessage));\n\n              if (apiRequestCallId && responseJson) {\n                if (apiRequestCallId === _this.validationApiCallId && responseJson) {\n                  _this.arrayholder = responseJson.data;\n\n                  if (_this.arrayholder && _this.arrayholder.length !== 0) {\n                    regexData = _this.arrayholder[0];\n\n                    if (regexData) {\n                      if (regexData.password_validation_regexp) {\n                        _this.passwordReg = new RegExp(regexData.password_validation_regexp);\n                      }\n\n                      if (regexData.email_validation_regexp) {\n                        _this.emailReg = new RegExp(regexData.email_validation_regexp);\n                      }\n\n                      if (regexData.email_validation_regexp) {\n                        _this.setState({\n                          passwordHelperText: regexData.password_validation_rules\n                        });\n                      }\n                    }\n                  }\n                } else if (apiRequestCallId === _this.userProfileGetApiCallId) {\n                  if (responseJson && !responseJson.errors && responseJson.data && responseJson.data.attributes) {\n                    //On User Profile Success\n                    _this.userAttr = responseJson.data.attributes;\n\n                    if (_this.userAttr !== null && _this.userAttr !== undefined) {\n                      email = _this.userAttr.email;\n                      firstName = _this.userAttr.first_name;\n                      lastName = _this.userAttr.last_name;\n                      currentCountryCode = _this.userAttr.country_code;\n                      phoneNumber = _this.userAttr.phone_number ? _this.userAttr.phone_number : \"\";\n\n                      _this.setState({\n                        email: email,\n                        firstName: firstName,\n                        lastName: lastName,\n                        phoneNumber: phoneNumber\n                      }); //@ts-ignore\n\n\n                      _this.txtInputFirstNameProps.value = firstName; //@ts-ignore\n\n                      _this.txtInputLastNameProps.value = lastName; //@ts-ignore\n\n                      _this.txtInputEmailProps.value = email; //@ts-ignore\n\n                      _this.txtInputPhoneNumberProps.value = phoneNumber;\n                      _this.registrationAndLoginType = _this.userAttr.type;\n\n                      if (_this.userAttr.country_code) {\n                        _this.setState({\n                          currentCountryCode: currentCountryCode\n                        });\n                      }\n\n                      if (configJSON.ACCOUNT_TYPE_EMAIL === _this.registrationAndLoginType) {\n                        _this.setState({\n                          edtEmailEnabled: false,\n                          llChangePwdDummyShowContainerVisible: true\n                        });\n\n                        _this.txtInputEmailProps.editable = false;\n                      } else if (configJSON.ACCOUNT_TYPE_SOCIAL === _this.registrationAndLoginType) {\n                        _this.setState({\n                          edtEmailEnabled: false,\n                          llChangePwdDummyShowContainerVisible: false,\n                          llDoChangePwdContainerVisible: false\n                        });\n\n                        _this.txtInputEmailProps.editable = false;\n                      } else if (configJSON.ACCOUNT_TYPE_PHONE === _this.registrationAndLoginType) {\n                        _this.setState({\n                          llChangePwdDummyShowContainerVisible: true,\n                          edtMobileNoEnabled: false,\n                          countryCodeEnabled: false\n                        });\n\n                        _this.txtInputPhoneNumberProps.editable = false;\n                      }\n                    }\n                  } else {\n                    //Check Error Response\n                    if (responseJson.errors && responseJson.errors.length > 0 && responseJson.errors[0].token) {\n                      _this.showAlert(\"Session Expired\", \"Please Log in again.\");\n                    } else {\n                      _this.parseApiErrorResponse(responseJson);\n                    }\n                  }\n\n                  _this.parseApiCatchErrorResponse(errorReponse);\n                } else if (apiRequestCallId === _this.apiChangePhoneValidation) {\n                  if (responseJson != null && responseJson.errors === undefined) {\n                    //On Change Phone Validation Success\n                    _this.validateAndUpdateProfile();\n                  } else {\n                    _this.parseApiErrorResponse(responseJson);\n                  }\n\n                  _this.parseApiCatchErrorResponse(errorReponse);\n                } else if (apiRequestCallId === _this.apiCallMessageUpdateProfileRequestId) {\n                  if (responseJson != null && responseJson.errors === undefined) {\n                    //On Change Phone Validation Success\n                    _this.showAlert(\"Success\", \"Profile updated successfully.\");\n\n                    _this.enableDisableEditPassword(false);\n\n                    _this.getUserProfile();\n                  } else {\n                    _this.parseApiErrorResponse(responseJson);\n                  }\n                }\n              }\n            } else if (getName(MessageEnum.SessionResponseMessage) === message.id) {\n              requesterId = message.getData(getName(MessageEnum.SessionRequestedBy));\n\n              if (requesterId === _this.uniqueSessionRequesterId) {\n                sessionToken = message.getData(getName(MessageEnum.SessionResponseToken));\n                _this.authToken = sessionToken;\n\n                _this.getUserProfile();\n              }\n            } // Customizable Area End\n\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  }\n\n  validateMobileAndThenUpdateUserProfile() {\n    let countryCode = this.state.currentCountryCode;\n    let mobileNo = this.state.phoneNumber;\n    let error = \"\";\n    error = this.validateCountryCodeAndPhoneNumber(countryCode, mobileNo);\n\n    if (error) {\n      this.showAlert(configJSON.errorTitle, error);\n      return;\n    }\n\n    if (this.userAttr) {\n      const countryCodeOld = this.userAttr.country_code;\n      const mobileNoOld = this.userAttr.phone_number;\n\n      if (Number.parseInt(countryCode) === Number.parseInt(countryCodeOld) || countryCode === configJSON.hintCountryCode) {\n        countryCode = null;\n      }\n\n      if (Number.parseInt(this.state.phoneNumber) === Number.parseInt(mobileNoOld)) {\n        mobileNo = null;\n      }\n    }\n\n    if (mobileNo && countryCode) {\n      this.validateMobileOnServer(this.state.currentCountryCode, this.state.phoneNumber);\n    } else {\n      this.validateAndUpdateProfile();\n    }\n  }\n\n  validateEmail(email) {\n    let error = null;\n\n    if (!this.isValidEmail(email)) {\n      error = configJSON.errorEmailNotValid;\n    }\n\n    return error;\n  }\n\n  validateLastName(lastName) {\n    return !this.isNonNullAndEmpty(lastName) ? \"Last name \" + configJSON.errorBlankField : null;\n  }\n\n  validateFirstName(firstName) {\n    return !this.isNonNullAndEmpty(firstName) ? \"First name \" + configJSON.errorBlankField : null;\n  }\n\n  validateCountryCodeAndPhoneNumber(countryCode, phoneNumber) {\n    let error = null;\n\n    if (this.isNonNullAndEmpty(phoneNumber)) {\n      if (!this.isNonNullAndEmpty(String(countryCode)) || configJSON.hintCountryCode === countryCode) {\n        error = configJSON.errorCountryCodeNotSelected;\n      }\n    } else if (this.isNonNullAndEmpty(countryCode) && configJSON.hintCountryCode !== countryCode) {\n      if (!this.isNonNullAndEmpty(phoneNumber)) {\n        error = \"Phone \" + configJSON.errorBlankField;\n      }\n    }\n\n    return error;\n  }\n\n  validateAndUpdateProfile() {\n    let firstName = this.state.firstName;\n    let lastName = this.state.lastName;\n    let countryCode = this.state.currentCountryCode;\n    let mobileNo = this.state.phoneNumber;\n    let email = this.state.email;\n    let currentPwd = this.state.currentPasswordText;\n    let newPwd = this.state.newPasswordText;\n    let reTypePwd = this.state.reTypePasswordText;\n    const errorFirstName = this.validateFirstName(firstName);\n    const errorLastName = this.validateLastName(lastName);\n    const errorMobileNo = this.validateCountryCodeAndPhoneNumber(countryCode, mobileNo);\n    const errorEmail = this.validateEmail(email);\n    const errorCurrentPwd = this.validateCurrentPwd(currentPwd);\n    const errorNewPwd = this.validatePassword(newPwd);\n    const errorRetypePwd = this.validateRePassword(reTypePwd);\n    let isValidForSignUp = true;\n\n    if (errorFirstName != null) {\n      this.showAlert(configJSON.errorTitle, errorFirstName);\n      return false;\n    } else if (errorLastName != null) {\n      this.showAlert(configJSON.errorTitle, errorLastName);\n      return false;\n    }\n\n    if (configJSON.ACCOUNT_TYPE_EMAIL === this.registrationAndLoginType) {\n      if (errorMobileNo !== null) {\n        this.showAlert(configJSON.errorTitle, errorMobileNo);\n        return false;\n      }\n    } else if (configJSON.ACCOUNT_TYPE_SOCIAL === this.registrationAndLoginType) {\n      if (errorMobileNo != null) {\n        this.showAlert(configJSON.errorTitle, errorMobileNo);\n        return false;\n      }\n    } else if (configJSON.ACCOUNT_TYPE_PHONE === this.registrationAndLoginType) {\n      if (errorEmail != null) {\n        this.showAlert(configJSON.errorTitle, errorEmail);\n        return false;\n      }\n    } else {\n      if (errorMobileNo != null) {\n        this.showAlert(configJSON.errorTitle, errorMobileNo);\n        return false;\n      } else if (errorEmail != null) {\n        this.showAlert(configJSON.errorTitle, errorEmail);\n        return false;\n      }\n    }\n\n    if (configJSON.ACCOUNT_TYPE_SOCIAL !== this.registrationAndLoginType && this.state.llDoChangePwdContainerVisible) {\n      if (errorCurrentPwd != null) {\n        this.showAlert(configJSON.errorTitle, errorCurrentPwd);\n        return false;\n      } else if (errorNewPwd != null) {\n        this.showAlert(configJSON.errorTitle, errorNewPwd);\n        return false;\n      } else if (errorRetypePwd != null) {\n        this.showAlert(configJSON.errorTitle, errorRetypePwd);\n        return false;\n      } else if (newPwd !== reTypePwd) {\n        this.showAlert(configJSON.errorTitle, configJSON.errorBothPasswordsNotSame);\n        return false;\n      } else if (currentPwd === newPwd) {\n        this.showAlert(configJSON.errorTitle, configJSON.errorCurrentNewPasswordMatch);\n        return false;\n      }\n    } //Call update API\n\n\n    if (this.userAttr) {\n      let firstNameOld = this.userAttr.first_name;\n      let lastNameOld = this.userAttr.last_name;\n      let countryCodeOld = this.userAttr.country_code + \"\";\n      let mobileNoOld = this.userAttr.phone_number + \"\";\n      let emailOld = this.userAttr.email;\n      this.registrationAndLoginType = this.userAttr.type;\n\n      if (this.isNonNullAndEmpty(firstName) && firstName === firstNameOld) {\n        firstName = null;\n      }\n\n      if (this.isNonNullAndEmpty(lastName) && lastName === lastNameOld) {\n        lastName = null;\n      }\n\n      if (this.isNonNullAndEmpty(countryCode) && countryCode === countryCodeOld) {\n        countryCode = null;\n      }\n\n      if (this.isNonNullAndEmpty(mobileNo) && mobileNo === mobileNoOld) {\n        mobileNo = null;\n      }\n\n      if (countryCode != null || mobileNo != null) {\n        if (countryCode == null) {\n          countryCode = countryCodeOld;\n        }\n\n        if (mobileNo == null) {\n          mobileNo = mobileNoOld;\n        }\n      }\n\n      if (this.isNonNullAndEmpty(email) && email === emailOld) {\n        email = null;\n      }\n    }\n\n    if (this.isNonNullAndEmpty(firstName) || this.isNonNullAndEmpty(lastName) || this.isNonNullAndEmpty(countryCode) || this.isNonNullAndEmpty(mobileNo) || this.isNonNullAndEmpty(email) || this.isNonNullAndEmpty(currentPwd) && this.isNonNullAndEmpty(newPwd)) {\n      const header = {\n        \"Content-Type\": configJSON.contentTypeApiUpdateUser,\n        token: this.authToken\n      };\n      let data = {\n        first_name: this.state.firstName,\n        last_name: this.state.lastName\n      };\n\n      if (this.state.edtMobileNoEnabled) {\n        if (configJSON.hintCountryCode !== countryCode && this.isNonNullAndEmpty(String(countryCode)) && this.isNonNullAndEmpty(String(mobileNo))) {\n          data = _objectSpread(_objectSpread({}, data), {\n            new_phone_number: String(countryCode) + String(mobileNo)\n          });\n        }\n      }\n\n      if (this.isNonNullAndEmpty(email)) {\n        data = _objectSpread(_objectSpread({}, data), {\n          new_email: email\n        });\n      }\n\n      if (this.isNonNullAndEmpty(currentPwd) && this.isNonNullAndEmpty(newPwd)) {\n        data = _objectSpread(_objectSpread({}, data), {\n          current_password: currentPwd,\n          new_password: newPwd\n        });\n      }\n\n      const httpBody = {\n        data: data\n      };\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      this.apiCallMessageUpdateProfileRequestId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.apiEndPointUpdateUser);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(header));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(httpBody));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiUpdateUserType);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n    }\n  }\n\n  validateCurrentPwd(currentPwd) {\n    if (!this.isNonNullAndEmpty(currentPwd)) {\n      return configJSON.errorCurrentPasswordNotValid;\n    } else {\n      return null;\n    }\n  }\n\n  validatePassword(newPwd) {\n    if (!this.passwordReg.test(newPwd)) {\n      return configJSON.errorNewPasswordNotValid;\n    } else {\n      return null;\n    }\n  }\n\n  validateRePassword(reTypePwd) {\n    if (!this.passwordReg.test(reTypePwd)) {\n      return configJSON.errorReTypePasswordNotValid;\n    } else {\n      return null;\n    }\n  }\n\n  isNonNullAndEmpty(value) {\n    return value !== undefined && value !== null && value !== \"null\" && value.trim().length > 0;\n  }\n\n  validateMobileOnServer(countryCode, mobileNo) {\n    const header = {\n      \"Content-Type\": configJSON.contenttypeApiValidateMobileNo,\n      token: this.authToken\n    };\n    const data = {\n      new_phone_number: countryCode + mobileNo\n    };\n    const httpBody = {\n      data: data\n    };\n    const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n    this.apiChangePhoneValidation = requestMessage.messageId;\n    requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.endPointApiValidateMobileNo);\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(header));\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(httpBody));\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.callTypeApiValidateMobileNo);\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n  }\n\n  enableDisableEditPassword(isEditable) {\n    if (configJSON.ACCOUNT_TYPE_SOCIAL === this.registrationAndLoginType) {\n      this.setState({\n        edtEmailEnabled: false,\n        llDoChangePwdContainerVisible: false,\n        llChangePwdDummyShowContainerVisible: false\n      });\n    } else {\n      if (isEditable) {\n        this.setState({\n          llDoChangePwdContainerVisible: true,\n          llChangePwdDummyShowContainerVisible: false\n        });\n      } else {\n        this.setState({\n          llDoChangePwdContainerVisible: false,\n          llChangePwdDummyShowContainerVisible: true,\n          currentPasswordText: \"\",\n          newPasswordText: \"\",\n          reTypePasswordText: \"\"\n        });\n      }\n    }\n  }\n\n  goToPrivacyPolicy() {\n    const msg = new Message(getName(MessageEnum.NavigationPrivacyPolicyMessage));\n    msg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n    this.send(msg);\n  }\n\n  goToTermsAndCondition() {\n    const msg = new Message(getName(MessageEnum.NavigationTermAndConditionMessage));\n    msg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n    this.send(msg);\n  }\n\n  isStringNullOrBlank(str) {\n    return str === null || str.length === 0;\n  }\n\n  isValidEmail(email) {\n    return this.emailReg.test(email);\n  }\n\n  requestSessionData() {\n    const msg = new Message(getName(MessageEnum.SessionRequestMessage));\n    this.uniqueSessionRequesterId = msg.messageId;\n    this.send(msg);\n  }\n\n  getUserProfile() {\n    const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n    this.userProfileGetApiCallId = requestMessage.messageId;\n    requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.endPointApiGetUserProfile);\n    const header = {\n      \"Content-Type\": configJSON.contentTypeApiGetUserProfile,\n      token: this.authToken\n    };\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(header));\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.methodTypeApiGetUserProfile);\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n  }\n\n  getValidations() {\n    const headers = {\n      \"Content-Type\": configJSON.validationApiContentType\n    };\n    const getValidationsMsg = new Message(getName(MessageEnum.RestAPIRequestMessage));\n    this.validationApiCallId = getValidationsMsg.messageId;\n    getValidationsMsg.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.urlGetValidations);\n    getValidationsMsg.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n    getValidationsMsg.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.validationApiMethodType);\n    runEngine.sendMessage(getValidationsMsg.id, getValidationsMsg);\n  } // Customizable Area Start\n  // Customizable Area End\n\n\n}","map":{"version":3,"sources":["/home/lp-greenapex/gargi/okydpim-36944-react-native/src/packages/blocks/user-profile-basic/src/UserProfileBasicController.tsx"],"names":["Message","BlockComponent","runEngine","MessageEnum","getName","imgPasswordInVisible","imgPasswordVisible","configJSON","require","UserProfileBasicController","constructor","props","labelFirstName","lastName","labelArea","labelMobile","labelEmail","labelCurrentPassword","labelNewPassword","labelRePassword","btnTextCancelPasswordChange","btnTextSaveChanges","labelHeader","btnTextChangePassword","arrayholder","passwordReg","emailReg","apiCallMessageUpdateProfileRequestId","validationApiCallId","apiChangePhoneValidation","registrationAndLoginType","authToken","uniqueSessionRequesterId","userProfileGetApiCallId","userAttr","txtInputFirstNameProps","onChangeText","text","setState","firstName","value","txtInputLastNameProps","txtInputPhoneNumberlWebProps","editable","phoneNumber","txtInputPhoneNumberProps","txtInputPhoneNumberlMobileProps","autoCompleteType","keyboardType","isPlatformWeb","txtInputEmailWebProps","txtInputEmailProps","email","txtInputEmailMobileProps","btnEnableEditPasswordProps","onPress","enableDisableEditPassword","txtInputCurrentPasswordProps","currentPasswordText","secureTextEntry","btnPasswordShowHideButtonProps","enablePasswordField","imgPasswordShowhideProps","source","txtInputNewPasswordProps","newPasswordText","btnNewPasswordShowHideButtonProps","enableNewPasswordField","imgNewPasswordShowhideProps","txtInputReTypePasswordProps","reTypePasswordText","imgReTypePasswordShowhideProps","btnReTypePasswordShowHideProps","enableReTypePasswordField","btnDisableEditPasswordProps","receive","bind","subScribedMessages","RestAPIResponceMessage","SessionResponseMessage","CountryCodeMessage","state","currentCountryCode","hintCountryCode","data","passwordHelperText","edtEmailEnabled","llDoChangePwdContainerVisible","llChangePwdDummyShowContainerVisible","edtMobileNoEnabled","countryCodeEnabled","saveButtonDisable","RegExp","attachBuildingBlock","from","message","debugLog","JSON","stringify","id","selectedCode","getData","CountyCodeDataMessage","undefined","indexOf","split","apiRequestCallId","RestAPIResponceDataMessage","responseJson","RestAPIResponceSuccessMessage","errorReponse","RestAPIResponceErrorMessage","length","regexData","password_validation_regexp","email_validation_regexp","password_validation_rules","errors","attributes","first_name","last_name","country_code","phone_number","type","ACCOUNT_TYPE_EMAIL","ACCOUNT_TYPE_SOCIAL","ACCOUNT_TYPE_PHONE","token","showAlert","parseApiErrorResponse","parseApiCatchErrorResponse","validateAndUpdateProfile","getUserProfile","requesterId","SessionRequestedBy","sessionToken","SessionResponseToken","validateMobileAndThenUpdateUserProfile","countryCode","mobileNo","error","validateCountryCodeAndPhoneNumber","errorTitle","countryCodeOld","mobileNoOld","Number","parseInt","validateMobileOnServer","validateEmail","isValidEmail","errorEmailNotValid","validateLastName","isNonNullAndEmpty","errorBlankField","validateFirstName","String","errorCountryCodeNotSelected","currentPwd","newPwd","reTypePwd","errorFirstName","errorLastName","errorMobileNo","errorEmail","errorCurrentPwd","validateCurrentPwd","errorNewPwd","validatePassword","errorRetypePwd","validateRePassword","isValidForSignUp","errorBothPasswordsNotSame","errorCurrentNewPasswordMatch","firstNameOld","lastNameOld","emailOld","header","contentTypeApiUpdateUser","new_phone_number","new_email","current_password","new_password","httpBody","requestMessage","RestAPIRequestMessage","messageId","addData","RestAPIResponceEndPointMessage","apiEndPointUpdateUser","RestAPIRequestHeaderMessage","RestAPIRequestBodyMessage","RestAPIRequestMethodMessage","apiUpdateUserType","sendMessage","errorCurrentPasswordNotValid","test","errorNewPasswordNotValid","errorReTypePasswordNotValid","trim","contenttypeApiValidateMobileNo","endPointApiValidateMobileNo","callTypeApiValidateMobileNo","isEditable","goToPrivacyPolicy","msg","NavigationPrivacyPolicyMessage","NavigationPropsMessage","send","goToTermsAndCondition","NavigationTermAndConditionMessage","isStringNullOrBlank","str","requestSessionData","SessionRequestMessage","endPointApiGetUserProfile","contentTypeApiGetUserProfile","methodTypeApiGetUserProfile","getValidations","headers","validationApiContentType","getValidationsMsg","urlGetValidations","validationApiMethodType"],"mappings":"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","sourcesContent":["import { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nimport MessageEnum, {\n  getName\n} from \"../../../framework/src/Messages/MessageEnum\";\n\n// Customizable Area Start\nimport { imgPasswordInVisible, imgPasswordVisible } from \"./assets\";\n// Customizable Area End\n\nexport const configJSON = require(\"./config\");\nexport interface Props {\n  navigation: any;\n  id: string;\n  // Customizable Area Start\n  // Customizable Area End\n}\n\ninterface S {\n  // Customizable Area Start\n  firstName: any;\n  lastName: any;\n  email: any;\n  phoneNumber: any;\n  currentCountryCode: any;\n  data: any[];\n  passwordHelperText: String;\n  enablePasswordField: boolean;\n  enableReTypePasswordField: boolean;\n  enableNewPasswordField: boolean;\n\n  edtEmailEnabled: boolean;\n  llDoChangePwdContainerVisible: boolean;\n  llChangePwdDummyShowContainerVisible: boolean;\n\n  currentPasswordText: any;\n  newPasswordText: any;\n  reTypePasswordText: any;\n\n  edtMobileNoEnabled: boolean;\n  countryCodeEnabled: boolean;\n\n  saveButtonDisable: boolean;\n  // Customizable Area End\n\n}\n\ninterface SS {\n  // Customizable Area Start\n  id: any;\n  // Customizable Area End\n}\n\nexport default class UserProfileBasicController extends BlockComponent<\n  Props,\n  S,\n  SS\n> {\n\n  // Customizable Area Start\n  labelFirstName: string;\n  lastName: string;\n  labelArea: string;\n  labelMobile: string;\n  labelEmail: string;\n  labelCurrentPassword: string;\n  labelNewPassword: string;\n  labelRePassword: string;\n  btnTextCancelPasswordChange: string;\n  btnTextSaveChanges: string;\n  labelHeader: any;\n  btnTextChangePassword: string;\n\n  arrayholder: any[];\n  passwordReg: RegExp;\n  emailReg: RegExp;\n  apiCallMessageUpdateProfileRequestId: any;\n  validationApiCallId: string = \"\";\n  apiChangePhoneValidation: any;\n  registrationAndLoginType: string = \"\";\n  authToken: any;\n  uniqueSessionRequesterId: any;\n  userProfileGetApiCallId: any;\n  userAttr: any;\n  // Customizable Area End\n\n  constructor(props: Props) {\n    super(props);\n    this.receive = this.receive.bind(this);\n    // Customizable Area Start\n    this.subScribedMessages = [\n      getName(MessageEnum.RestAPIResponceMessage),\n      getName(MessageEnum.SessionResponseMessage),\n      getName(MessageEnum.CountryCodeMessage)\n    ];\n   \n    this.state = {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      phoneNumber: \"\",\n      currentCountryCode: configJSON.hintCountryCode,\n      data: [],\n      passwordHelperText: \"\",\n      enablePasswordField: true,\n      enableReTypePasswordField: true,\n      enableNewPasswordField: true,\n\n      edtEmailEnabled: true,\n      llDoChangePwdContainerVisible: false,\n      llChangePwdDummyShowContainerVisible: false,\n\n      currentPasswordText: \"\",\n      newPasswordText: \"\",\n      reTypePasswordText: \"\",\n\n      edtMobileNoEnabled: true,\n      countryCodeEnabled: true,\n      saveButtonDisable: false\n    };\n\n    this.arrayholder = [];\n    this.passwordReg = new RegExp(\"\\\\w+\");\n    this.emailReg = new RegExp(\"\\\\w+\");\n\n    this.labelFirstName = configJSON.labelFirstName;\n    this.lastName = configJSON.lastName;\n    this.labelArea = configJSON.labelArea;\n    this.labelMobile = configJSON.labelMobile;\n    this.labelEmail = configJSON.labelEmail;\n    this.labelCurrentPassword = configJSON.labelCurrentPassword;\n    this.labelNewPassword = configJSON.labelNewPassword;\n    this.labelRePassword = configJSON.labelRePassword;\n    this.btnTextCancelPasswordChange = configJSON.btnTextCancelPasswordChange;\n    this.btnTextSaveChanges = configJSON.btnTextSaveChanges;\n    this.labelHeader = configJSON.labelHeader;\n    this.btnTextChangePassword = configJSON.btnTextChangePassword;\n    // Customizable Area End\n    runEngine.attachBuildingBlock(this, this.subScribedMessages);\n  }\n\n  async receive(from: String, message: Message) {\n    // Customizable Area Start\n    runEngine.debugLog(\"on recieive==>\" + JSON.stringify(message));\n\n    if (getName(MessageEnum.CountryCodeMessage) === message.id) {\n      var selectedCode = message.getData(\n        getName(MessageEnum.CountyCodeDataMessage)\n      );\n\n      if (selectedCode !== undefined) {\n        this.setState({\n          currentCountryCode:\n            selectedCode.indexOf(\"+\") > 0\n              ? selectedCode.split(\"+\")[1]\n              : selectedCode\n        });\n      }\n    }\n\n    if (getName(MessageEnum.RestAPIResponceMessage) === message.id) {\n      const apiRequestCallId = message.getData(\n        getName(MessageEnum.RestAPIResponceDataMessage)\n      );\n\n      var responseJson = message.getData(\n        getName(MessageEnum.RestAPIResponceSuccessMessage)\n      );\n\n      var errorReponse = message.getData(\n        getName(MessageEnum.RestAPIResponceErrorMessage)\n      );\n\n      if (apiRequestCallId && responseJson) {\n        if (apiRequestCallId === this.validationApiCallId && responseJson) {\n          this.arrayholder = responseJson.data;\n\n          if (this.arrayholder && this.arrayholder.length !== 0) {\n            let regexData = this.arrayholder[0];\n\n            if (regexData) {\n              if (regexData.password_validation_regexp) {\n                this.passwordReg = new RegExp(\n                  regexData.password_validation_regexp\n                );\n              }\n\n              if (regexData.email_validation_regexp) {\n                this.emailReg = new RegExp(regexData.email_validation_regexp);\n              }\n\n              if (regexData.email_validation_regexp) {\n                this.setState({\n                  passwordHelperText: regexData.password_validation_rules\n                });\n              }\n            }\n          }\n        } else if (apiRequestCallId === this.userProfileGetApiCallId) {\n          if (\n            responseJson &&\n            !responseJson.errors &&\n            responseJson.data &&\n            responseJson.data.attributes\n          ) {\n            //On User Profile Success\n\n            this.userAttr = responseJson.data.attributes;\n\n            if (this.userAttr !== null && this.userAttr !== undefined) {\n              let email = this.userAttr.email;\n              let firstName = this.userAttr.first_name;\n              let lastName = this.userAttr.last_name;\n              let currentCountryCode = this.userAttr.country_code;\n              let phoneNumber = this.userAttr.phone_number\n                ? this.userAttr.phone_number\n                : \"\";\n\n              this.setState({\n                email: email,\n                firstName: firstName,\n                lastName: lastName,\n                phoneNumber: phoneNumber\n              });\n\n              //@ts-ignore\n              this.txtInputFirstNameProps.value = firstName;\n\n              //@ts-ignore\n              this.txtInputLastNameProps.value = lastName;\n\n              //@ts-ignore\n              this.txtInputEmailProps.value = email;\n\n              //@ts-ignore\n              this.txtInputPhoneNumberProps.value = phoneNumber;\n\n              this.registrationAndLoginType = this.userAttr.type;\n\n              if (this.userAttr.country_code) {\n                this.setState({ currentCountryCode: currentCountryCode });\n              }\n\n              if (\n                configJSON.ACCOUNT_TYPE_EMAIL === this.registrationAndLoginType\n              ) {\n                this.setState({\n                  edtEmailEnabled: false,\n                  llChangePwdDummyShowContainerVisible: true\n                });\n                this.txtInputEmailProps.editable = false;\n              } else if (\n                configJSON.ACCOUNT_TYPE_SOCIAL === this.registrationAndLoginType\n              ) {\n                this.setState({\n                  edtEmailEnabled: false,\n                  llChangePwdDummyShowContainerVisible: false,\n                  llDoChangePwdContainerVisible: false\n                });\n                this.txtInputEmailProps.editable = false;\n              } else if (\n                configJSON.ACCOUNT_TYPE_PHONE === this.registrationAndLoginType\n              ) {\n                this.setState({\n                  llChangePwdDummyShowContainerVisible: true,\n                  edtMobileNoEnabled: false,\n                  countryCodeEnabled: false\n                });\n                this.txtInputPhoneNumberProps.editable = false;\n              }\n            }\n          } else {\n            //Check Error Response\n            if (\n              responseJson.errors &&\n              responseJson.errors.length > 0 &&\n              responseJson.errors[0].token\n            ) {\n              this.showAlert(\"Session Expired\", \"Please Log in again.\");\n            } else {\n              this.parseApiErrorResponse(responseJson);\n            }\n          }\n\n          this.parseApiCatchErrorResponse(errorReponse);\n        } else if (apiRequestCallId === this.apiChangePhoneValidation) {\n          if (responseJson != null && responseJson.errors === undefined) {\n            //On Change Phone Validation Success\n            this.validateAndUpdateProfile();\n          } else {\n            this.parseApiErrorResponse(responseJson);\n          }\n\n          this.parseApiCatchErrorResponse(errorReponse);\n        } else if (\n          apiRequestCallId === this.apiCallMessageUpdateProfileRequestId\n        ) {\n          if (responseJson != null && responseJson.errors === undefined) {\n            //On Change Phone Validation Success\n\n            this.showAlert(\"Success\", \"Profile updated successfully.\");\n            this.enableDisableEditPassword(false);\n            this.getUserProfile();\n          } else {\n            this.parseApiErrorResponse(responseJson);\n          }\n        }\n      }\n    } else if (getName(MessageEnum.SessionResponseMessage) === message.id) {\n      let requesterId = message.getData(\n        getName(MessageEnum.SessionRequestedBy)\n      );\n\n      if (requesterId === this.uniqueSessionRequesterId) {\n        const sessionToken = message.getData(\n          getName(MessageEnum.SessionResponseToken)\n        );\n        this.authToken = sessionToken;\n\n        this.getUserProfile();\n      }\n    }\n\n    // Customizable Area End\n  }\n\n  validateMobileAndThenUpdateUserProfile() {\n    let countryCode: any = this.state.currentCountryCode;\n    let mobileNo: any = this.state.phoneNumber;\n\n    let error: any = \"\";\n\n    error = this.validateCountryCodeAndPhoneNumber(countryCode, mobileNo);\n\n    if (error) {\n      this.showAlert(configJSON.errorTitle, error);\n\n      return;\n    }\n\n    if (this.userAttr) {\n      const countryCodeOld = this.userAttr.country_code;\n      const mobileNoOld = this.userAttr.phone_number;\n\n      if (\n        Number.parseInt(countryCode) === Number.parseInt(countryCodeOld) ||\n        countryCode === configJSON.hintCountryCode\n      ) {\n        countryCode = null;\n      }\n\n      if (\n        Number.parseInt(this.state.phoneNumber) === Number.parseInt(mobileNoOld)\n      ) {\n        mobileNo = null;\n      }\n    }\n\n    if (mobileNo && countryCode) {\n      this.validateMobileOnServer(\n        this.state.currentCountryCode,\n        this.state.phoneNumber\n      );\n    } else {\n      this.validateAndUpdateProfile();\n    }\n  }\n\n  validateEmail(email: string) {\n    let error = null;\n\n    if (!this.isValidEmail(email)) {\n      error = configJSON.errorEmailNotValid;\n    }\n\n    return error;\n  }\n\n  validateLastName(lastName: String) {\n    return !this.isNonNullAndEmpty(lastName)\n      ? \"Last name \" + configJSON.errorBlankField\n      : null;\n  }\n\n  validateFirstName(firstName: String) {\n    return !this.isNonNullAndEmpty(firstName)\n      ? \"First name \" + configJSON.errorBlankField\n      : null;\n  }\n\n  validateCountryCodeAndPhoneNumber(countryCode: string, phoneNumber: string) {\n    let error = null;\n\n    if (this.isNonNullAndEmpty(phoneNumber)) {\n      if (\n        !this.isNonNullAndEmpty(String(countryCode)) ||\n        configJSON.hintCountryCode === countryCode\n      ) {\n        error = configJSON.errorCountryCodeNotSelected;\n      }\n    } else if (\n      this.isNonNullAndEmpty(countryCode) &&\n      configJSON.hintCountryCode !== countryCode\n    ) {\n      if (!this.isNonNullAndEmpty(phoneNumber)) {\n        error = \"Phone \" + configJSON.errorBlankField;\n      }\n    }\n\n    return error;\n  }\n\n  validateAndUpdateProfile() {\n    let firstName = this.state.firstName;\n    let lastName = this.state.lastName;\n    let countryCode: any = this.state.currentCountryCode;\n\n    let mobileNo = this.state.phoneNumber;\n    let email = this.state.email;\n\n    let currentPwd = this.state.currentPasswordText;\n    let newPwd = this.state.newPasswordText;\n    let reTypePwd = this.state.reTypePasswordText;\n\n    const errorFirstName = this.validateFirstName(firstName);\n    const errorLastName = this.validateLastName(lastName);\n\n    const errorMobileNo = this.validateCountryCodeAndPhoneNumber(\n      countryCode,\n      mobileNo\n    );\n    const errorEmail = this.validateEmail(email);\n\n    const errorCurrentPwd = this.validateCurrentPwd(currentPwd);\n    const errorNewPwd = this.validatePassword(newPwd);\n    const errorRetypePwd = this.validateRePassword(reTypePwd);\n\n    let isValidForSignUp: boolean = true;\n\n    if (errorFirstName != null) {\n      this.showAlert(configJSON.errorTitle, errorFirstName);\n      return false;\n    } else if (errorLastName != null) {\n      this.showAlert(configJSON.errorTitle, errorLastName);\n      return false;\n    }\n\n    if (configJSON.ACCOUNT_TYPE_EMAIL === this.registrationAndLoginType) {\n      if (errorMobileNo !== null) {\n        this.showAlert(configJSON.errorTitle, errorMobileNo);\n        return false;\n      }\n    } else if (\n      configJSON.ACCOUNT_TYPE_SOCIAL === this.registrationAndLoginType\n    ) {\n      if (errorMobileNo != null) {\n        this.showAlert(configJSON.errorTitle, errorMobileNo);\n        return false;\n      }\n    } else if (\n      configJSON.ACCOUNT_TYPE_PHONE === this.registrationAndLoginType\n    ) {\n      if (errorEmail != null) {\n        this.showAlert(configJSON.errorTitle, errorEmail);\n\n        return false;\n      }\n    } else {\n      if (errorMobileNo != null) {\n        this.showAlert(configJSON.errorTitle, errorMobileNo);\n\n        return false;\n      } else if (errorEmail != null) {\n        this.showAlert(configJSON.errorTitle, errorEmail);\n\n        return false;\n      }\n    }\n\n    if (\n      configJSON.ACCOUNT_TYPE_SOCIAL !== this.registrationAndLoginType &&\n      this.state.llDoChangePwdContainerVisible\n    ) {\n      if (errorCurrentPwd != null) {\n        this.showAlert(configJSON.errorTitle, errorCurrentPwd);\n        return false;\n      } else if (errorNewPwd != null) {\n        this.showAlert(configJSON.errorTitle, errorNewPwd);\n        return false;\n      } else if (errorRetypePwd != null) {\n        this.showAlert(configJSON.errorTitle, errorRetypePwd);\n        return false;\n      } else if (newPwd !== reTypePwd) {\n        this.showAlert(\n          configJSON.errorTitle,\n          configJSON.errorBothPasswordsNotSame\n        );\n        return false;\n      } else if (currentPwd === newPwd) {\n        this.showAlert(\n          configJSON.errorTitle,\n          configJSON.errorCurrentNewPasswordMatch\n        );\n        return false;\n      }\n    }\n\n    //Call update API\n    if (this.userAttr) {\n      let firstNameOld = this.userAttr.first_name;\n      let lastNameOld = this.userAttr.last_name;\n      let countryCodeOld = this.userAttr.country_code + \"\";\n      let mobileNoOld = this.userAttr.phone_number + \"\";\n      let emailOld = this.userAttr.email;\n      this.registrationAndLoginType = this.userAttr.type;\n\n      if (this.isNonNullAndEmpty(firstName) && firstName === firstNameOld) {\n        firstName = null;\n      }\n\n      if (this.isNonNullAndEmpty(lastName) && lastName === lastNameOld) {\n        lastName = null;\n      }\n\n      if (\n        this.isNonNullAndEmpty(countryCode) &&\n        countryCode === countryCodeOld\n      ) {\n        countryCode = null;\n      }\n\n      if (this.isNonNullAndEmpty(mobileNo) && mobileNo === mobileNoOld) {\n        mobileNo = null;\n      }\n\n      if (countryCode != null || mobileNo != null) {\n        if (countryCode == null) {\n          countryCode = countryCodeOld;\n        }\n\n        if (mobileNo == null) {\n          mobileNo = mobileNoOld;\n        }\n      }\n\n      if (this.isNonNullAndEmpty(email) && email === emailOld) {\n        email = null;\n      }\n    }\n\n    if (\n      this.isNonNullAndEmpty(firstName) ||\n      this.isNonNullAndEmpty(lastName) ||\n      this.isNonNullAndEmpty(countryCode) ||\n      this.isNonNullAndEmpty(mobileNo) ||\n      this.isNonNullAndEmpty(email) ||\n      (this.isNonNullAndEmpty(currentPwd) && this.isNonNullAndEmpty(newPwd))\n    ) {\n      const header = {\n        \"Content-Type\": configJSON.contentTypeApiUpdateUser,\n        token: this.authToken\n      };\n\n      let data: any = {\n        first_name: this.state.firstName,\n        last_name: this.state.lastName\n      };\n\n      if (this.state.edtMobileNoEnabled) {\n        if (\n          configJSON.hintCountryCode !== countryCode &&\n          this.isNonNullAndEmpty(String(countryCode)) &&\n          this.isNonNullAndEmpty(String(mobileNo))\n        ) {\n          data = {\n            ...data,\n            ...{ new_phone_number: String(countryCode) + String(mobileNo) }\n          };\n        }\n      }\n\n      if (this.isNonNullAndEmpty(email)) {\n        data = { ...data, ...{ new_email: email } };\n      }\n\n      if (\n        this.isNonNullAndEmpty(currentPwd) &&\n        this.isNonNullAndEmpty(newPwd)\n      ) {\n        data = {\n          ...data,\n          ...{ current_password: currentPwd, new_password: newPwd }\n        };\n      }\n\n      const httpBody = {\n        data: data\n      };\n\n      const requestMessage = new Message(\n        getName(MessageEnum.RestAPIRequestMessage)\n      );\n      this.apiCallMessageUpdateProfileRequestId = requestMessage.messageId;\n      requestMessage.addData(\n        getName(MessageEnum.RestAPIResponceEndPointMessage),\n        configJSON.apiEndPointUpdateUser\n      );\n\n      requestMessage.addData(\n        getName(MessageEnum.RestAPIRequestHeaderMessage),\n        JSON.stringify(header)\n      );\n\n      requestMessage.addData(\n        getName(MessageEnum.RestAPIRequestBodyMessage),\n        JSON.stringify(httpBody)\n      );\n\n      requestMessage.addData(\n        getName(MessageEnum.RestAPIRequestMethodMessage),\n        configJSON.apiUpdateUserType\n      );\n\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n    }\n  }\n\n  validateCurrentPwd(currentPwd: any) {\n    if (!this.isNonNullAndEmpty(currentPwd)) {\n      return configJSON.errorCurrentPasswordNotValid;\n    } else {\n      return null;\n    }\n  }\n\n  validatePassword(newPwd: any) {\n    if (!this.passwordReg.test(newPwd)) {\n      return configJSON.errorNewPasswordNotValid;\n    } else {\n      return null;\n    }\n  }\n\n  validateRePassword(reTypePwd: any) {\n    if (!this.passwordReg.test(reTypePwd)) {\n      return configJSON.errorReTypePasswordNotValid;\n    } else {\n      return null;\n    }\n  }\n\n  isNonNullAndEmpty(value: String) {\n    return (\n      value !== undefined &&\n      value !== null &&\n      value !== \"null\" &&\n      value.trim().length > 0\n    );\n  }\n\n  validateMobileOnServer(countryCode: any, mobileNo: any) {\n    const header = {\n      \"Content-Type\": configJSON.contenttypeApiValidateMobileNo,\n      token: this.authToken\n    };\n\n    const data = {\n      new_phone_number: countryCode + mobileNo\n    };\n\n    const httpBody = {\n      data: data\n    };\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n    this.apiChangePhoneValidation = requestMessage.messageId;\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.endPointApiValidateMobileNo\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(header)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestBodyMessage),\n      JSON.stringify(httpBody)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.callTypeApiValidateMobileNo\n    );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n  }\n\n  enableDisableEditPassword(isEditable: boolean) {\n    if (configJSON.ACCOUNT_TYPE_SOCIAL === this.registrationAndLoginType) {\n      this.setState({\n        edtEmailEnabled: false,\n        llDoChangePwdContainerVisible: false,\n        llChangePwdDummyShowContainerVisible: false\n      });\n    } else {\n      if (isEditable) {\n        this.setState({\n          llDoChangePwdContainerVisible: true,\n          llChangePwdDummyShowContainerVisible: false\n        });\n      } else {\n        this.setState({\n          llDoChangePwdContainerVisible: false,\n          llChangePwdDummyShowContainerVisible: true,\n          currentPasswordText: \"\",\n          newPasswordText: \"\",\n          reTypePasswordText: \"\"\n        });\n      }\n    }\n  }\n\n  goToPrivacyPolicy() {\n    const msg: Message = new Message(\n      getName(MessageEnum.NavigationPrivacyPolicyMessage)\n    );\n    msg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n    this.send(msg);\n  }\n\n  goToTermsAndCondition() {\n    const msg: Message = new Message(\n      getName(MessageEnum.NavigationTermAndConditionMessage)\n    );\n    msg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n    this.send(msg);\n  }\n\n  isStringNullOrBlank(str: string) {\n    return str === null || str.length === 0;\n  }\n\n  isValidEmail(email: string) {\n    return this.emailReg.test(email);\n  }\n\n  requestSessionData() {\n    const msg: Message = new Message(\n      getName(MessageEnum.SessionRequestMessage)\n    );\n    this.uniqueSessionRequesterId = msg.messageId;\n    this.send(msg);\n  }\n\n  getUserProfile() {\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n    this.userProfileGetApiCallId = requestMessage.messageId;\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.endPointApiGetUserProfile\n    );\n\n    const header = {\n      \"Content-Type\": configJSON.contentTypeApiGetUserProfile,\n      token: this.authToken\n    };\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(header)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.methodTypeApiGetUserProfile\n    );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n  }\n\n  getValidations() {\n    const headers = {\n      \"Content-Type\": configJSON.validationApiContentType\n    };\n\n    const getValidationsMsg = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n    this.validationApiCallId = getValidationsMsg.messageId;\n\n    getValidationsMsg.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.urlGetValidations\n    );\n\n    getValidationsMsg.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(headers)\n    );\n    getValidationsMsg.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.validationApiMethodType\n    );\n    runEngine.sendMessage(getValidationsMsg.id, getValidationsMsg);\n  }\n\n  // Customizable Area Start\n  txtInputFirstNameProps = {\n    onChangeText: (text: string) => {\n      this.setState({ firstName: text });\n\n      //@ts-ignore\n      this.txtInputFirstNameProps.value = text;\n    }\n\n  };\n\n  txtInputLastNameProps = {\n    onChangeText: (text: string) => {\n      this.setState({ lastName: text });\n\n      //@ts-ignore\n      this.txtInputLastNameProps.value = text;\n    }\n  };\n\n  txtInputPhoneNumberlWebProps = {\n     onChangeText: (text:string) => \n     {\n       if (this.txtInputPhoneNumberlWebProps.editable) {\n        this.setState({ phoneNumber: text })\n     \n        //@ts-ignore\n        this.txtInputPhoneNumberProps.value = text;\n       }\n    },\n    editable: true\n  };\n\n  txtInputPhoneNumberlMobileProps = {\n    ...this.txtInputPhoneNumberlWebProps,\n    autoCompleteType:\"tel\",\n    keyboardType: \"phone-pad\",\n  };\n\n  txtInputPhoneNumberProps = this.isPlatformWeb()\n    ? this.txtInputPhoneNumberlWebProps\n    : this.txtInputPhoneNumberlMobileProps;\n\n  txtInputEmailWebProps  = {\n    value: \"\",\n    editable: true,\n    onChangeText: (text:string) => {\n      if (this.txtInputEmailProps.editable) {\n        this.setState({ email: text })\n        this.txtInputEmailProps.value = text\n      }\n    }\n  }\n\n  txtInputEmailMobileProps  = {\n    ...this.txtInputEmailWebProps,\n    keyboardType: \"email-address\",\n  }\n\n  txtInputEmailProps = this.isPlatformWeb()\n  ? this.txtInputEmailWebProps\n  : this.txtInputEmailMobileProps;\n  \n  btnEnableEditPasswordProps = {\n    onPress: () => this.enableDisableEditPassword(true)\n  }\n\n  txtInputCurrentPasswordProps = {\n    onChangeText: (text:string) => {\n      this.setState({ currentPasswordText: text })\n      this.txtInputCurrentPasswordProps.value = text\n    },\n    value: \"\",\n    secureTextEntry: true\n  }\n\n  btnPasswordShowHideButtonProps = {\n    onPress: () => { \n      this.setState({ enablePasswordField: !this.txtInputCurrentPasswordProps.secureTextEntry });\n      this.txtInputCurrentPasswordProps.secureTextEntry = !this.txtInputCurrentPasswordProps.secureTextEntry\n      this.imgPasswordShowhideProps.source = this.txtInputCurrentPasswordProps.secureTextEntry  ? imgPasswordVisible : imgPasswordInVisible\n    }\n  }\n\n  imgPasswordShowhideProps = {\n    source: imgPasswordVisible\n  }\n\n  txtInputNewPasswordProps = {\n    onChangeText: (text:string) => {\n      this.setState({ newPasswordText: text })\n      this.txtInputNewPasswordProps.value = text\n    },\n    value: \"\",\n    secureTextEntry: true\n  }\n\n  btnNewPasswordShowHideButtonProps = {\n    onPress: () => {\n      this.setState({ \n        enableNewPasswordField: !this.txtInputNewPasswordProps.secureTextEntry });\n        this.txtInputNewPasswordProps.secureTextEntry = !this.txtInputNewPasswordProps.secureTextEntry\n        this.imgNewPasswordShowhideProps.source =  this.txtInputNewPasswordProps.secureTextEntry  ? imgPasswordVisible : imgPasswordInVisible\n    }\n  }\n\n  imgNewPasswordShowhideProps = {\n    source: imgPasswordVisible\n  }\n\n  txtInputReTypePasswordProps = {\n    onChangeText:(text:string) => {\n      this.setState({ reTypePasswordText: text })\n      this.txtInputReTypePasswordProps.value = text\n    },\n    secureTextEntry: true,\n    value: \"\"\n  }\n\n  imgReTypePasswordShowhideProps = {\n    source: imgPasswordVisible\n  }\n\n  btnReTypePasswordShowHideProps = {\n    onPress: () => {\n      this.setState({ \n        enableReTypePasswordField: !this.txtInputReTypePasswordProps.secureTextEntry });\n        this.txtInputReTypePasswordProps.secureTextEntry = !this.txtInputReTypePasswordProps.secureTextEntry\n        this.imgReTypePasswordShowhideProps.source =  this.txtInputNewPasswordProps.secureTextEntry  ? imgPasswordVisible : imgPasswordInVisible\n    }\n  }\n\n  btnDisableEditPasswordProps = {\n    onPress: () => this.enableDisableEditPassword(false)\n  }\n  // Customizable Area End\n\n}\n"]},"metadata":{},"sourceType":"module"}