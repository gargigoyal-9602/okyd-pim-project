{"ast":null,"code":"import _regeneratorRuntime from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectWithoutProperties from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport RichTextEditor from 'react-rte';\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport MessageEnum, { getName } from \"../../../framework/src/Messages/MessageEnum\";\nimport { runEngine } from \"../../../framework/src/RunEngine\"; // Customizable Area Start\n// import { imgPasswordInVisible, imgPasswordVisible } from \"./assets\";\n// Customizable Area End\n\nexport const configJSON = require(\"./config\");\nexport default class CategoriessubcategoriesController extends BlockComponent {\n  constructor(props) {\n    super(props);\n    this.auth = window.localStorage.getItem(\"auth\");\n    this.getCategoryApiCallId = \"\";\n    this.categoryDetailsApiCallId = \"\";\n    this.categoryCreateApiCallId = \"\";\n    this.categoryUpdateApiCallId = \"\";\n    this.deleteCategoryApiCallId = \"\";\n\n    this.getCategoryList = () => {\n      const headers = {\n        \"Content-Type\": configJSON.apiContentType,\n        token: this.auth\n      };\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      this.getCategoryApiCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.categoryAPIEndPoint);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.httpGetType);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    };\n\n    this.categoryDetails = accountId => {\n      const headers = {\n        \"Content-Type\": configJSON.apiContentType,\n        token: this.auth\n      };\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      this.categoryDetailsApiCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), \"\".concat(configJSON.categoryAPIEndPoint, \"/\").concat(accountId));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.httpGetType);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    };\n\n    this.createCategory = values => {\n      const headers = {\n        \"Content-Type\": configJSON.apiContentType,\n        token: this.auth\n      };\n      const httpBody = {\n        categories: [_objectSpread({}, values)]\n      };\n      const apiEndPoint = configJSON.categoryAPIEndPoint;\n      const methodType = configJSON.httpPostType;\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      this.categoryCreateApiCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), apiEndPoint);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(httpBody));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), methodType);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    };\n\n    this.updateCategory = values => {\n      const categoryId = values.categoryId,\n            restValues = _objectWithoutProperties(values, [\"categoryId\"]);\n\n      const headers = {\n        \"Content-Type\": configJSON.apiContentType,\n        token: this.auth\n      };\n      const httpBody = {\n        category: _objectSpread({}, restValues)\n      };\n      const apiEndPoint = \"\".concat(configJSON.categoryAPIEndPoint, \"/\").concat(values.categoryId);\n      const methodType = configJSON.httpPutType;\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      this.categoryUpdateApiCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), apiEndPoint);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(httpBody));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), methodType);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    };\n\n    this.deleteCategoryHandler = accountId => {\n      const headers = {\n        token: this.auth\n      };\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      this.deleteCategoryApiCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), \"\".concat(configJSON.categoryAPIEndPoint, \"/\").concat(accountId));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.httpDeleteType);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    };\n\n    this.handleImageUpload = event => {\n      var file = event.target.files[0];\n      const reader = new FileReader();\n      var url = reader.readAsDataURL(file);\n\n      reader.onloadend = e => {\n        this.setState({\n          selectedFile: [reader.result]\n        });\n      };\n\n      this.setState({\n        selectedFile: event.target.files[0]\n      });\n    };\n\n    this.onMenuToggle = () => {\n      this.setState({\n        menuCollapsed: !this.state.menuCollapsed\n      });\n    };\n\n    this.openSnackBarHandler = (type, message) => {\n      this.setState({\n        snackBar: {\n          show: true,\n          message: message,\n          type\n        }\n      });\n    };\n\n    this.closeSnackBarHandler = () => {\n      this.setState({\n        snackBar: {\n          show: false,\n          message: this.state.snackBar.message,\n          type: this.state.snackBar.type\n        }\n      });\n    };\n\n    this.receive = this.receive.bind(this); // Customizable Area Start\n\n    this.subScribedMessages = [getName(MessageEnum.RestAPIResponceMessage)];\n    this.state = {\n      auth: \"\",\n      userType: configJSON.subscriber,\n      menuCollapsed: false,\n      categoryData: [],\n      categoryDetailsData: [],\n      modulesData: [],\n      rolesUpdateModal: false,\n      checkbox: false,\n      snackBar: {\n        show: false\n      },\n      loader: false,\n      selectedFile: null,\n      editor: RichTextEditor.createEmptyValue()\n    }; // Customizable Area End\n\n    runEngine.attachBuildingBlock(this, this.subScribedMessages);\n  }\n\n  componentDidMount() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _this.getCategoryList();\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  } // Handler for Get Catrgory List\n\n\n  receive(from, message) {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var responseJson, errorReponse, apiRequestCallId, _responseJson$data$at, errors, _this2$props;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            // Customizable Area Start\n            runEngine.debugLog(\"Message Recevied\", message);\n\n            if (getName(MessageEnum.RestAPIResponceMessage) === message.id) {\n              responseJson = message.getData(getName(MessageEnum.RestAPIResponceSuccessMessage));\n              errorReponse = message.getData(getName(MessageEnum.RestAPIResponceErrorMessage));\n              apiRequestCallId = message.getData(getName(MessageEnum.RestAPIResponceDataMessage));\n\n              if (responseJson && !responseJson.errors) {\n                if (apiRequestCallId != null) {\n                  // Store All Category data\n                  if (apiRequestCallId === _this2.getCategoryApiCallId && responseJson !== undefined) {\n                    _this2.setState({\n                      categoryData: responseJson.data\n                    });\n                  } // Store category detaills\n\n\n                  if (apiRequestCallId === _this2.categoryDetailsApiCallId && responseJson !== undefined) {\n                    _this2.setState({\n                      categoryDetailsData: responseJson.data,\n                      editor: RichTextEditor.createValueFromString((_responseJson$data$at = responseJson.data.attributes) === null || _responseJson$data$at === void 0 ? void 0 : _responseJson$data$at.description, 'html')\n                    });\n                  } // Create Category\n\n\n                  if (apiRequestCallId === _this2.categoryCreateApiCallId && responseJson !== undefined) {\n                    _this2.openSnackBarHandler('success', configJSON.successCreateMsgText);\n\n                    setTimeout(() => {\n                      //@ts-ignore\n                      _this2.props.history.push('/categories');\n                    }, 1000);\n                  } // Update Category\n\n\n                  if (apiRequestCallId === _this2.categoryUpdateApiCallId && responseJson !== undefined) {\n                    _this2.openSnackBarHandler('success', configJSON.successUpdateMsgText);\n\n                    setTimeout(() => {\n                      //@ts-ignore\n                      _this2.props.history.push('/categories');\n                    }, 1000);\n                  } // Delete Category\n\n\n                  if (apiRequestCallId === _this2.deleteCategoryApiCallId && responseJson !== undefined) {\n                    _this2.openSnackBarHandler('success', configJSON.deleteCategoryMsgText);\n\n                    _this2.getCategoryList();\n                  }\n                }\n              } else {\n                errors = responseJson.errors;\n\n                _this2.parseApiCatchErrorResponse(errorReponse);\n\n                if (errors[0].token === 'Invalid token' || 'Token has Expired') {\n                  AsyncStorage.setItem(\"auth\", \"\"); //@ts-ignore\n\n                  (_this2$props = _this2.props) === null || _this2$props === void 0 ? void 0 : _this2$props.history.push(\"/login\");\n                } else if (errors[0].message) {\n                  _this2.openSnackBarHandler('error', errors[0].message);\n                } else {\n                  if (apiRequestCallId === _this2.categoryCreateApiCallId) {\n                    _this2.openSnackBarHandler('error', configJSON.errorCreateMsgText);\n                  }\n                }\n              }\n            } // Customizable Area End\n\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }))();\n  } // Customizable Area End\n\n\n}","map":{"version":3,"sources":["/home/lp-greenapex/gargi/okydpim-36944-react-native/src/packages/blocks/categoriessubcategories/src/CategoriessubcategoriesController.web.tsx"],"names":["RichTextEditor","Message","BlockComponent","MessageEnum","getName","runEngine","configJSON","require","CategoriessubcategoriesController","constructor","props","auth","window","localStorage","getItem","getCategoryApiCallId","categoryDetailsApiCallId","categoryCreateApiCallId","categoryUpdateApiCallId","deleteCategoryApiCallId","getCategoryList","headers","apiContentType","token","requestMessage","RestAPIRequestMessage","messageId","addData","RestAPIResponceEndPointMessage","categoryAPIEndPoint","RestAPIRequestHeaderMessage","JSON","stringify","RestAPIRequestMethodMessage","httpGetType","sendMessage","id","categoryDetails","accountId","createCategory","values","httpBody","categories","apiEndPoint","methodType","httpPostType","RestAPIRequestBodyMessage","updateCategory","categoryId","restValues","category","httpPutType","deleteCategoryHandler","httpDeleteType","handleImageUpload","event","file","target","files","reader","FileReader","url","readAsDataURL","onloadend","e","setState","selectedFile","result","onMenuToggle","menuCollapsed","state","openSnackBarHandler","type","message","snackBar","show","closeSnackBarHandler","receive","bind","subScribedMessages","RestAPIResponceMessage","userType","subscriber","categoryData","categoryDetailsData","modulesData","rolesUpdateModal","checkbox","loader","editor","createEmptyValue","attachBuildingBlock","componentDidMount","from","debugLog","responseJson","getData","RestAPIResponceSuccessMessage","errorReponse","RestAPIResponceErrorMessage","apiRequestCallId","RestAPIResponceDataMessage","errors","undefined","data","createValueFromString","attributes","description","successCreateMsgText","setTimeout","history","push","successUpdateMsgText","deleteCategoryMsgText","parseApiCatchErrorResponse","AsyncStorage","setItem","errorCreateMsgText"],"mappings":"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","sourcesContent":["import { AsyncStorage } from \"react-native\";\nimport RichTextEditor from 'react-rte';\nimport { IBlock } from \"../../../framework/src/IBlock\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport MessageEnum, {\n  getName,\n} from \"../../../framework/src/Messages/MessageEnum\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\n\n// Customizable Area Start\n// import { imgPasswordInVisible, imgPasswordVisible } from \"./assets\";\n// Customizable Area End\n\nexport const configJSON = require(\"./config\");\n\ninterface SelectOptions {\n  value: string;\n  label: string;\n}\nexport interface Props {\n  navigation: any;\n  id: string;\n  // Customizable Area Start\n  match: any;\n  // Customizable Area End\n}\n\ninterface S {\n  // Customizable Area Start\n  auth: string | null | undefined;\n  userType: string;\n  menuCollapsed: boolean;\n  categoryData: object[];\n  modulesData: object[];\n  categoryDetailsData: any;\n  rolesUpdateModal: boolean;\n  checkbox: boolean;\n  snackBar: {\n    show: boolean,\n    message?: string,\n    type?: \"success\" | \"info\" | \"warning\" | \"error\" | undefined\n  };\n  loader: boolean,\n  selectedFile: any,\n  editor: any\n  // Customizable Area End\n}\n\ninterface SS {\n  id: any;\n}\n\nexport default class CategoriessubcategoriesController extends BlockComponent<\n  Props,\n  S,\n  SS\n> {\n  auth: string | null | undefined = window.localStorage.getItem(\"auth\");\n  getCategoryApiCallId: string = \"\";\n  categoryDetailsApiCallId: string = \"\";\n  categoryCreateApiCallId: string = \"\";\n  categoryUpdateApiCallId: string = \"\";\n  deleteCategoryApiCallId: string = \"\";\n\n  constructor(props: Props) {\n    super(props);\n    this.receive = this.receive.bind(this);\n\n    // Customizable Area Start\n    this.subScribedMessages = [getName(MessageEnum.RestAPIResponceMessage)];\n\n    this.state = {\n      auth: \"\",\n      userType: configJSON.subscriber,\n      menuCollapsed: false,\n      categoryData: [],\n      categoryDetailsData: [],\n      modulesData: [],\n      rolesUpdateModal: false,\n      checkbox: false,\n      snackBar: {\n        show: false,\n      },\n      loader: false,\n      selectedFile: null,\n      editor: RichTextEditor.createEmptyValue()\n    };\n    // Customizable Area End\n    runEngine.attachBuildingBlock(this as IBlock, this.subScribedMessages);\n  }\n\n  async componentDidMount() {\n    this.getCategoryList();\n  }\n\n  // Handler for Get Catrgory List\n  getCategoryList = (): boolean => {\n    const headers = {\n      \"Content-Type\": configJSON.apiContentType,\n      token: this.auth,\n    };\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n    this.getCategoryApiCallId = requestMessage.messageId;\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.categoryAPIEndPoint\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(headers)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.httpGetType\n    );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n\n    return true;\n  };\n\n  // Handler for Trails of Team member\n  categoryDetails = (accountId: number): boolean => {\n    const headers = {\n      \"Content-Type\": configJSON.apiContentType,\n      token: this.auth,\n    };\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n    this.categoryDetailsApiCallId = requestMessage.messageId;\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      `${configJSON.categoryAPIEndPoint}/${accountId}`\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(headers)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.httpGetType\n    );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n\n    return true;\n  };\n\n  // Create Category Handler\n  createCategory = (values: any): boolean => {\n    const headers = {\n      \"Content-Type\": configJSON.apiContentType,\n      token: this.auth,\n    };\n    const httpBody = {\n      categories: [{...values}],\n    };\n    const apiEndPoint = configJSON.categoryAPIEndPoint;\n    const methodType = configJSON.httpPostType;\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n    this.categoryCreateApiCallId = requestMessage.messageId;\n\n    requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), apiEndPoint);\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(httpBody));\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), methodType);\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n\n    return true;\n  };\n\n  // Update Category Handler\n  updateCategory = (values: any): boolean => {\n    const {categoryId, ...restValues}  = values;\n    const headers = {\n      \"Content-Type\": configJSON.apiContentType,\n      token: this.auth,\n    };\n    const httpBody = {\n      category: {...restValues},\n    };\n    const apiEndPoint = `${configJSON.categoryAPIEndPoint}/${values.categoryId}`;\n    const methodType = configJSON.httpPutType;\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n    this.categoryUpdateApiCallId = requestMessage.messageId;\n\n    requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), apiEndPoint);\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(httpBody));\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), methodType);\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n\n    return true;\n  };\n\n  // Delete Category handler\n  deleteCategoryHandler = (accountId: number): boolean => {\n    const headers = {\n      token: this.auth,\n    };\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n    this.deleteCategoryApiCallId = requestMessage.messageId;\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      `${configJSON.categoryAPIEndPoint}/${accountId}`\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(headers)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.httpDeleteType\n    );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n\n    return true;\n  };\n\n  handleImageUpload = (event: any) => {\n    var file = event.target.files[0];\n    const reader = new FileReader();\n    var url = reader.readAsDataURL(file);\n\n    reader.onloadend = (e: any) => {\n      this.setState({ selectedFile: [reader.result] });\n    };\n\n    this.setState({\n      selectedFile: event.target.files[0],\n    });\n  };\n\n  async receive(from: string, message: Message) {\n    // Customizable Area Start\n    runEngine.debugLog(\"Message Recevied\", message);\n\n    if (getName(MessageEnum.RestAPIResponceMessage) === message.id) {\n      var responseJson = message.getData(\n        getName(MessageEnum.RestAPIResponceSuccessMessage)\n      );\n      var errorReponse = message.getData(\n        getName(MessageEnum.RestAPIResponceErrorMessage)\n      );\n      const apiRequestCallId = message.getData(\n        getName(MessageEnum.RestAPIResponceDataMessage)\n      );\n      if (responseJson && !responseJson.errors) {\n        if (apiRequestCallId != null) {\n          // Store All Category data\n          if (\n            apiRequestCallId === this.getCategoryApiCallId &&\n            responseJson !== undefined\n          ) {\n            this.setState({ categoryData: responseJson.data });\n          }\n\n          // Store category detaills\n          if (\n            apiRequestCallId === this.categoryDetailsApiCallId &&\n            responseJson !== undefined\n          ) {\n            this.setState({\n              categoryDetailsData: responseJson.data,\n              editor:  RichTextEditor.createValueFromString(responseJson.data.attributes?.description, 'html')\n            });\n          }\n\n          // Create Category\n          if (apiRequestCallId === this.categoryCreateApiCallId && responseJson !== undefined) {\n            this.openSnackBarHandler('success', configJSON.successCreateMsgText);\n            setTimeout(() => {\n              //@ts-ignore\n              this.props.history.push('/categories');\n            }, 1000);\n          }\n\n          // Update Category\n          if (apiRequestCallId === this.categoryUpdateApiCallId && responseJson !== undefined) {\n            this.openSnackBarHandler('success', configJSON.successUpdateMsgText);\n            setTimeout(() => {\n              //@ts-ignore\n              this.props.history.push('/categories');\n            }, 1000);\n          }\n\n          // Delete Category\n          if (apiRequestCallId === this.deleteCategoryApiCallId && responseJson !== undefined) {\n            this.openSnackBarHandler('success', configJSON.deleteCategoryMsgText);\n            this.getCategoryList();\n          }\n        }\n      } else {\n        const errors = responseJson.errors;\n        this.parseApiCatchErrorResponse(errorReponse);\n\n        if(errors[0].token === 'Invalid token' || 'Token has Expired') {\n          AsyncStorage.setItem(\"auth\", \"\");\n          //@ts-ignore\n          this.props?.history.push(\"/login\");\n        } else if(errors[0].message) {\n          this.openSnackBarHandler('error', errors[0].message);\n        } else {\n          if (apiRequestCallId === this.categoryCreateApiCallId) {\n            this.openSnackBarHandler('error', configJSON.errorCreateMsgText);\n          }\n        }\n      }\n    }\n    // Customizable Area End\n  }\n\n  onMenuToggle = () => {\n    this.setState({\n      menuCollapsed: !this.state.menuCollapsed,\n    });\n  };\n\n  // Open View Details Modal\n  openSnackBarHandler = (type: \"success\" | \"info\" | \"warning\" | \"error\" | undefined,  message: string): void => {\n    this.setState({ snackBar: {\n      show: true,\n      message: message,\n      type\n    } });\n  };\n\n  // Close View Details Modal\n  closeSnackBarHandler = () => {\n    this.setState({ snackBar: {\n      show: false,\n      message: this.state.snackBar.message,\n      type: this.state.snackBar.type\n    }});\n  };\n  // Customizable Area End\n}\n"]},"metadata":{},"sourceType":"module"}