{"ast":null,"code":"import _regeneratorRuntime from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport MessageEnum, { getName } from \"../../../framework/src/Messages/MessageEnum\";\nimport { runEngine } from \"../../../framework/src/RunEngine\"; // Customizable Area Start\n// import { imgPasswordInVisible, imgPasswordVisible } from \"./assets\";\n// Customizable Area End\n\nexport const configJSON = require(\"./config\");\nexport default class AuditTrailControllerWeb extends BlockComponent {\n  constructor(props) {\n    super(props);\n    this.auth = window.localStorage.getItem(\"auth\");\n    this.getAllMembersApiCallId = \"\";\n    this.getAllLogsApiCallId = \"\";\n    this.trailsOfTeamMemberApiCallId = \"\";\n\n    this.getMembersList = () => {\n      this.setState({\n        memberListingLoader: true\n      });\n      const headers = {\n        \"Content-Type\": configJSON.getAllMembersApiContentType,\n        token: this.auth\n      };\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      this.getAllMembersApiCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.getAllMembersApiEndPoint);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.getAllMembersApiMethodType);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    };\n\n    this.getAllLogs = () => {\n      this.setState({\n        logsListingLoader: true\n      });\n      const headers = {\n        \"Content-Type\": configJSON.getAllMembersApiContentType,\n        token: this.auth\n      };\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      this.getAllLogsApiCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.getAllMembersApiEndPoint + \"?all=true\");\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.getAllMembersApiMethodType);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    };\n\n    this.trailsOfTeamMember = accountId => {\n      this.setState({\n        trailDetailsLoader: true\n      });\n      const headers = {\n        \"Content-Type\": configJSON.getAllMembersApiContentType,\n        token: this.auth\n      };\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      this.trailsOfTeamMemberApiCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), \"\".concat(configJSON.getAllMembersApiEndPoint, \"?account_id=\").concat(accountId));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.getAllMembersApiMethodType);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    };\n\n    this.handleTrailType = type => {\n      this.setState({\n        trailType: type\n      });\n    };\n\n    this.hanldeOnChangeDate = dates => {\n      const _dates = _slicedToArray(dates, 2),\n            start = _dates[0],\n            end = _dates[1];\n\n      this.setState({\n        startDate: start,\n        endDate: end,\n        showFilterCalendar: end === null || end === \"\"\n      });\n    };\n\n    this.onCalendarClose = () => {\n      this.setState({\n        showFilterCalendar: false\n      });\n    };\n\n    this.onCalendarOpen = () => {\n      this.setState({\n        showFilterCalendar: true\n      });\n    };\n\n    this.onMenuToggle = () => {\n      this.setState({\n        menuCollapsed: !this.state.menuCollapsed\n      });\n    };\n\n    this.openTrailViewDetailsModalHandler = accountId => {\n      this.trailsOfTeamMember(accountId);\n      this.setState({\n        memberDetailsModal: true\n      });\n    };\n\n    this.closeTrailViewDetailsModalHandler = () => {\n      this.setState({\n        memberDetailsModal: false\n      });\n    };\n\n    this.logsFilterHandler = () => {\n      this.setState({\n        showLogsFilter: !this.state.showLogsFilter\n      });\n    };\n\n    this.handleEventTypeChange = selectedOption => {\n      this.setState({\n        selectedEventTypeOption: selectedOption\n      });\n    };\n\n    this.handleResourceTypeChange = selectedOption => {\n      this.setState({\n        selectedResourceTypeOption: selectedOption\n      });\n    };\n\n    this.receive = this.receive.bind(this); // Customizable Area Start\n\n    this.subScribedMessages = [getName(MessageEnum.RestAPIResponceMessage)];\n    this.state = {\n      auth: \"\",\n      trailType: configJSON.membersText,\n      startDate: new Date(),\n      endDate: null,\n      showFilterCalendar: false,\n      userType: configJSON.subscriber,\n      menuCollapsed: false,\n      membersData: [],\n      allLogsData: [],\n      trailsOfTeamMemberData: [],\n      memberDetailsModal: false,\n      showLogsFilter: false,\n      selectedEventTypeOption: null,\n      selectedResourceTypeOption: null,\n      searchText: \"\",\n      memberListingLoader: false,\n      logsListingLoader: false,\n      trailDetailsLoader: false\n    }; // Customizable Area End\n\n    runEngine.attachBuildingBlock(this, this.subScribedMessages);\n  }\n\n  componentDidMount() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _this.getMembersList();\n\n            _this.getAllLogs();\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  } // searchTextInputProps = (e: Event): void => {\n  //   // this.setState({ searchText: e.target.value });\n  // };\n  // Handler for Get Members List\n\n\n  receive(from, message) {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var responseJson, errorReponse, apiRequestCallId, _this2$props;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            // Customizable Area Start\n            runEngine.debugLog(\"Message Recevied\", message);\n\n            if (getName(MessageEnum.RestAPIResponceMessage) === message.id) {\n              responseJson = message.getData(getName(MessageEnum.RestAPIResponceSuccessMessage));\n              errorReponse = message.getData(getName(MessageEnum.RestAPIResponceErrorMessage));\n\n              if (responseJson && !responseJson.errors && responseJson.data) {\n                apiRequestCallId = message.getData(getName(MessageEnum.RestAPIResponceDataMessage));\n\n                if (apiRequestCallId != null) {\n                  // Store All Members data\n                  if (apiRequestCallId === _this2.getAllMembersApiCallId && responseJson !== undefined) {\n                    _this2.setState({\n                      membersData: responseJson.data,\n                      memberListingLoader: false\n                    });\n                  } // Store All Logs data\n\n\n                  if (apiRequestCallId === _this2.getAllLogsApiCallId && responseJson !== undefined) {\n                    _this2.setState({\n                      allLogsData: responseJson.data,\n                      logsListingLoader: false\n                    });\n                  } // Store trails Of Team Member detaills\n\n\n                  if (apiRequestCallId === _this2.trailsOfTeamMemberApiCallId && responseJson !== undefined) {\n                    _this2.setState({\n                      trailsOfTeamMemberData: {\n                        data: responseJson.data,\n                        count: responseJson.meta.total_record,\n                        name: responseJson.data[0].attributes.account_detail.name\n                      },\n                      trailDetailsLoader: false\n                    });\n                  }\n                }\n              } else {\n                _this2.parseApiCatchErrorResponse(errorReponse);\n\n                AsyncStorage.setItem(\"auth\", \"\"); //@ts-ignore\n\n                (_this2$props = _this2.props) === null || _this2$props === void 0 ? void 0 : _this2$props.history.push(\"login\");\n              }\n            } // Customizable Area End\n\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }))();\n  } // Trail Type useImperativeHandle(\n  // Customizable Area End\n\n\n}","map":{"version":3,"sources":["/home/lp-greenapex/gargi/okydpim-36944-react-native/src/packages/blocks/AuditTrail/src/AuditTrailController.web.tsx"],"names":["Message","BlockComponent","MessageEnum","getName","runEngine","configJSON","require","AuditTrailControllerWeb","constructor","props","auth","window","localStorage","getItem","getAllMembersApiCallId","getAllLogsApiCallId","trailsOfTeamMemberApiCallId","getMembersList","setState","memberListingLoader","headers","getAllMembersApiContentType","token","requestMessage","RestAPIRequestMessage","messageId","addData","RestAPIResponceEndPointMessage","getAllMembersApiEndPoint","RestAPIRequestHeaderMessage","JSON","stringify","RestAPIRequestMethodMessage","getAllMembersApiMethodType","sendMessage","id","getAllLogs","logsListingLoader","trailsOfTeamMember","accountId","trailDetailsLoader","handleTrailType","type","trailType","hanldeOnChangeDate","dates","start","end","startDate","endDate","showFilterCalendar","onCalendarClose","onCalendarOpen","onMenuToggle","menuCollapsed","state","openTrailViewDetailsModalHandler","memberDetailsModal","closeTrailViewDetailsModalHandler","logsFilterHandler","showLogsFilter","handleEventTypeChange","selectedOption","selectedEventTypeOption","handleResourceTypeChange","selectedResourceTypeOption","receive","bind","subScribedMessages","RestAPIResponceMessage","membersText","Date","userType","subscriber","membersData","allLogsData","trailsOfTeamMemberData","searchText","attachBuildingBlock","componentDidMount","from","message","debugLog","responseJson","getData","RestAPIResponceSuccessMessage","errorReponse","RestAPIResponceErrorMessage","errors","data","apiRequestCallId","RestAPIResponceDataMessage","undefined","count","meta","total_record","name","attributes","account_detail","parseApiCatchErrorResponse","AsyncStorage","setItem","history","push"],"mappings":";;;;AAEA,SAASA,OAAT,QAAwB,gCAAxB;AACA,SAASC,cAAT,QAA+B,uCAA/B;AACA,OAAOC,WAAP,IACEC,OADF,QAEO,6CAFP;AAGA,SAASC,SAAT,QAA0B,kCAA1B,C,CAEA;AACA;AACA;;AAEA,OAAO,MAAMC,UAAU,GAAGC,OAAO,CAAC,UAAD,CAA1B;AAyCP,eAAe,MAAMC,uBAAN,SAAsCN,cAAtC,CAIb;AAMAO,EAAAA,WAAW,CAACC,KAAD,EAAe;AACxB,UAAMA,KAAN;AADwB,SAL1BC,IAK0B,GALQC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,MAA5B,CAKR;AAAA,SAJ1BC,sBAI0B,GAJO,EAIP;AAAA,SAH1BC,mBAG0B,GAHI,EAGJ;AAAA,SAF1BC,2BAE0B,GAFY,EAEZ;;AAAA,SAyC1BC,cAzC0B,GAyCT,MAAe;AAC9B,WAAKC,QAAL,CAAc;AACZC,QAAAA,mBAAmB,EAAE;AADT,OAAd;AAIA,YAAMC,OAAO,GAAG;AACd,wBAAgBf,UAAU,CAACgB,2BADb;AAEdC,QAAAA,KAAK,EAAE,KAAKZ;AAFE,OAAhB;AAKA,YAAMa,cAAc,GAAG,IAAIvB,OAAJ,CACrBG,OAAO,CAACD,WAAW,CAACsB,qBAAb,CADc,CAAvB;AAIA,WAAKV,sBAAL,GAA8BS,cAAc,CAACE,SAA7C;AAEAF,MAAAA,cAAc,CAACG,OAAf,CACEvB,OAAO,CAACD,WAAW,CAACyB,8BAAb,CADT,EAEEtB,UAAU,CAACuB,wBAFb;AAKAL,MAAAA,cAAc,CAACG,OAAf,CACEvB,OAAO,CAACD,WAAW,CAAC2B,2BAAb,CADT,EAEEC,IAAI,CAACC,SAAL,CAAeX,OAAf,CAFF;AAKAG,MAAAA,cAAc,CAACG,OAAf,CACEvB,OAAO,CAACD,WAAW,CAAC8B,2BAAb,CADT,EAEE3B,UAAU,CAAC4B,0BAFb;AAKA7B,MAAAA,SAAS,CAAC8B,WAAV,CAAsBX,cAAc,CAACY,EAArC,EAAyCZ,cAAzC;AAEA,aAAO,IAAP;AACD,KA3EyB;;AAAA,SA8E1Ba,UA9E0B,GA8Eb,MAAe;AAC1B,WAAKlB,QAAL,CAAc;AACZmB,QAAAA,iBAAiB,EAAE;AADP,OAAd;AAIA,YAAMjB,OAAO,GAAG;AACd,wBAAgBf,UAAU,CAACgB,2BADb;AAEdC,QAAAA,KAAK,EAAE,KAAKZ;AAFE,OAAhB;AAKA,YAAMa,cAAc,GAAG,IAAIvB,OAAJ,CACrBG,OAAO,CAACD,WAAW,CAACsB,qBAAb,CADc,CAAvB;AAIA,WAAKT,mBAAL,GAA2BQ,cAAc,CAACE,SAA1C;AAEAF,MAAAA,cAAc,CAACG,OAAf,CACEvB,OAAO,CAACD,WAAW,CAACyB,8BAAb,CADT,EAEEtB,UAAU,CAACuB,wBAAX,GAAsC,WAFxC;AAKAL,MAAAA,cAAc,CAACG,OAAf,CACEvB,OAAO,CAACD,WAAW,CAAC2B,2BAAb,CADT,EAEEC,IAAI,CAACC,SAAL,CAAeX,OAAf,CAFF;AAKAG,MAAAA,cAAc,CAACG,OAAf,CACEvB,OAAO,CAACD,WAAW,CAAC8B,2BAAb,CADT,EAEE3B,UAAU,CAAC4B,0BAFb;AAKA7B,MAAAA,SAAS,CAAC8B,WAAV,CAAsBX,cAAc,CAACY,EAArC,EAAyCZ,cAAzC;AAEA,aAAO,IAAP;AACD,KAhHyB;;AAAA,SAmH1Be,kBAnH0B,GAmHJC,SAAD,IAAgC;AACnD,WAAKrB,QAAL,CAAc;AACZsB,QAAAA,kBAAkB,EAAE;AADR,OAAd;AAIA,YAAMpB,OAAO,GAAG;AACd,wBAAgBf,UAAU,CAACgB,2BADb;AAEdC,QAAAA,KAAK,EAAE,KAAKZ;AAFE,OAAhB;AAKA,YAAMa,cAAc,GAAG,IAAIvB,OAAJ,CACrBG,OAAO,CAACD,WAAW,CAACsB,qBAAb,CADc,CAAvB;AAIA,WAAKR,2BAAL,GAAmCO,cAAc,CAACE,SAAlD;AAEAF,MAAAA,cAAc,CAACG,OAAf,CACEvB,OAAO,CAACD,WAAW,CAACyB,8BAAb,CADT,YAEKtB,UAAU,CAACuB,wBAFhB,yBAEuDW,SAFvD;AAKAhB,MAAAA,cAAc,CAACG,OAAf,CACEvB,OAAO,CAACD,WAAW,CAAC2B,2BAAb,CADT,EAEEC,IAAI,CAACC,SAAL,CAAeX,OAAf,CAFF;AAKAG,MAAAA,cAAc,CAACG,OAAf,CACEvB,OAAO,CAACD,WAAW,CAAC8B,2BAAb,CADT,EAEE3B,UAAU,CAAC4B,0BAFb;AAKA7B,MAAAA,SAAS,CAAC8B,WAAV,CAAsBX,cAAc,CAACY,EAArC,EAAyCZ,cAAzC;AAEA,aAAO,IAAP;AACD,KArJyB;;AAAA,SAuN1BkB,eAvN0B,GAuNPC,IAAD,IAAwB;AACxC,WAAKxB,QAAL,CAAc;AACZyB,QAAAA,SAAS,EAAED;AADC,OAAd;AAGD,KA3NyB;;AAAA,SA8N1BE,kBA9N0B,GA8NJC,KAAD,IAAqB;AAAA,oCACnBA,KADmB;AAAA,YACjCC,KADiC;AAAA,YAC1BC,GAD0B;;AAExC,WAAK7B,QAAL,CAAc;AACZ8B,QAAAA,SAAS,EAAEF,KADC;AAEZG,QAAAA,OAAO,EAAEF,GAFG;AAGZG,QAAAA,kBAAkB,EAAEH,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAK;AAHhC,OAAd;AAKD,KArOyB;;AAAA,SAwO1BI,eAxO0B,GAwOR,MAAM;AACtB,WAAKjC,QAAL,CAAc;AACZgC,QAAAA,kBAAkB,EAAE;AADR,OAAd;AAGD,KA5OyB;;AAAA,SA+O1BE,cA/O0B,GA+OT,MAAM;AACrB,WAAKlC,QAAL,CAAc;AACZgC,QAAAA,kBAAkB,EAAE;AADR,OAAd;AAGD,KAnPyB;;AAAA,SAqP1BG,YArP0B,GAqPX,MAAM;AACnB,WAAKnC,QAAL,CAAc;AACZoC,QAAAA,aAAa,EAAE,CAAC,KAAKC,KAAL,CAAWD;AADf,OAAd;AAGD,KAzPyB;;AAAA,SA4P1BE,gCA5P0B,GA4PUjB,SAAD,IAA6B;AAC9D,WAAKD,kBAAL,CAAwBC,SAAxB;AACA,WAAKrB,QAAL,CAAc;AAAEuC,QAAAA,kBAAkB,EAAE;AAAtB,OAAd;AACD,KA/PyB;;AAAA,SAkQ1BC,iCAlQ0B,GAkQU,MAAM;AACxC,WAAKxC,QAAL,CAAc;AAAEuC,QAAAA,kBAAkB,EAAE;AAAtB,OAAd;AACD,KApQyB;;AAAA,SAsQ1BE,iBAtQ0B,GAsQN,MAAM;AACxB,WAAKzC,QAAL,CAAc;AAAE0C,QAAAA,cAAc,EAAE,CAAC,KAAKL,KAAL,CAAWK;AAA9B,OAAd;AACD,KAxQyB;;AAAA,SA0Q1BC,qBA1Q0B,GA0QDC,cAAD,IAAyB;AAC/C,WAAK5C,QAAL,CAAc;AAAE6C,QAAAA,uBAAuB,EAAED;AAA3B,OAAd;AACD,KA5QyB;;AAAA,SA8Q1BE,wBA9Q0B,GA8QEF,cAAD,IAAyB;AAClD,WAAK5C,QAAL,CAAc;AAAE+C,QAAAA,0BAA0B,EAAEH;AAA9B,OAAd;AACD,KAhRyB;;AAExB,SAAKI,OAAL,GAAe,KAAKA,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAf,CAFwB,CAIxB;;AACA,SAAKC,kBAAL,GAA0B,CAACjE,OAAO,CAACD,WAAW,CAACmE,sBAAb,CAAR,CAA1B;AAEA,SAAKd,KAAL,GAAa;AACX7C,MAAAA,IAAI,EAAE,EADK;AAEXiC,MAAAA,SAAS,EAAEtC,UAAU,CAACiE,WAFX;AAGXtB,MAAAA,SAAS,EAAE,IAAIuB,IAAJ,EAHA;AAIXtB,MAAAA,OAAO,EAAE,IAJE;AAKXC,MAAAA,kBAAkB,EAAE,KALT;AAMXsB,MAAAA,QAAQ,EAAEnE,UAAU,CAACoE,UANV;AAOXnB,MAAAA,aAAa,EAAE,KAPJ;AAQXoB,MAAAA,WAAW,EAAE,EARF;AASXC,MAAAA,WAAW,EAAE,EATF;AAUXC,MAAAA,sBAAsB,EAAE,EAVb;AAWXnB,MAAAA,kBAAkB,EAAE,KAXT;AAYXG,MAAAA,cAAc,EAAE,KAZL;AAaXG,MAAAA,uBAAuB,EAAE,IAbd;AAcXE,MAAAA,0BAA0B,EAAE,IAdjB;AAeXY,MAAAA,UAAU,EAAE,EAfD;AAgBX1D,MAAAA,mBAAmB,EAAE,KAhBV;AAiBXkB,MAAAA,iBAAiB,EAAE,KAjBR;AAkBXG,MAAAA,kBAAkB,EAAE;AAlBT,KAAb,CAPwB,CA2BxB;;AACApC,IAAAA,SAAS,CAAC0E,mBAAV,CAA8B,IAA9B,EAA8C,KAAKV,kBAAnD;AACD;;AAEKW,EAAAA,iBAAN,GAA0B;AAAA;;AAAA;AAAA;AAAA;AAAA;AACxB,YAAA,KAAI,CAAC9D,cAAL;;AACA,YAAA,KAAI,CAACmB,UAAL;;AAFwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAGzB,GAxCD,CA0CA;AACA;AACA;AAEA;;;AA+GM8B,EAAAA,OAAN,CAAcc,IAAd,EAA4BC,OAA5B,EAA8C;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAC5C;AACA7E,YAAAA,SAAS,CAAC8E,QAAV,CAAmB,kBAAnB,EAAuCD,OAAvC;;AAEA,gBAAI9E,OAAO,CAACD,WAAW,CAACmE,sBAAb,CAAP,KAAgDY,OAAO,CAAC9C,EAA5D,EAAgE;AAC1DgD,cAAAA,YAD0D,GAC3CF,OAAO,CAACG,OAAR,CACjBjF,OAAO,CAACD,WAAW,CAACmF,6BAAb,CADU,CAD2C;AAI1DC,cAAAA,YAJ0D,GAI3CL,OAAO,CAACG,OAAR,CACjBjF,OAAO,CAACD,WAAW,CAACqF,2BAAb,CADU,CAJ2C;;AAO9D,kBAAIJ,YAAY,IAAI,CAACA,YAAY,CAACK,MAA9B,IAAwCL,YAAY,CAACM,IAAzD,EAA+D;AACvDC,gBAAAA,gBADuD,GACpCT,OAAO,CAACG,OAAR,CACvBjF,OAAO,CAACD,WAAW,CAACyF,0BAAb,CADgB,CADoC;;AAI7D,oBAAID,gBAAgB,IAAI,IAAxB,EAA8B;AAC5B;AACA,sBACEA,gBAAgB,KAAK,MAAI,CAAC5E,sBAA1B,IACAqE,YAAY,KAAKS,SAFnB,EAGE;AACA,oBAAA,MAAI,CAAC1E,QAAL,CAAc;AACZwD,sBAAAA,WAAW,EAAES,YAAY,CAACM,IADd;AAEZtE,sBAAAA,mBAAmB,EAAE;AAFT,qBAAd;AAID,mBAV2B,CAY5B;;;AACA,sBACEuE,gBAAgB,KAAK,MAAI,CAAC3E,mBAA1B,IACAoE,YAAY,KAAKS,SAFnB,EAGE;AACA,oBAAA,MAAI,CAAC1E,QAAL,CAAc;AACZyD,sBAAAA,WAAW,EAAEQ,YAAY,CAACM,IADd;AAEZpD,sBAAAA,iBAAiB,EAAE;AAFP,qBAAd;AAID,mBArB2B,CAuB5B;;;AACA,sBACEqD,gBAAgB,KAAK,MAAI,CAAC1E,2BAA1B,IACAmE,YAAY,KAAKS,SAFnB,EAGE;AACA,oBAAA,MAAI,CAAC1E,QAAL,CAAc;AACZ0D,sBAAAA,sBAAsB,EAAE;AACtBa,wBAAAA,IAAI,EAAEN,YAAY,CAACM,IADG;AAEtBI,wBAAAA,KAAK,EAAEV,YAAY,CAACW,IAAb,CAAkBC,YAFH;AAGtBC,wBAAAA,IAAI,EAAEb,YAAY,CAACM,IAAb,CAAkB,CAAlB,EAAqBQ,UAArB,CAAgCC,cAAhC,CAA+CF;AAH/B,uBADZ;AAMZxD,sBAAAA,kBAAkB,EAAE;AANR,qBAAd;AAQD;AACF;AACF,eA1CD,MA0CO;AACL,gBAAA,MAAI,CAAC2D,0BAAL,CAAgCb,YAAhC;;AACAc,gBAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6B,EAA7B,EAFK,CAGL;;AACA,gCAAA,MAAI,CAAC5F,KAAL,8DAAY6F,OAAZ,CAAoBC,IAApB,CAAyB,OAAzB;AACD;AACF,aA3D2C,CA4D5C;;;AA5D4C;AAAA;AAAA;AAAA;AAAA;AAAA;AA6D7C,GA1ND,CA4NA;AA2DA;;;AAvRA","sourcesContent":["import { AsyncStorage } from \"react-native\";\nimport { IBlock } from \"../../../framework/src/IBlock\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport MessageEnum, {\n  getName,\n} from \"../../../framework/src/Messages/MessageEnum\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\n\n// Customizable Area Start\n// import { imgPasswordInVisible, imgPasswordVisible } from \"./assets\";\n// Customizable Area End\n\nexport const configJSON = require(\"./config\");\n\ninterface SelectOptions {\n  value: string;\n  label: string;\n}\nexport interface Props {\n  navigation: any;\n  id: string;\n  // Customizable Area Start\n  memberDetails: any;\n  // Customizable Area End\n}\n\ninterface S {\n  // Customizable Area Start\n  auth: string | null | undefined;\n  trailType: string;\n  startDate: Date | null | undefined;\n  endDate: Date | null | undefined;\n  showFilterCalendar: boolean;\n  userType: string;\n  menuCollapsed: boolean;\n  membersData: object[];\n  allLogsData: object[];\n  trailsOfTeamMemberData: any;\n  memberDetailsModal: boolean;\n  showLogsFilter: boolean;\n  selectedEventTypeOption: SelectOptions | null;\n  selectedResourceTypeOption: SelectOptions | null;\n  searchText: string | null | undefined;\n  memberListingLoader: boolean;\n  logsListingLoader: boolean;\n  trailDetailsLoader: boolean;\n  // Customizable Area End\n}\n\ninterface SS {\n  id: any;\n}\n\nexport default class AuditTrailControllerWeb extends BlockComponent<\n  Props,\n  S,\n  SS\n> {\n  auth: string | null | undefined = window.localStorage.getItem(\"auth\");\n  getAllMembersApiCallId: string = \"\";\n  getAllLogsApiCallId: string = \"\";\n  trailsOfTeamMemberApiCallId: string = \"\";\n\n  constructor(props: Props) {\n    super(props);\n    this.receive = this.receive.bind(this);\n\n    // Customizable Area Start\n    this.subScribedMessages = [getName(MessageEnum.RestAPIResponceMessage)];\n\n    this.state = {\n      auth: \"\",\n      trailType: configJSON.membersText,\n      startDate: new Date(),\n      endDate: null,\n      showFilterCalendar: false,\n      userType: configJSON.subscriber,\n      menuCollapsed: false,\n      membersData: [],\n      allLogsData: [],\n      trailsOfTeamMemberData: [],\n      memberDetailsModal: false,\n      showLogsFilter: false,\n      selectedEventTypeOption: null,\n      selectedResourceTypeOption: null,\n      searchText: \"\",\n      memberListingLoader: false,\n      logsListingLoader: false,\n      trailDetailsLoader: false,\n    };\n    // Customizable Area End\n    runEngine.attachBuildingBlock(this as IBlock, this.subScribedMessages);\n  }\n\n  async componentDidMount() {\n    this.getMembersList();\n    this.getAllLogs();\n  }\n\n  // searchTextInputProps = (e: Event): void => {\n  //   // this.setState({ searchText: e.target.value });\n  // };\n\n  // Handler for Get Members List\n  getMembersList = (): boolean => {\n    this.setState({\n      memberListingLoader: true\n    });\n\n    const headers = {\n      \"Content-Type\": configJSON.getAllMembersApiContentType,\n      token: this.auth,\n    };\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n    this.getAllMembersApiCallId = requestMessage.messageId;\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.getAllMembersApiEndPoint\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(headers)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.getAllMembersApiMethodType\n    );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n\n    return true;\n  };\n\n  // Handler for Get All Logs\n  getAllLogs = (): boolean => {\n    this.setState({\n      logsListingLoader: true\n    });\n\n    const headers = {\n      \"Content-Type\": configJSON.getAllMembersApiContentType,\n      token: this.auth,\n    };\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n    this.getAllLogsApiCallId = requestMessage.messageId;\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.getAllMembersApiEndPoint + \"?all=true\"\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(headers)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.getAllMembersApiMethodType\n    );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n\n    return true;\n  };\n\n  // Handler for Trails of Team member\n  trailsOfTeamMember = (accountId: number): boolean => {\n    this.setState({\n      trailDetailsLoader: true\n    });\n\n    const headers = {\n      \"Content-Type\": configJSON.getAllMembersApiContentType,\n      token: this.auth,\n    };\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n    this.trailsOfTeamMemberApiCallId = requestMessage.messageId;\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      `${configJSON.getAllMembersApiEndPoint}?account_id=${accountId}`\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(headers)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.getAllMembersApiMethodType\n    );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n\n    return true;\n  };\n\n  async receive(from: string, message: Message) {\n    // Customizable Area Start\n    runEngine.debugLog(\"Message Recevied\", message);\n\n    if (getName(MessageEnum.RestAPIResponceMessage) === message.id) {\n      var responseJson = message.getData(\n        getName(MessageEnum.RestAPIResponceSuccessMessage)\n      );\n      var errorReponse = message.getData(\n        getName(MessageEnum.RestAPIResponceErrorMessage)\n      );\n      if (responseJson && !responseJson.errors && responseJson.data) {\n        const apiRequestCallId = message.getData(\n          getName(MessageEnum.RestAPIResponceDataMessage)\n        );\n        if (apiRequestCallId != null) {\n          // Store All Members data\n          if (\n            apiRequestCallId === this.getAllMembersApiCallId &&\n            responseJson !== undefined\n          ) {\n            this.setState({ \n              membersData: responseJson.data,\n              memberListingLoader: false\n            });\n          }\n\n          // Store All Logs data\n          if (\n            apiRequestCallId === this.getAllLogsApiCallId &&\n            responseJson !== undefined\n          ) {\n            this.setState({ \n              allLogsData: responseJson.data,\n              logsListingLoader: false\n            });\n          }\n\n          // Store trails Of Team Member detaills\n          if (\n            apiRequestCallId === this.trailsOfTeamMemberApiCallId &&\n            responseJson !== undefined\n          ) {\n            this.setState({\n              trailsOfTeamMemberData: {\n                data: responseJson.data,\n                count: responseJson.meta.total_record,\n                name: responseJson.data[0].attributes.account_detail.name,\n              },\n              trailDetailsLoader: false\n            });\n          }\n        }\n      } else {\n        this.parseApiCatchErrorResponse(errorReponse);\n        AsyncStorage.setItem(\"auth\", \"\");\n        //@ts-ignore\n        this.props?.history.push(\"login\");\n      }\n    }\n    // Customizable Area End\n  }\n\n  // Trail Type useImperativeHandle(\n  handleTrailType = (type: string): void => {\n    this.setState({\n      trailType: type,\n    });\n  };\n\n  // On Date Change\n  hanldeOnChangeDate = (dates: any): any => {\n    const [start, end] = dates;\n    this.setState({\n      startDate: start,\n      endDate: end,\n      showFilterCalendar: end === null || end === \"\",\n    });\n  };\n\n  // Close Calendar popper\n  onCalendarClose = () => {\n    this.setState({\n      showFilterCalendar: false,\n    });\n  };\n\n  // Open Calendar popper\n  onCalendarOpen = () => {\n    this.setState({\n      showFilterCalendar: true,\n    });\n  };\n\n  onMenuToggle = () => {\n    this.setState({\n      menuCollapsed: !this.state.menuCollapsed,\n    });\n  };\n\n  // Open View Details Modal\n  openTrailViewDetailsModalHandler = (accountId: number): void => {\n    this.trailsOfTeamMember(accountId);\n    this.setState({ memberDetailsModal: true });\n  };\n\n  // Close View Details Modal\n  closeTrailViewDetailsModalHandler = () => {\n    this.setState({ memberDetailsModal: false });\n  };\n\n  logsFilterHandler = () => {\n    this.setState({ showLogsFilter: !this.state.showLogsFilter });\n  };\n\n  handleEventTypeChange = (selectedOption: any) => {\n    this.setState({ selectedEventTypeOption: selectedOption });\n  };\n\n  handleResourceTypeChange = (selectedOption: any) => {\n    this.setState({ selectedResourceTypeOption: selectedOption });\n  };\n  // Customizable Area End\n}\n"]},"metadata":{},"sourceType":"module"}