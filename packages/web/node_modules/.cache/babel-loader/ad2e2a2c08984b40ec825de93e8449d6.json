{"ast":null,"code":"import MuiAutocomplete from '@material-ui/lab/Autocomplete';\nimport { createElement } from 'react';\nimport MuiToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nimport invariant from 'tiny-warning';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\nvar _assign = function __assign() {\n  _assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return _assign.apply(this, arguments);\n};\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n}\n\nfunction fieldToAutocomplete(_a) {\n  var disabled = _a.disabled,\n      field = _a.field,\n      _b = _a.form,\n      isSubmitting = _b.isSubmitting,\n      setFieldValue = _b.setFieldValue,\n      type = _a.type,\n      onChange = _a.onChange,\n      onBlur = _a.onBlur,\n      freeSolo = _a.freeSolo,\n      props = __rest(_a, [\"disabled\", \"field\", \"form\", \"type\", \"onChange\", \"onBlur\", \"freeSolo\"]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (props.multiple) {\n      invariant(Array.isArray(field.value), \"value for \" + field.name + \" is not an array, this can caused unexpected behaviour\");\n    }\n  }\n\n  var _onChange = field.onChange,\n      _onBlur = field.onBlur,\n      _multiple = field.multiple,\n      fieldSubselection = __rest(field, [\"onChange\", \"onBlur\", \"multiple\"]);\n\n  return _assign(_assign({\n    freeSolo: freeSolo,\n    onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function (event) {\n      field.onBlur(event !== null && event !== void 0 ? event : field.name);\n    },\n    onChange: onChange !== null && onChange !== void 0 ? onChange : function (_event, value) {\n      setFieldValue(field.name, value);\n    },\n    disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting,\n    loading: isSubmitting\n  }, fieldSubselection), props);\n}\n\nfunction Autocomplete(props) {\n  return createElement(MuiAutocomplete, _assign({}, fieldToAutocomplete(props)));\n}\n\nAutocomplete.displayName = 'FormikMaterialUIAutocomplete';\n\nfunction fieldToToggleButtonGroup(_a) {\n  var _b = _a.field,\n      _onChange = _b.onChange,\n      fieldOnBlur = _b.onBlur,\n      field = __rest(_b, [\"onChange\", \"onBlur\"]),\n      type = _a.type,\n      onChange = _a.onChange,\n      onBlur = _a.onBlur,\n      form = _a.form,\n      props = __rest(_a, [\"field\", \"type\", \"onChange\", \"onBlur\", \"form\"]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    invariant(type === 'checkbox', \"property type=checkbox is missing from field \" + field.name + \", this can caused unexpected behaviour\");\n\n    if (!props.exclusive) {\n      invariant(Array.isArray(field.value), \"value for \" + field.name + \" is not an array, this can caused unexpected behaviour\");\n    }\n  }\n\n  return _assign(_assign({\n    onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function () {\n      fieldOnBlur(field.name);\n    },\n    onChange: onChange !== null && onChange !== void 0 ? onChange : function (_event, newValue) {\n      form.setFieldValue(field.name, newValue);\n    }\n  }, field), props);\n}\n\nfunction ToggleButtonGroup(props) {\n  return createElement(MuiToggleButtonGroup, _assign({}, fieldToToggleButtonGroup(props)));\n}\n\nToggleButtonGroup.displayName = 'FormikMaterialUIToggleButtonGroup';\nexport { fieldToAutocomplete, Autocomplete, fieldToToggleButtonGroup, ToggleButtonGroup };","map":null,"metadata":{},"sourceType":"module"}