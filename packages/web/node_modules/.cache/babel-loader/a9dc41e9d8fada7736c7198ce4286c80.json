{"ast":null,"code":"import _regeneratorRuntime from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport MessageEnum, { getName } from \"../../../framework/src/Messages/MessageEnum\";\nimport { runEngine } from \"../../../framework/src/RunEngine\"; // Customizable Area Start\n// Customizable Area End\n\nexport const configJSON = require(\"./config.js\");\nexport default class DashboardController extends BlockComponent {\n  constructor(props) {\n    super(props);\n    this.apiDashboardItemCallId = \"\";\n    this.dashboardApiCallId = \"\";\n    this.apiGetQueryStrinurl = \"\";\n    this.receive = this.receive.bind(this);\n    console.disableYellowBox = true; // Customizable Area Start\n\n    this.subScribedMessages = [getName(MessageEnum.AccoutLoginSuccess), getName(MessageEnum.RestAPIResponceMessage), getName(MessageEnum.SessionSaveMessage), getName(MessageEnum.SessionResponseMessage)];\n    this.state = {\n      dashboardData: [],\n      errorMsg: \"\",\n      token: \"\",\n      loading: false\n    }; // Customizable Area End\n\n    runEngine.attachBuildingBlock(this, this.subScribedMessages);\n  }\n\n  componentDidMount() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var authTokenReq;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            console.log(\"componentDidMount...\");\n            authTokenReq = new Message(getName(MessageEnum.SessionRequestMessage));\n\n            _this.send(authTokenReq);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  }\n\n  getDashboardData() {\n    // Customizable Area Start\n    const header = {\n      \"Content-Type\": configJSON.dashboarContentType,\n      token: this.state.token\n    };\n    console.log(\"header  \", JSON.stringify(header));\n    const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n    console.log(\"requestMessage, \", requestMessage);\n    this.apiDashboardItemCallId = requestMessage.messageId;\n    requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.dashboardGetUrl);\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(header));\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.dashboarApiMethodType); //console.log('requestMessage@, ',requestMessage);\n\n    runEngine.sendMessage(requestMessage.id, requestMessage); // Customizable Area End\n\n    return true;\n  }\n\n  receive(from, message) {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var token, responseJson, errorReponse;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            // Customizable Area Start\n            console.log(\"receive...\"); //runEngine.debugLog(\"Message Recived\", message);\n\n            if (getName(MessageEnum.SessionResponseMessage) === message.id) {\n              //runEngine.debugLog(\"Message Recived\", message);\n              token = message.getData(getName(MessageEnum.SessionResponseToken));\n\n              _this2.setState({\n                token: token,\n                loading: true\n              }, () => {\n                _this2.getDashboardData();\n              });\n            }\n\n            if (getName(MessageEnum.RestAPIResponceMessage) === message.id) {\n              responseJson = message.getData(getName(MessageEnum.RestAPIResponceSuccessMessage));\n\n              if (responseJson && !responseJson.errors && responseJson.data) {\n                console.log(\"responseJson  Dashboard \", JSON.stringify(responseJson));\n\n                if (responseJson.data.length === 0) {\n                  _this2.setState({\n                    errorMsg: \"Data Not Found\",\n                    loading: false\n                  });\n                } else {\n                  _this2.setState({\n                    dashboardData: responseJson.data,\n                    errorMsg: \"\",\n                    loading: false\n                  });\n                }\n              } else {\n                errorReponse = message.getData(getName(MessageEnum.RestAPIResponceErrorMessage));\n                console.log(\"error resp\", errorReponse);\n\n                if (errorReponse === undefined) {\n                  _this2.setState({\n                    errorMsg: \"Something went wrong\",\n                    loading: false\n                  });\n                } else {\n                  _this2.setState({\n                    errorMsg: errorReponse,\n                    loading: false\n                  });\n                }\n              }\n            }\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }))();\n  } // Customizable Area Start\n  // Customizable Area End\n\n\n}","map":{"version":3,"sources":["/home/lp-greenapex/gargi/okydpim-36944-react-native/src/packages/blocks/dashboard/src/DashboardController.tsx"],"names":["Message","BlockComponent","MessageEnum","getName","runEngine","configJSON","require","DashboardController","constructor","props","apiDashboardItemCallId","dashboardApiCallId","apiGetQueryStrinurl","receive","bind","console","disableYellowBox","subScribedMessages","AccoutLoginSuccess","RestAPIResponceMessage","SessionSaveMessage","SessionResponseMessage","state","dashboardData","errorMsg","token","loading","attachBuildingBlock","componentDidMount","log","authTokenReq","SessionRequestMessage","send","getDashboardData","header","dashboarContentType","JSON","stringify","requestMessage","RestAPIRequestMessage","messageId","addData","RestAPIResponceEndPointMessage","dashboardGetUrl","RestAPIRequestHeaderMessage","RestAPIRequestMethodMessage","dashboarApiMethodType","sendMessage","id","from","message","getData","SessionResponseToken","setState","responseJson","RestAPIResponceSuccessMessage","errors","data","length","errorReponse","RestAPIResponceErrorMessage","undefined"],"mappings":"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","sourcesContent":["import { IBlock } from \"../../../framework/src/IBlock\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport MessageEnum, {\n  getName\n} from \"../../../framework/src/Messages/MessageEnum\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\n\n// Customizable Area Start\n// Customizable Area End\n\nexport const configJSON = require(\"./config.js\");\n\nexport interface Props {\n  navigation: any;\n  id: string;\n  // Customizable Area Start\n  // Customizable Area End\n}\ninterface S {\n  // Customizable Area Start\n  dashboardData: any;\n  token: string;\n  errorMsg: string;\n  loading: boolean;\n  // Customizable Area End\n}\ninterface SS {\n  id: any;\n}\n\nexport default class DashboardController extends BlockComponent<Props, S, SS> {\n  apiDashboardItemCallId: string = \"\";\n  dashboardApiCallId: string = \"\";\n  apiGetQueryStrinurl: string = \"\";\n\n  constructor(props: Props) {\n    super(props);\n    this.receive = this.receive.bind(this);\n    console.disableYellowBox = true;\n    // Customizable Area Start\n    this.subScribedMessages = [\n      getName(MessageEnum.AccoutLoginSuccess),\n      getName(MessageEnum.RestAPIResponceMessage),\n      getName(MessageEnum.SessionSaveMessage),\n      getName(MessageEnum.SessionResponseMessage)\n    ];\n\n    this.state = {\n      dashboardData: [],\n      errorMsg: \"\",\n      token: \"\",\n      loading: false\n    };\n    // Customizable Area End\n    runEngine.attachBuildingBlock(this as IBlock, this.subScribedMessages);\n  }\n\n  async componentDidMount() {\n    console.log(\"componentDidMount...\");\n    var authTokenReq = new Message(getName(MessageEnum.SessionRequestMessage));\n    this.send(authTokenReq);\n  }\n\n  getDashboardData(): boolean {\n    // Customizable Area Start\n    const header = {\n      \"Content-Type\": configJSON.dashboarContentType,\n      token: this.state.token\n    };\n    console.log(\"header  \", JSON.stringify(header));\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n    console.log(\"requestMessage, \", requestMessage);\n    this.apiDashboardItemCallId = requestMessage.messageId;\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.dashboardGetUrl\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(header)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.dashboarApiMethodType\n    );\n    //console.log('requestMessage@, ',requestMessage);\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n    // Customizable Area End\n    return true;\n  }\n\n  async receive(from: string, message: Message) {\n    // Customizable Area Start\n    console.log(\"receive...\");\n    //runEngine.debugLog(\"Message Recived\", message);\n    if (getName(MessageEnum.SessionResponseMessage) === message.id) {\n      //runEngine.debugLog(\"Message Recived\", message);\n      let token = message.getData(getName(MessageEnum.SessionResponseToken));\n      this.setState({ token: token, loading: true }, () => {\n        this.getDashboardData();\n      });\n    }\n\n    if (getName(MessageEnum.RestAPIResponceMessage) === message.id) {\n      var responseJson = message.getData(\n        getName(MessageEnum.RestAPIResponceSuccessMessage)\n      );\n      if (responseJson && !responseJson.errors && responseJson.data) {\n        console.log(\"responseJson  Dashboard \", JSON.stringify(responseJson));\n        if (responseJson.data.length === 0) {\n          this.setState({\n            errorMsg: \"Data Not Found\",\n            loading: false\n          });\n        } else {\n          this.setState({\n            dashboardData: responseJson.data,\n            errorMsg: \"\",\n            loading: false\n          });\n        }\n      } else {\n        var errorReponse = message.getData(\n          getName(MessageEnum.RestAPIResponceErrorMessage)\n        );\n        console.log(\"error resp\", errorReponse);\n        if (errorReponse === undefined) {\n          this.setState({\n            errorMsg: \"Something went wrong\",\n            loading: false\n          });\n        } else {\n          this.setState({\n            errorMsg: errorReponse,\n            loading: false\n          });\n        }\n      }\n    }\n  }\n  // Customizable Area Start\n  // Customizable Area End\n}\n"]},"metadata":{},"sourceType":"module"}