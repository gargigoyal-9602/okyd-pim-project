{"ast":null,"code":"import _regeneratorRuntime from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport MessageEnum, { getName } from \"../../../framework/src/Messages/MessageEnum\";\nimport { runEngine } from \"../../../framework/src/RunEngine\"; // Customizable Area Start\n\nimport { imgPasswordInVisible, imgPasswordVisible } from \"./assets\";\nimport { isEmpty } from \"lodash\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\"; // Customizable Area End\n\nexport const configJSON = require(\"./config\");\nexport default class EmailAccountLoginController extends BlockComponent {\n  // Customizable Area Start\n  // Customizable Area End\n  constructor(props) {\n    super(props);\n    this.apiEmailLoginCallId = \"\";\n    this.validationApiCallId = \"\";\n    this.apiEmailCallId = \"\";\n    this.emailReg = void 0;\n    this.labelTitle = \"\";\n\n    this.getToken = () => {\n      const msg = new Message(getName(MessageEnum.SessionRequestMessage));\n      this.send(msg);\n      console.log('msg', msg);\n    };\n\n    this.btnSocialLoginProps = {\n      onClick: () => this.goToSocialLogin()\n    };\n    this.btnEmailLogInProps = {\n      onClick: () => this.doEmailLogIn()\n    };\n    this.btnPasswordShowHideProps = {\n      onClick: () => {\n        this.setState({\n          errorPassword: '',\n          enablePasswordField: !this.state.enablePasswordField\n        });\n        this.txtInputPasswordProps.secureTextEntry = !this.state.enablePasswordField;\n        this.btnPasswordShowHideImageProps.source = this.txtInputPasswordProps.secureTextEntry ? imgPasswordVisible : imgPasswordInVisible;\n      }\n    };\n    this.CustomCheckBoxProps = {\n      onChange: value => {\n        // console.log('value',value.target.value)\n        this.setState({\n          checkedRememberMe: value\n        });\n        this.CustomCheckBoxProps.isChecked = value;\n      },\n      isChecked: false\n    };\n    this.btnForgotPasswordProps = {\n      onClick: () => this.goToForgotPassword()\n    };\n    this.txtInputPasswordProps = {\n      onChange: text => {\n        this.setState({\n          errorPassword: '',\n          password: text === null || text === void 0 ? void 0 : text.target.value\n        }); //@ts-ignore\n\n        this.txtInputPasswordProps.value = text === null || text === void 0 ? void 0 : text.target.value;\n      },\n      secureTextEntry: true\n    };\n    this.btnPasswordShowHideImageProps = {\n      source: imgPasswordVisible\n    };\n    this.btnSelectDominWebProps = {\n      onChange: text => {\n        console.log('text?.target.value', text === null || text === void 0 ? void 0 : text.target.value);\n        this.setState({\n          selectedDomain: text === null || text === void 0 ? void 0 : text.target.value\n        });\n      }\n    };\n    this.btnRememberMeProps = {\n      onClick: evt => {\n        // console.log('evt.target.checked',evt.target.checked)\n        this.setState({\n          checkedRememberMe: !this.CustomCheckBoxProps.isChecked\n        });\n        this.CustomCheckBoxProps.isChecked = !this.CustomCheckBoxProps.isChecked; // console.log('this.CustomCheckBoxProps.isChecked',this.CustomCheckBoxProps.isChecked)\n        // console.log('this.state',this.state)\n      } // defaultChecked: false,\n      // checked : !this.state?.checkedRememberMe,\n      // value : !this.state?.checkedRememberMe,\n\n    };\n    this.txtInputEmailWebProps = {\n      onChange: text => {\n        this.setState({\n          errorEmail: '',\n          email: text === null || text === void 0 ? void 0 : text.target.value\n        }); //@ts-ignore\n\n        this.txtInputEmailProps.value = text === null || text === void 0 ? void 0 : text.target.value;\n      }\n    };\n    this.txtInputEmailMobileProps = _objectSpread(_objectSpread({}, this.txtInputEmailWebProps), {}, {\n      autoCompleteType: \"email\",\n      keyboardType: \"email-address\"\n    });\n    this.txtInputEmailProps = this.isPlatformWeb() ? this.txtInputEmailWebProps : this.txtInputEmailMobileProps;\n    this.receive = this.receive.bind(this); // Customizable Area Start\n\n    this.subScribedMessages = [getName(MessageEnum.CountryCodeMessage), getName(MessageEnum.RestAPIResponceMessage), getName(MessageEnum.ReciveUserCredentials)];\n    this.state = {\n      email: \"\",\n      password: \"\",\n      enablePasswordField: true,\n      checkedRememberMe: false,\n      placeHolderEmail: configJSON.placeHolderEmail,\n      placeHolderPassword: configJSON.placeHolderPassword,\n      imgPasswordVisible: configJSON.imgPasswordVisible,\n      imgPasswordInVisible: imgPasswordInVisible,\n      labelHeader: configJSON.labelHeader,\n      btnTxtLogin: configJSON.btnTxtLogin,\n      labelRememberMe: configJSON.labelRememberMe,\n      btnTxtSocialLogin: configJSON.btnTxtSocialLogin,\n      labelOr: configJSON.labelOr,\n      errorEmail: '',\n      errorPassword: '',\n      domain: [],\n      selectedDomain: ''\n    };\n    this.emailReg = new RegExp(\"\");\n    this.labelTitle = configJSON.labelTitle; // Customizable Area End\n\n    runEngine.attachBuildingBlock(this, this.subScribedMessages);\n  }\n\n  componentDidMount() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var lsdomain, lsSelecteDomain, lsEmail;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            // this.callGetValidationApi(); email\n            _this.send(new Message(getName(MessageEnum.RequestUserCredentials))); // Customizable Area Start\n\n\n            lsdomain = JSON.parse(localStorage.getItem('domain') || '[]');\n            lsSelecteDomain = localStorage.getItem('selectedDomain') || '';\n            lsEmail = localStorage.getItem('email') || '';\n            !isEmpty(lsdomain) && _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n              domain: lsdomain\n            })) && console.log('lsdomain', lsdomain);\n            !isEmpty(lsSelecteDomain) && _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n              selectedDomain: lsSelecteDomain\n            }));\n            !isEmpty(lsEmail) && _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n              email: lsEmail\n            })); // Customizable Area End\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  }\n\n  // Customizable Area End\n  receive(from, message) {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var userName, password, countryCode, apiRequestCallId, responseJson, errorReponse, arrayholder, regexData, _this2$props, msg;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            // Customizable Area Start\n            runEngine.debugLog(\"runEngine.debugLog\", message);\n\n            if (getName(MessageEnum.ReciveUserCredentials) === message.id) {\n              userName = message.getData(getName(MessageEnum.LoginUserName));\n              password = message.getData(getName(MessageEnum.LoginPassword));\n              countryCode = message.getData(getName(MessageEnum.LoginCountryCode));\n\n              if (!countryCode && userName && password) {\n                _this2.setState({\n                  email: userName,\n                  password: password,\n                  checkedRememberMe: true\n                }); //@ts-ignore\n\n\n                _this2.txtInputEmailProps.value = userName; //@ts-ignore\n\n                _this2.txtInputPasswordProps.value = password;\n                _this2.CustomCheckBoxProps.isChecked = true;\n              }\n            } else if (getName(MessageEnum.RestAPIResponceMessage) === message.id) {\n              apiRequestCallId = message.getData(getName(MessageEnum.RestAPIResponceDataMessage));\n              responseJson = message.getData(getName(MessageEnum.RestAPIResponceSuccessMessage));\n              errorReponse = message.getData(getName(MessageEnum.RestAPIResponceErrorMessage));\n\n              if (apiRequestCallId != null) {\n                if (apiRequestCallId === _this2.validationApiCallId && responseJson !== undefined) {\n                  arrayholder = responseJson.data;\n\n                  if (arrayholder && arrayholder.length !== 0) {\n                    regexData = arrayholder[0]; // console.log('arrayholder',arrayholder)\n\n                    if (regexData && regexData.email_validation_regexp) {\n                      _this2.emailReg = new RegExp(regexData.email_validation_regexp);\n                    }\n                  }\n                }\n\n                if (apiRequestCallId === _this2.apiEmailLoginCallId) {\n                  if (responseJson && responseJson.meta && responseJson.meta.token) {\n                    runEngine.unSubscribeFromMessages(_this2, _this2.subScribedMessages);\n\n                    _this2.saveLoggedInUserData(responseJson);\n\n                    _this2.sendLoginSuccessMessage(); // this.getToken();\n                    // runEngine.debugLog(\"SessionResponseToken\",message.getData(getName(MessageEnum.SessionResponseToken)))\n\n\n                    _this2.openInfoPage();\n                  } else {\n                    //Check Error Response\n                    // this.parseApiErrorResponse(responseJson);\n                    _this2.sendLoginFailMessage();\n\n                    alert('Please check you Email and Password');\n                  }\n\n                  _this2.parseApiCatchErrorResponse(errorReponse);\n                } // console.log('apiRequestCallIdapiRequestCallId',apiRequestCallId)\n                // console.log('this.apiEmailCallIdthis.apiEmailCallId',this.apiEmailCallId)\n\n\n                if (apiRequestCallId === _this2.apiEmailCallId) {\n                  if (responseJson && responseJson.success) {\n                    runEngine.unSubscribeFromMessages(_this2, _this2.subScribedMessages);\n\n                    _this2.setState({\n                      domain: responseJson.domain\n                    });\n\n                    msg = new Message(getName(MessageEnum.LoginSuccessMessage));\n                    msg.addData(getName(MessageEnum.DomainNameMessage), _this2.state.domain); //  console.log('response',responseJson)\n                    // console.log('this.statr',this.state)\n\n                    localStorage.setItem('domain', JSON.stringify(responseJson.domain));\n                    localStorage.setItem('email', _this2.state.email); //@ts-ignore\n\n                    (_this2$props = _this2.props) === null || _this2$props === void 0 ? void 0 : _this2$props.history.push(\"select-domain\");\n                  } else {\n                    alert('Email is not Register with Domain');\n                  }\n                }\n              }\n            } // Customizable Area End this.apiEmailCallId\n\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }))();\n  }\n\n  sendLoginFailMessage() {\n    const msg = new Message(getName(MessageEnum.LoginFaliureMessage));\n    this.send(msg);\n  }\n\n  sendLoginSuccessMessage() {\n    const msg = new Message(getName(MessageEnum.LoginSuccessMessage));\n    msg.addData(getName(MessageEnum.LoginUserName), this.state.email);\n    msg.addData(getName(MessageEnum.CountyCodeDataMessage), null);\n    msg.addData(getName(MessageEnum.LoginPassword), this.state.password);\n    msg.addData(getName(MessageEnum.LoginIsRememberMe), this.state.checkedRememberMe);\n    this.send(msg);\n  }\n\n  saveLoggedInUserData(responseJson) {\n    console.log('responseJsonresponseJson', responseJson);\n\n    if (responseJson && responseJson.meta && responseJson.meta.token) {\n      const msg = new Message(getName(MessageEnum.SessionSaveMessage));\n      msg.addData(getName(MessageEnum.SessionResponseData), JSON.stringify(responseJson));\n      msg.addData(getName(MessageEnum.SessionResponseToken), responseJson.meta.token);\n      AsyncStorage.setItem('token', responseJson.meta.token);\n      localStorage.setItem('auth', responseJson.meta.token);\n      this.send(msg);\n    }\n  }\n\n  openInfoPage() {\n    // const msg: Message = new Message(getName(MessageEnum.AccoutLoginSuccess));\n    // console.log('msg',msg)\n    // console.log('this.props',this.props)\n    // msg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n    // this.send(msg);\n    // localStorage.setItem('auth',);\n    alert('Login Successful'); // this.props.history.push(\"select-domain\")\n  }\n\n  goToForgotPassword() {\n    const msg = new Message(getName(MessageEnum.NavigationForgotPasswordMessage));\n    msg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n    msg.addData(getName(MessageEnum.NavigationForgotPasswordPageInfo), \"email\");\n    this.send(msg);\n  }\n\n  goToSocialLogin() {\n    const msg = new Message(getName(MessageEnum.NavigationSocialLogInMessage));\n    msg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n    this.send(msg);\n  }\n\n  doEmailLogIn() {\n    // console.log(\"API HIT\");\n    // console.log('this.state',this.state)\n    if (this.state.email === null || this.state.email.length === 0 || !this.emailReg.test(this.state.email)) {\n      // this.showAlert(\"Error\", configJSON.errorEmailNotValid);\n      this.setState({\n        errorEmail: configJSON.errorEmailNotValid\n      });\n      return false;\n    }\n\n    if (this.state.password === null || this.state.password.length === 0) {\n      this.setState({\n        errorPassword: configJSON.errorPasswordNotValid\n      });\n      return false;\n    }\n\n    const header = {\n      \"Content-Type\": configJSON.loginApiContentType\n    };\n    const getDomain = JSON.parse(localStorage.getItem('selectedDomain') || \"[]\");\n    console.log(\"getDomain\", getDomain);\n    !isEmpty(getDomain) && this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n      selectedDomain: getDomain\n    }));\n    const attrs = {\n      email: this.state.email || localStorage.getItem('email'),\n      password: this.state.password,\n      domain: this.state.selectedDomain // email: \"admin@oked.com\",\n      // password: \"Admin@123\",\n\n    };\n    const data = {\n      type: \"email_account\",\n      attributes: attrs\n    };\n    const httpBody = {\n      data: data\n    };\n    const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage)); // console.log(\"requestMessage\", requestMessage);\n\n    this.apiEmailLoginCallId = requestMessage.messageId;\n    requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.loginAPiEndPoint);\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(header));\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(httpBody));\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.loginAPiMethod); // console.log(\n    //   \"requestMessage.id, requestMessage\",\n    //   requestMessage.id,\n    //   requestMessage\n    // );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n    return true;\n  }\n\n  handleEmailLogin() {\n    // console.log(\"API HIT\");\n    // console.log('this.state',this.state)\n    if (this.state.email === null || this.state.email.length === 0 || !this.emailReg.test(this.state.email)) {\n      // this.showAlert(\"Error\", configJSON.errorEmailNotValid);\n      this.setState({\n        errorEmail: configJSON.errorEmailNotValid\n      });\n      return false;\n    }\n\n    const header = {\n      \"Content-Type\": configJSON.loginApiContentType\n    };\n    const attrs = {\n      email: this.state.email\n    };\n    const data = {\n      type: \"email_account\",\n      attributes: attrs\n    };\n    const httpBody = {\n      data: data\n    }; // console.log('httpBody',httpBody)\n\n    const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n    this.apiEmailCallId = requestMessage.messageId;\n    console.log(\"apiEmailCallId\", this.apiEmailCallId);\n    requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.EmailLoginAPiEndPoint);\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(header));\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(httpBody));\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.loginAPiMethod); // console.log(\n    //   \"requestMessage.id, requestMessage\",\n    //   requestMessage.id,\n    //   requestMessage\n    // );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n    return true;\n  }\n\n  handleDomainSelection() {\n    // console.log(\"API HIT\");\n    // console.log('this.state',this.state)\n    if (this.state.selectedDomain === '' || isEmpty(this.state.selectedDomain)) {\n      alert('Domain is not Selected');\n      return false;\n    } else {\n      var _this$props;\n\n      localStorage.setItem('selectedDomain', JSON.stringify(this.state.selectedDomain)); //@ts-ignore\n\n      (_this$props = this.props) === null || _this$props === void 0 ? void 0 : _this$props.history.push('email-account-Login-welcome');\n      return true;\n    }\n  }\n\n  callGetValidationApi() {\n    const headers = {\n      \"Content-Type\": configJSON.validationApiContentType\n    };\n    const getValidationsMsg = new Message(getName(MessageEnum.RestAPIRequestMessage));\n    this.validationApiCallId = getValidationsMsg.messageId;\n    getValidationsMsg.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.urlGetValidations);\n    getValidationsMsg.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n    getValidationsMsg.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.validationApiMethodType);\n    runEngine.sendMessage(getValidationsMsg.id, getValidationsMsg);\n  }\n\n}","map":{"version":3,"sources":["/home/lp-greenapex/gargi/okydpim-36944-react-native/src/packages/blocks/email-account-login/src/EmailAccountLoginController.web.tsx"],"names":["Message","BlockComponent","MessageEnum","getName","runEngine","imgPasswordInVisible","imgPasswordVisible","isEmpty","configJSON","require","EmailAccountLoginController","constructor","props","apiEmailLoginCallId","validationApiCallId","apiEmailCallId","emailReg","labelTitle","getToken","msg","SessionRequestMessage","send","console","log","btnSocialLoginProps","onClick","goToSocialLogin","btnEmailLogInProps","doEmailLogIn","btnPasswordShowHideProps","setState","errorPassword","enablePasswordField","state","txtInputPasswordProps","secureTextEntry","btnPasswordShowHideImageProps","source","CustomCheckBoxProps","onChange","value","checkedRememberMe","isChecked","btnForgotPasswordProps","goToForgotPassword","text","password","target","btnSelectDominWebProps","selectedDomain","btnRememberMeProps","evt","txtInputEmailWebProps","errorEmail","email","txtInputEmailProps","txtInputEmailMobileProps","autoCompleteType","keyboardType","isPlatformWeb","receive","bind","subScribedMessages","CountryCodeMessage","RestAPIResponceMessage","ReciveUserCredentials","placeHolderEmail","placeHolderPassword","labelHeader","btnTxtLogin","labelRememberMe","btnTxtSocialLogin","labelOr","domain","RegExp","attachBuildingBlock","componentDidMount","RequestUserCredentials","lsdomain","JSON","parse","localStorage","getItem","lsSelecteDomain","lsEmail","from","message","debugLog","id","userName","getData","LoginUserName","LoginPassword","countryCode","LoginCountryCode","apiRequestCallId","RestAPIResponceDataMessage","responseJson","RestAPIResponceSuccessMessage","errorReponse","RestAPIResponceErrorMessage","undefined","arrayholder","data","length","regexData","email_validation_regexp","meta","token","unSubscribeFromMessages","saveLoggedInUserData","sendLoginSuccessMessage","openInfoPage","sendLoginFailMessage","alert","parseApiCatchErrorResponse","success","LoginSuccessMessage","addData","DomainNameMessage","setItem","stringify","history","push","LoginFaliureMessage","CountyCodeDataMessage","LoginIsRememberMe","SessionSaveMessage","SessionResponseData","SessionResponseToken","AsyncStorage","NavigationForgotPasswordMessage","NavigationPropsMessage","NavigationForgotPasswordPageInfo","NavigationSocialLogInMessage","test","errorEmailNotValid","errorPasswordNotValid","header","loginApiContentType","getDomain","attrs","type","attributes","httpBody","requestMessage","RestAPIRequestMessage","messageId","RestAPIResponceEndPointMessage","loginAPiEndPoint","RestAPIRequestHeaderMessage","RestAPIRequestBodyMessage","RestAPIRequestMethodMessage","loginAPiMethod","sendMessage","handleEmailLogin","EmailLoginAPiEndPoint","handleDomainSelection","callGetValidationApi","headers","validationApiContentType","getValidationsMsg","urlGetValidations","validationApiMethodType"],"mappings":"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","sourcesContent":["import { IBlock } from \"../../../framework/src/IBlock\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport MessageEnum, {\n  getName,\n} from \"../../../framework/src/Messages/MessageEnum\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\n\n// Customizable Area Start\nimport { imgPasswordInVisible, imgPasswordVisible } from \"./assets\";\nimport { isEmpty } from \"lodash\";\nimport { AsyncStorage } from \"react-native\";\n// Customizable Area End\n\nexport const configJSON = require(\"./config\");\n\nexport interface Props {\n  navigation: any;\n  id: string;\n  // Customizable Area Start\n  // Customizable Area End\n}\n\ninterface S {\n  // Customizable Area Start\n  password: string;\n  email: string;\n  enablePasswordField: boolean;\n  checkedRememberMe: boolean;\n  placeHolderEmail: string;\n  placeHolderPassword: string;\n  imgPasswordVisible: any;\n  imgPasswordInVisible: any;\n  labelHeader: string;\n  btnTxtLogin: string;\n  labelRememberMe: string;\n  btnTxtSocialLogin: string;\n  labelOr: string;\n  errorEmail: string;\n  errorPassword: string;\n  domain: any;\n  selectedDomain : string\n  // Customizable Area End\n}\n\ninterface SS {\n  // Customizable Area Start\n  id: any;\n  // Customizable Area End\n}\n\nexport default class EmailAccountLoginController extends BlockComponent<\n  Props,\n  S,\n  SS\n> {\n  // Customizable Area Start\n  apiEmailLoginCallId: string = \"\";\n  validationApiCallId: string = \"\";\n  apiEmailCallId: string = \"\";\n\n  emailReg: RegExp;\n  labelTitle: string = \"\";\n  // Customizable Area End\n\n  constructor(props: Props) {\n    super(props);\n    this.receive = this.receive.bind(this);\n\n    // Customizable Area Start\n    this.subScribedMessages = [\n      getName(MessageEnum.CountryCodeMessage),\n      getName(MessageEnum.RestAPIResponceMessage),\n      getName(MessageEnum.ReciveUserCredentials),\n    ];\n\n    this.state = {\n      email: \"\",\n      password: \"\",\n      enablePasswordField: true,\n      checkedRememberMe: false,\n      placeHolderEmail: configJSON.placeHolderEmail,\n      placeHolderPassword: configJSON.placeHolderPassword,\n      imgPasswordVisible: configJSON.imgPasswordVisible,\n      imgPasswordInVisible: imgPasswordInVisible,\n      labelHeader: configJSON.labelHeader,\n      btnTxtLogin: configJSON.btnTxtLogin,\n      labelRememberMe: configJSON.labelRememberMe,\n      btnTxtSocialLogin: configJSON.btnTxtSocialLogin,\n      labelOr: configJSON.labelOr,\n      errorEmail:'',\n      errorPassword:'',\n      domain:[],\n      selectedDomain:''\n    };\n\n    this.emailReg = new RegExp(\"\");\n    this.labelTitle = configJSON.labelTitle;\n    // Customizable Area End\n\n    runEngine.attachBuildingBlock(this as IBlock, this.subScribedMessages);\n  }\n\n  async componentDidMount() {\n    // this.callGetValidationApi(); email\n    this.send(new Message(getName(MessageEnum.RequestUserCredentials)));\n    // Customizable Area Start\n   const lsdomain = JSON.parse(localStorage.getItem('domain')|| '[]')\n   const lsSelecteDomain = localStorage.getItem('selectedDomain') || ''\n    const lsEmail = localStorage.getItem('email') || ''\n  \n   !isEmpty(lsdomain) && this.setState({...this.state,domain : lsdomain}) && console.log('lsdomain',lsdomain)\n   !isEmpty(lsSelecteDomain) && this.setState({...this.state,selectedDomain:lsSelecteDomain})\n   !isEmpty(lsEmail) && this.setState({...this.state,email:lsEmail})\n    // Customizable Area End\n  }\n  getToken = () => {\n    const msg: Message = new Message(\n      getName(MessageEnum.SessionRequestMessage)\n    );\n    this.send(msg);\n   console.log('msg',msg)\n\n  };\n\n  // Customizable Area Start\n  btnSocialLoginProps = {\n    onClick: () => this.goToSocialLogin(),\n  };\n\n  btnEmailLogInProps = {\n    onClick: () => this.doEmailLogIn(),\n  };\n\n\n  btnPasswordShowHideProps = {\n    onClick: () => {\n      this.setState({ errorPassword:'',enablePasswordField: !this.state.enablePasswordField });\n      this.txtInputPasswordProps.secureTextEntry = !this.state\n        .enablePasswordField;\n      this.btnPasswordShowHideImageProps.source = this.txtInputPasswordProps\n        .secureTextEntry\n        ? imgPasswordVisible\n        : imgPasswordInVisible;\n    },\n  };\n  \n\n  CustomCheckBoxProps = {\n    onChange: (value: any) => {\n      // console.log('value',value.target.value)\n      this.setState({ checkedRememberMe: value });\n      this.CustomCheckBoxProps.isChecked = value;\n    },\n    isChecked: false,\n  };\n\n  btnForgotPasswordProps = {\n    onClick: () => this.goToForgotPassword(),\n  };\n\n  txtInputPasswordProps = {\n    onChange: (text: any) => {\n      this.setState({ errorPassword:'' ,password: text?.target.value });\n\n      //@ts-ignore\n      this.txtInputPasswordProps.value = text?.target.value;\n    },\n    secureTextEntry: true,\n  };\n\n  btnPasswordShowHideImageProps = {\n    source: imgPasswordVisible,\n  };\n\n  btnSelectDominWebProps = {\n    onChange: (text: any) => {\n      console.log('text?.target.value',text?.target.value)\n      this.setState({ selectedDomain: text?.target.value });\n    },\n  };\n\n  btnRememberMeProps = {\n    onClick: (evt:any) => {\n      // console.log('evt.target.checked',evt.target.checked)\n      this.setState({ checkedRememberMe: !this.CustomCheckBoxProps.isChecked });\n      this.CustomCheckBoxProps.isChecked = !this.CustomCheckBoxProps.isChecked;\n      // console.log('this.CustomCheckBoxProps.isChecked',this.CustomCheckBoxProps.isChecked)\n      // console.log('this.state',this.state)\n    },\n    // defaultChecked: false,\n    // checked : !this.state?.checkedRememberMe,\n    // value : !this.state?.checkedRememberMe,\n  };\n\n  txtInputEmailWebProps = {\n    onChange: (text: any) => {\n      this.setState({ errorEmail:''  ,email: text?.target.value });\n      //@ts-ignore\n      this.txtInputEmailProps.value = text?.target.value;\n    },\n  };\n\n  txtInputEmailMobileProps = {\n    ...this.txtInputEmailWebProps,\n    autoCompleteType: \"email\",\n    keyboardType: \"email-address\",\n  };\n\n  txtInputEmailProps = this.isPlatformWeb()\n    ? this.txtInputEmailWebProps\n    : this.txtInputEmailMobileProps;\n\n  // Customizable Area End\n\n  async receive(from: string, message: Message) {\n    // Customizable Area Start\n    runEngine.debugLog(\"runEngine.debugLog\", message);\n    \n    if (getName(MessageEnum.ReciveUserCredentials) === message.id) {\n      const userName = message.getData(getName(MessageEnum.LoginUserName));\n      const password = message.getData(getName(MessageEnum.LoginPassword));\n      const countryCode = message.getData(\n        getName(MessageEnum.LoginCountryCode)\n      );\n\n      if (!countryCode && userName && password) {\n        this.setState({\n          email: userName,\n          password: password,\n          checkedRememberMe: true,\n        });\n\n        //@ts-ignore\n        this.txtInputEmailProps.value = userName;\n\n        //@ts-ignore\n        this.txtInputPasswordProps.value = password;\n\n        this.CustomCheckBoxProps.isChecked = true;\n      }\n    } else if (getName(MessageEnum.RestAPIResponceMessage) === message.id) {\n      const apiRequestCallId = message.getData(\n        getName(MessageEnum.RestAPIResponceDataMessage)\n      );\n\n      var responseJson = message.getData(\n        getName(MessageEnum.RestAPIResponceSuccessMessage)\n      );\n\n      var errorReponse = message.getData(\n        getName(MessageEnum.RestAPIResponceErrorMessage)\n      );\n\n      if (apiRequestCallId != null) {\n        if (\n          apiRequestCallId === this.validationApiCallId &&\n          responseJson !== undefined\n        ) {\n          var arrayholder = responseJson.data;\n\n          if (arrayholder && arrayholder.length !== 0) {\n            let regexData = arrayholder[0];\n            // console.log('arrayholder',arrayholder)\n            if (regexData && regexData.email_validation_regexp) {\n              this.emailReg = new RegExp(regexData.email_validation_regexp);\n            }\n          }\n        }\n\n        if (apiRequestCallId === this.apiEmailLoginCallId) {\n          if (responseJson && responseJson.meta && responseJson.meta.token) {\n            runEngine.unSubscribeFromMessages(this, this.subScribedMessages);\n            this.saveLoggedInUserData(responseJson);\n            this.sendLoginSuccessMessage();\n            // this.getToken();\n            // runEngine.debugLog(\"SessionResponseToken\",message.getData(getName(MessageEnum.SessionResponseToken)))\n            this.openInfoPage();\n          } else {\n            //Check Error Response\n            // this.parseApiErrorResponse(responseJson);\n            this.sendLoginFailMessage();\n            alert('Please check you Email and Password')\n\n          }\n\n          this.parseApiCatchErrorResponse(errorReponse);\n        }\n        \n        // console.log('apiRequestCallIdapiRequestCallId',apiRequestCallId)\n        // console.log('this.apiEmailCallIdthis.apiEmailCallId',this.apiEmailCallId)\n        if (apiRequestCallId === this.apiEmailCallId) {\n          if (responseJson && responseJson.success) {\n            runEngine.unSubscribeFromMessages(this, this.subScribedMessages);\n            this.setState({\n              domain: responseJson.domain\n            })\n            const msg: Message = new Message(getName(MessageEnum.LoginSuccessMessage));\n            msg.addData(getName(MessageEnum.DomainNameMessage), this.state.domain);\n            //  console.log('response',responseJson)\n            // console.log('this.statr',this.state)\n            localStorage.setItem('domain',JSON.stringify(responseJson.domain));\n            localStorage.setItem('email',this.state.email)\n            //@ts-ignore\n              this.props?.history.push(\"select-domain\")\n          }else{\n            alert('Email is not Register with Domain')\n          }\n\n        }\n      }\n    }\n    // Customizable Area End this.apiEmailCallId\n  }\n\n  sendLoginFailMessage() {\n    const msg: Message = new Message(getName(MessageEnum.LoginFaliureMessage));\n    this.send(msg);\n  }\n\n  sendLoginSuccessMessage() {\n    const msg: Message = new Message(getName(MessageEnum.LoginSuccessMessage));\n\n    msg.addData(getName(MessageEnum.LoginUserName), this.state.email);\n    msg.addData(getName(MessageEnum.CountyCodeDataMessage), null);\n    msg.addData(getName(MessageEnum.LoginPassword), this.state.password);\n    msg.addData(\n      getName(MessageEnum.LoginIsRememberMe),\n      this.state.checkedRememberMe\n    );\n\n    this.send(msg);\n  }\n\n  saveLoggedInUserData(responseJson: any) {\n    console.log('responseJsonresponseJson',responseJson)\n    if (responseJson && responseJson.meta && responseJson.meta.token) {\n      const msg: Message = new Message(getName(MessageEnum.SessionSaveMessage));\n\n      msg.addData(\n        getName(MessageEnum.SessionResponseData),\n        JSON.stringify(responseJson)\n      );\n      msg.addData(\n        getName(MessageEnum.SessionResponseToken),\n        responseJson.meta.token\n      );\n      AsyncStorage.setItem('token', responseJson.meta.token)\n      localStorage.setItem('auth',responseJson.meta.token)\n\n      this.send(msg);\n\n      \n    }\n  }\n\n  openInfoPage() {\n    // const msg: Message = new Message(getName(MessageEnum.AccoutLoginSuccess));\n    // console.log('msg',msg)\n    // console.log('this.props',this.props)\n    // msg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n\n    // this.send(msg);\n    \n    // localStorage.setItem('auth',);\n    alert('Login Successful')\n    // this.props.history.push(\"select-domain\")\n  }\n\n  goToForgotPassword() {\n    const msg: Message = new Message(\n      getName(MessageEnum.NavigationForgotPasswordMessage)\n    );\n    msg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n    msg.addData(getName(MessageEnum.NavigationForgotPasswordPageInfo), \"email\");\n    this.send(msg);\n  }\n\n  goToSocialLogin() {\n    const msg: Message = new Message(\n      getName(MessageEnum.NavigationSocialLogInMessage)\n    );\n    msg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n    this.send(msg);\n  }\n\n  doEmailLogIn(): Boolean {\n    // console.log(\"API HIT\");\n    // console.log('this.state',this.state)\n    if (\n      this.state.email === null ||\n      this.state.email.length === 0 ||\n      !this.emailReg.test(this.state.email)\n    ) {\n      // this.showAlert(\"Error\", configJSON.errorEmailNotValid);\n      this.setState({\n          errorEmail:configJSON.errorEmailNotValid\n      })\n\n      return false;\n    }\n\n    if (this.state.password === null || this.state.password.length === 0) {\n       this.setState({\n          errorPassword:configJSON.errorPasswordNotValid\n      })\n      return false;\n    }\n\n    const header = {\n      \"Content-Type\": configJSON.loginApiContentType,\n    };\n\n    const getDomain = JSON.parse(localStorage.getItem('selectedDomain') || \"[]\" ) \n    console.log(\"getDomain\",getDomain)\n    !isEmpty(getDomain) && this.setState({...this.state,selectedDomain: getDomain})\n    const attrs = {\n      email: this.state.email  || localStorage.getItem('email'),\n      password: this.state.password,\n       domain: this.state.selectedDomain \n      // email: \"admin@oked.com\",\n      // password: \"Admin@123\",\n    };\n\n    const data = {\n      type: \"email_account\",\n      attributes: attrs,\n    };\n\n    const httpBody = {\n      data: data,\n    };\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage) \n    );\n\n    // console.log(\"requestMessage\", requestMessage);\n    this.apiEmailLoginCallId = requestMessage.messageId;\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.loginAPiEndPoint\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(header)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestBodyMessage),\n      JSON.stringify(httpBody)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.loginAPiMethod\n    );\n\n    // console.log(\n    //   \"requestMessage.id, requestMessage\",\n    //   requestMessage.id,\n    //   requestMessage\n    // );\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n\n    return true;\n  }\n\n  handleEmailLogin() : Boolean {\n    // console.log(\"API HIT\");\n    // console.log('this.state',this.state)\n    if (\n      this.state.email === null ||\n      this.state.email.length === 0 ||\n      !this.emailReg.test(this.state.email)\n    ) {\n      // this.showAlert(\"Error\", configJSON.errorEmailNotValid);\n      this.setState({\n          errorEmail:configJSON.errorEmailNotValid\n      })\n\n      return false;\n    }\n\n    const header = {\n      \"Content-Type\": configJSON.loginApiContentType,\n    };\n\n    const attrs = {\n      email: this.state.email,\n    };\n\n    const data = {\n      type: \"email_account\",\n      attributes: attrs,\n    };\n\n    const httpBody = {\n      data: data,\n    };\n    // console.log('httpBody',httpBody)\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage) \n    );\n\n    this.apiEmailCallId = requestMessage.messageId;\n    console.log(\"apiEmailCallId\",  this.apiEmailCallId);\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.EmailLoginAPiEndPoint\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(header)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestBodyMessage),\n      JSON.stringify(httpBody)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.loginAPiMethod\n    );\n\n    // console.log(\n    //   \"requestMessage.id, requestMessage\",\n    //   requestMessage.id,\n    //   requestMessage\n    // );\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n\n    return true;\n  }\n\n  handleDomainSelection() : Boolean {\n    // console.log(\"API HIT\");\n    // console.log('this.state',this.state)\n    if (\n      this.state.selectedDomain === '' ||\n      isEmpty(this.state.selectedDomain)\n    ) {\n      alert('Domain is not Selected')\n      return false;\n    }\n    else{\n      localStorage.setItem('selectedDomain',JSON.stringify(this.state.selectedDomain));\n      //@ts-ignore\n      this.props?.history.push('email-account-Login-welcome')\n      return true;\n    }\n  }\n\n  callGetValidationApi() {\n    const headers = {\n      \"Content-Type\": configJSON.validationApiContentType,\n    };\n\n    const getValidationsMsg = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n    this.validationApiCallId = getValidationsMsg.messageId;\n\n    getValidationsMsg.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.urlGetValidations\n    );\n\n    getValidationsMsg.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(headers)\n    );\n    getValidationsMsg.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.validationApiMethodType\n    );\n    runEngine.sendMessage(getValidationsMsg.id, getValidationsMsg);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}