{"ast":null,"code":"var _jsxFileName = \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/packages/components/src/NativeWebRouteWrapper/index.js\";\nimport { Route } from \"react-router-dom\";\nimport { ModalRoute } from \"react-router-modal\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"react-router-modal/css/react-router-modal.css\";\n\nfunction Wrapper({\n  element,\n  history,\n  match,\n  routeMap,\n  closeModal\n}) {\n  const navigate = (to, params) => {\n    let url = routeMap[to].path; // replace params ids in the url with actual values\n\n    if (params && Object.keys(params).length > 0) {\n      Object.keys(params).forEach(param => {\n        const re = RegExp(\":\".concat(param, \"\\\\??\")); // eslint-disable-line no-useless-escape\n\n        url = url.replace(re, escape(params[param]));\n      });\n    } // removing empty params from url - every string between /: and ?\n\n\n    url = url.replace(/\\/:(.*?)(?=\\/|$)/g, \"\"); // if the route is not a modal\n\n    if (!routeMap[to].modal) {\n      history.push(url); // if the route is a modal\n    } else {\n      // checking if the url ends with a slash or not\n      const slash = /\\/$/.test(match.url) ? \"\" : \"/\"; // current url in the browser + slash + modal url with parameters\n\n      url = match.url + slash + url; // removing the */ from the url\n\n      url = url.replace(/\\*\\/?/g, \"\");\n      history.push(url);\n    }\n  };\n\n  const getParam = (param, alternative) => {\n    return match.params[param] || alternative;\n  };\n\n  const goBack = () => {\n    history.goBack();\n  };\n\n  return React.cloneElement(element, {\n    navigation: {\n      navigate,\n      getParam,\n      goBack\n    },\n    closeModal\n  });\n}\n\nWrapper.propTypes = {\n  element: PropTypes.element,\n  history: PropTypes.object,\n  routeMap: PropTypes.object,\n  closeModal: PropTypes.func,\n  match: PropTypes.object\n};\n\nconst WebRoutesGenerator = ({\n  routeMap\n}) => {\n  return Object.keys(routeMap).map(route => {\n    const currentRoute = routeMap[route];\n    const Component = currentRoute.component;\n\n    if (currentRoute.modal) {\n      return /*#__PURE__*/React.createElement(ModalRoute, {\n        key: currentRoute.path,\n        path: currentRoute.path,\n        component: props => /*#__PURE__*/React.createElement(Wrapper, Object.assign({\n          element: /*#__PURE__*/React.createElement(Component, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 31\n            }\n          })\n        }, props, {\n          routeMap: routeMap,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }\n        })),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 9\n        }\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(Route, {\n        key: currentRoute.path,\n        path: currentRoute.path,\n        exact: currentRoute.exact,\n        render: props => /*#__PURE__*/React.createElement(Wrapper, Object.assign({\n          element: /*#__PURE__*/React.createElement(Component, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 31\n            }\n          })\n        }, props, {\n          routeMap: routeMap,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }\n        })),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 9\n        }\n      });\n    }\n  });\n};\n\nWebRoutesGenerator.propTypes = {\n  routeMap: PropTypes.object\n};\nexport default WebRoutesGenerator;","map":{"version":3,"sources":["/home/lp-greenapex/gargi/okydpim-36944-react-native/src/packages/components/src/NativeWebRouteWrapper/index.js"],"names":["Route","ModalRoute","React","PropTypes","Wrapper","element","history","match","routeMap","closeModal","navigate","to","params","url","path","Object","keys","length","forEach","param","re","RegExp","replace","escape","modal","push","slash","test","getParam","alternative","goBack","cloneElement","navigation","propTypes","object","func","WebRoutesGenerator","map","route","currentRoute","Component","component","props","exact"],"mappings":"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","sourcesContent":["import { Route } from \"react-router-dom\";\nimport { ModalRoute } from \"react-router-modal\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"react-router-modal/css/react-router-modal.css\";\n\nfunction Wrapper({ element, history, match, routeMap, closeModal }) {\n  const navigate = (to, params) => {\n    let url = routeMap[to].path;\n    // replace params ids in the url with actual values\n    if (params && Object.keys(params).length > 0) {\n      Object.keys(params).forEach((param) => {\n        const re = RegExp(`\\:${param}\\\\??`); // eslint-disable-line no-useless-escape\n        url = url.replace(re, escape(params[param]));\n      });\n    }\n    // removing empty params from url - every string between /: and ?\n    url = url.replace(/\\/:(.*?)(?=\\/|$)/g, \"\");\n    // if the route is not a modal\n    if (!routeMap[to].modal) {\n      history.push(url);\n      // if the route is a modal\n    } else {\n      // checking if the url ends with a slash or not\n      const slash = /\\/$/.test(match.url) ? \"\" : \"/\";\n      // current url in the browser + slash + modal url with parameters\n      url = match.url + slash + url;\n      // removing the */ from the url\n      url = url.replace(/\\*\\/?/g, \"\");\n      history.push(url);\n    }\n  };\n\n  const getParam = (param, alternative) => {\n    return match.params[param] || alternative;\n  };\n\n  const goBack = () => {\n    history.goBack();\n  };\n\n  return React.cloneElement(element, {\n    navigation: { navigate, getParam, goBack },\n    closeModal,\n  });\n}\n\nWrapper.propTypes = {\n  element: PropTypes.element,\n  history: PropTypes.object,\n  routeMap: PropTypes.object,\n  closeModal: PropTypes.func,\n  match: PropTypes.object,\n};\n\nconst WebRoutesGenerator = ({ routeMap }) => {\n  return Object.keys(routeMap).map((route) => {\n    const currentRoute = routeMap[route];\n    const Component = currentRoute.component;\n    if (currentRoute.modal) {\n      return (\n        <ModalRoute\n          key={currentRoute.path}\n          path={currentRoute.path}\n          component={(props) => (\n            <Wrapper element={<Component />} {...props} routeMap={routeMap} />\n          )}\n        />\n      );\n    } else {\n      return (\n        <Route\n          key={currentRoute.path}\n          path={currentRoute.path}\n          exact={currentRoute.exact}\n          render={(props) => (\n            <Wrapper element={<Component />} {...props} routeMap={routeMap} />\n          )}\n        />\n      );\n    }\n  });\n};\n\nWebRoutesGenerator.propTypes = {\n  routeMap: PropTypes.object,\n};\n\nexport default WebRoutesGenerator;\n"]},"metadata":{},"sourceType":"module"}