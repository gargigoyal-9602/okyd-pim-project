{"ast":null,"code":"import _regeneratorRuntime from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport MessageEnum, { getName } from \"../../../framework/src/Messages/MessageEnum\";\nimport { runEngine } from \"../../../framework/src/RunEngine\"; // Customizable Area Start\n// Customizable Area End\n\nexport const configJSON = require(\"./config.js\");\nexport default class DashboardController extends BlockComponent {\n  constructor(props) {\n    super(props);\n    this.userDashboardApiCallId = \"\";\n\n    this.getDashboardDetails = () => {\n      const headers = {\n        \"Content-Type\": configJSON.dashboarContentType,\n        token: window.localStorage.getItem(\"auth\")\n      };\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      this.userDashboardApiCallId = requestMessage.messageId;\n      console.log(\"this.userProfileApiCallId\", this.userDashboardApiCallId);\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.endPointApiGetdashboardURL);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.dashboarApiMethodType);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    };\n\n    this.openSnackBarHandler = (type, message) => {\n      this.setState({\n        snackBar: {\n          show: true,\n          message: message,\n          type\n        }\n      });\n    };\n\n    this.onMenuToggle = () => {\n      this.setState({\n        menuCollapsed: !this.state.menuCollapsed\n      });\n    };\n\n    this.receive = this.receive.bind(this);\n    this.subScribedMessages = [getName(MessageEnum.AccoutLoginSuccess), getName(MessageEnum.RestAPIResponceMessage)];\n    this.state = {\n      dashboardData: [],\n      errorMsg: \"\",\n      token: \"\",\n      loading: false,\n      user_type: configJSON.subscriber,\n      menuCollapsed: false,\n      searchText: \"\",\n      message: \"\",\n      auth: \"\",\n      snackBar: {\n        show: false\n      }\n    };\n    runEngine.attachBuildingBlock(this, this.subScribedMessages);\n  }\n\n  componentDidMount() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _this.getDashboardDetails();\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  }\n\n  receive(from, message) {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var responseJson, apiRequestCallId, errorReponse, errors, _this2$props;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            // Customizable Area Start\n            runEngine.debugLog(\"Message Recived\", message);\n\n            if (getName(MessageEnum.RestAPIResponceMessage) === message.id) {\n              responseJson = message.getData(getName(MessageEnum.RestAPIResponceSuccessMessage));\n\n              if (responseJson && !responseJson.errors) {\n                apiRequestCallId = message.getData(getName(MessageEnum.RestAPIResponceDataMessage));\n\n                if (apiRequestCallId != null) {\n                  if (apiRequestCallId === _this2.userDashboardApiCallId) {\n                    _this2.setState({\n                      message: responseJson.message\n                    });\n                  }\n                }\n              } else {\n                errorReponse = message.getData(getName(MessageEnum.RestAPIResponceErrorMessage));\n\n                _this2.parseApiCatchErrorResponse(errorReponse);\n\n                errors = responseJson.errors;\n\n                _this2.parseApiCatchErrorResponse(errorReponse);\n\n                if (errors[0].token === 'Invalid token' || errors[0].token === 'Token has Expired') {\n                  AsyncStorage.setItem(\"auth\", \"\"); //@ts-ignore\n\n                  (_this2$props = _this2.props) === null || _this2$props === void 0 ? void 0 : _this2$props.history.push(\"/login\");\n                } else errors[0].message;\n\n                _this2.openSnackBarHandler('error', errors[0].message);\n              }\n            }\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }))();\n  } // Handler dashboard Details\n\n\n}","map":{"version":3,"sources":["/home/lp-greenapex/gargi/okydpim-36944-react-native/src/packages/blocks/dashboard/src/DashboardControllerNew.web.tsx"],"names":["Message","BlockComponent","MessageEnum","getName","runEngine","configJSON","require","DashboardController","constructor","props","userDashboardApiCallId","getDashboardDetails","headers","dashboarContentType","token","window","localStorage","getItem","requestMessage","RestAPIRequestMessage","messageId","console","log","addData","RestAPIResponceEndPointMessage","endPointApiGetdashboardURL","RestAPIRequestHeaderMessage","JSON","stringify","RestAPIRequestMethodMessage","dashboarApiMethodType","sendMessage","id","openSnackBarHandler","type","message","setState","snackBar","show","onMenuToggle","menuCollapsed","state","receive","bind","subScribedMessages","AccoutLoginSuccess","RestAPIResponceMessage","dashboardData","errorMsg","loading","user_type","subscriber","searchText","auth","attachBuildingBlock","componentDidMount","from","debugLog","responseJson","getData","RestAPIResponceSuccessMessage","errors","apiRequestCallId","RestAPIResponceDataMessage","errorReponse","RestAPIResponceErrorMessage","parseApiCatchErrorResponse","AsyncStorage","setItem","history","push"],"mappings":"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","sourcesContent":["import { AsyncStorage } from \"react-native\";\nimport { IBlock } from \"../../../framework/src/IBlock\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport MessageEnum, {\n  getName,\n} from \"../../../framework/src/Messages/MessageEnum\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\n\n// Customizable Area Start\n// Customizable Area End\n\nexport const configJSON = require(\"./config.js\");\n\nexport interface Props {\n  navigation: any;\n  id: string;\n  // Customizable Area Start\n  // Customizable Area End\n}\ninterface S {\n  // Customizable Area Start\n  dashboardData: any;\n  token: string;\n  errorMsg: string;\n  loading: boolean;\n  user_type: string;\n  menuCollapsed: boolean;\n  searchText: string | null | undefined;\n  message: string;\n  snackBar: {\n    show: boolean;\n    message?: string;\n    type?: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\n  };\n  auth: string | null | undefined;\n  // Customizable Area End\n}\ninterface SS {\n  id: any;\n}\n\nexport default class DashboardController extends BlockComponent<Props, S, SS> {\n  userDashboardApiCallId: string = \"\";\n\n  constructor(props: Props) {\n    super(props);\n    this.receive = this.receive.bind(this);\n\n    this.subScribedMessages = [\n      getName(MessageEnum.AccoutLoginSuccess),\n      getName(MessageEnum.RestAPIResponceMessage),\n    ];\n\n    this.state = {\n      dashboardData: [],\n      errorMsg: \"\",\n      token: \"\",\n      loading: false,\n      user_type: configJSON.subscriber,\n      menuCollapsed: false,\n      searchText: \"\",\n      message: \"\",\n      auth: \"\",\n      snackBar: {\n        show: false,\n      },\n    };\n    runEngine.attachBuildingBlock(this as IBlock, this.subScribedMessages);\n  }\n\n  async componentDidMount() {\n    this.getDashboardDetails();\n  }\n\n  async receive(from: string, message: Message) {\n    // Customizable Area Start\n    runEngine.debugLog(\"Message Recived\", message);\n\n    if (getName(MessageEnum.RestAPIResponceMessage) === message.id) {\n      var responseJson = message.getData(\n        getName(MessageEnum.RestAPIResponceSuccessMessage)\n      );\n      if (responseJson && !responseJson.errors) {\n        const apiRequestCallId = message.getData(\n          getName(MessageEnum.RestAPIResponceDataMessage)\n        );\n\n        if (apiRequestCallId != null) {\n          if (apiRequestCallId === this.userDashboardApiCallId) {\n            this.setState({\n              message: responseJson.message,\n            });\n          }\n        }\n      } else {\n        var errorReponse = message.getData(\n          getName(MessageEnum.RestAPIResponceErrorMessage)\n        );\n        this.parseApiCatchErrorResponse(errorReponse);\n        const errors = responseJson.errors;\n        this.parseApiCatchErrorResponse(errorReponse);\n        if(errors[0].token === 'Invalid token' ||errors[0].token ===  'Token has Expired') {\n          AsyncStorage.setItem(\"auth\", \"\");\n          //@ts-ignore\n          this.props?.history.push(\"/login\");\n        } \n        else(errors[0].message)\n          this.openSnackBarHandler('error', errors[0].message);\n      }\n    }\n  }\n\n  // Handler dashboard Details\n  getDashboardDetails = (): boolean => {\n    const headers = {\n      \"Content-Type\": configJSON.dashboarContentType,\n      token: window.localStorage.getItem(\"auth\"),\n    };\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n    this.userDashboardApiCallId = requestMessage.messageId;\n    console.log(\"this.userProfileApiCallId\", this.userDashboardApiCallId);\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.endPointApiGetdashboardURL\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(headers)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.dashboarApiMethodType\n    );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n\n    return true;\n  };\n\n  // Open View Details Modal\n  openSnackBarHandler = (type: \"success\" | \"info\" | \"warning\" | \"error\" | undefined,  message: string): void => {\n    this.setState({ snackBar: {\n      show: true,\n      message: message,\n      type\n    } });\n  };\n\n  onMenuToggle = () => {\n    this.setState({\n      menuCollapsed: !this.state.menuCollapsed,\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}