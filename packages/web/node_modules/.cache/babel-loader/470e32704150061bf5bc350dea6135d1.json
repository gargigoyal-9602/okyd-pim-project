{"ast":null,"code":"import _regeneratorRuntime from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport MessageEnum, { getName } from '../Messages/MessageEnum';\nimport { runEngine } from '../RunEngine';\nimport { Message } from '../Message';\nimport { Block } from '../Block';\nimport StorageProvider from '../StorageProvider';\nexport default class UserAccountManagerBlock extends Block {\n  constructor() {\n    super();\n    this.userCredsKey = 'saveUserInfo';\n    this.userName = void 0;\n    this.password = void 0;\n    this.phoneNumber = void 0;\n    this.countryCode = void 0;\n    this.loadCreds();\n    runEngine.attachBuildingBlock(this, [getName(MessageEnum.LoginSuccessMessage), getName(MessageEnum.LoginFaliureMessage), getName(MessageEnum.RequestUserCredentials)]);\n  }\n\n  static getInstance() {\n    if (!UserAccountManagerBlock.instance) {\n      UserAccountManagerBlock.instance = new UserAccountManagerBlock();\n    }\n\n    return UserAccountManagerBlock.instance;\n  }\n\n  loadCreds() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var storedCreds, json;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return StorageProvider.get(_this.userCredsKey);\n\n          case 2:\n            storedCreds = _context.sent;\n\n            if (storedCreds) {\n              try {\n                json = JSON.parse(storedCreds);\n                _this.userName = json.id;\n                _this.password = json.password;\n                _this.countryCode = json.countrycode;\n              } catch (_unused) {}\n            }\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  }\n\n  receive(from, message) {\n    if (getName(MessageEnum.RequestUserCredentials) === message.id) {\n      let message = new Message(getName(MessageEnum.ReciveUserCredentials));\n      message.addData(getName(MessageEnum.LoginUserName), this.userName);\n      message.addData(getName(MessageEnum.LoginPassword), this.password);\n      message.addData(getName(MessageEnum.LoginCountryCode), this.countryCode);\n      this.send(message);\n    } else if (getName(MessageEnum.LoginSuccessMessage) === message.id) {\n      let userName = message.getData(getName(MessageEnum.LoginUserName));\n      let password = message.getData(getName(MessageEnum.LoginPassword));\n      let countryCode = message.getData(getName(MessageEnum.LoginCountryCode));\n      let isRememberMe = message.getData(getName(MessageEnum.LoginIsRememberMe));\n      this.saveUserData(countryCode, userName, password, isRememberMe);\n    } else if (getName(MessageEnum.LoginFaliureMessage) === message.id) {\n      this.clearUserData();\n    }\n  }\n\n  saveUserData(countryCode, userName, password, isRememberMe) {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var userInfo;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            if (isRememberMe) {\n              _context2.next = 4;\n              break;\n            }\n\n            _this2.clearUserData();\n\n            _context2.next = 15;\n            break;\n\n          case 4:\n            _context2.prev = 4;\n            userInfo = {\n              id: userName,\n              countrycode: countryCode,\n              password: password\n            };\n            _context2.next = 8;\n            return StorageProvider.set(_this2.userCredsKey, JSON.stringify(userInfo));\n\n          case 8:\n            _this2.countryCode = countryCode;\n            _this2.userName = userName;\n            _this2.password = password;\n            _context2.next = 15;\n            break;\n\n          case 13:\n            _context2.prev = 13;\n            _context2.t0 = _context2[\"catch\"](4);\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2, null, [[4, 13]]);\n    }))();\n  }\n\n  clearUserData() {\n    var _this3 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return StorageProvider.set(_this3.userCredsKey, '');\n\n          case 2:\n            _this3.userName = null;\n            _this3.password = null;\n            _this3.countryCode = null;\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    }))();\n  }\n\n}\nUserAccountManagerBlock.instance = void 0;","map":{"version":3,"sources":["/home/lp-greenapex/gargi/okydpim-36944-react-native/src/packages/framework/src/Blocks/UserAccountManagerBlock.tsx"],"names":["MessageEnum","getName","runEngine","Message","Block","StorageProvider","UserAccountManagerBlock","constructor","userCredsKey","userName","password","phoneNumber","countryCode","loadCreds","attachBuildingBlock","LoginSuccessMessage","LoginFaliureMessage","RequestUserCredentials","getInstance","instance","get","storedCreds","json","JSON","parse","id","countrycode","receive","from","message","ReciveUserCredentials","addData","LoginUserName","LoginPassword","LoginCountryCode","send","getData","isRememberMe","LoginIsRememberMe","saveUserData","clearUserData","userInfo","set","stringify"],"mappings":"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","sourcesContent":["import MessageEnum, { getName } from '../Messages/MessageEnum';\nimport { IBlock } from '../IBlock';\nimport { runEngine } from '../RunEngine';\nimport { Message } from '../Message';\nimport { Block } from '../Block';\nimport StorageProvider from '../StorageProvider';\n\nexport default class UserAccountManagerBlock extends Block {\n  private static instance: UserAccountManagerBlock;\n\n  userCredsKey: string = 'saveUserInfo';\n\n  userName: null;\n  password: null;\n  phoneNumber: null;\n  countryCode: null;\n\n  private constructor() {\n    super();\n\n    this.loadCreds();\n\n    runEngine.attachBuildingBlock(this as IBlock, [\n      getName(MessageEnum.LoginSuccessMessage),\n      getName(MessageEnum.LoginFaliureMessage),\n      getName(MessageEnum.RequestUserCredentials)\n    ]);\n  }\n\n  static getInstance(): UserAccountManagerBlock {\n    if (!UserAccountManagerBlock.instance) {\n      UserAccountManagerBlock.instance = new UserAccountManagerBlock();\n    }\n    return UserAccountManagerBlock.instance;\n  }\n\n  async loadCreds() {\n    let storedCreds: any = await StorageProvider.get(this.userCredsKey);\n\n    if (storedCreds) {\n      try {\n        const json = JSON.parse(storedCreds);\n        this.userName = json.id;\n        this.password = json.password;\n        this.countryCode = json.countrycode;\n      } catch {}\n    }\n  }\n\n  receive(from: string, message: Message) {\n    if (getName(MessageEnum.RequestUserCredentials) === message.id) {\n      let message = new Message(getName(MessageEnum.ReciveUserCredentials));\n      message.addData(getName(MessageEnum.LoginUserName), this.userName);\n      message.addData(getName(MessageEnum.LoginPassword), this.password);\n      message.addData(getName(MessageEnum.LoginCountryCode), this.countryCode);\n      this.send(message);\n    } else if (getName(MessageEnum.LoginSuccessMessage) === message.id) {\n      let userName = message.getData(getName(MessageEnum.LoginUserName));\n      let password = message.getData(getName(MessageEnum.LoginPassword));\n      let countryCode = message.getData(getName(MessageEnum.LoginCountryCode));\n      let isRememberMe = message.getData(\n        getName(MessageEnum.LoginIsRememberMe)\n      );\n      this.saveUserData(countryCode, userName, password, isRememberMe);\n    } else if (getName(MessageEnum.LoginFaliureMessage) === message.id) {\n      this.clearUserData();\n    }\n  }\n\n  async saveUserData(\n    countryCode: any,\n    userName: any,\n    password: any,\n    isRememberMe: any\n  ) {\n    if (!isRememberMe) {\n      this.clearUserData();\n    } else {\n      try {\n        const userInfo = {\n          id: userName,\n          countrycode: countryCode,\n          password: password\n        };\n        await StorageProvider.set(this.userCredsKey, JSON.stringify(userInfo));\n\n        this.countryCode = countryCode;\n        this.userName = userName;\n        this.password = password;\n      } catch {}\n    }\n  }\n\n  async clearUserData() {\n    await StorageProvider.set(this.userCredsKey, '');\n    this.userName = null;\n    this.password = null;\n    this.countryCode = null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}