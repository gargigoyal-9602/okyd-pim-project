{"ast":null,"code":"import _regeneratorRuntime from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/packages/blocks/country-code-selector/src/CountryCodeSelector.web.tsx\";\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Select from \"react-select\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nimport MessageEnum, { getName } from \"../../../framework/src/Messages/MessageEnum\";\n\nconst configJSON = require(\"./config\");\n\nexport default class CountryCodeSelector extends BlockComponent {\n  constructor(props) {\n    super(props);\n    this.countryCodeApiCallId = void 0;\n\n    this.countryCodesToDropDown = data => {\n      return data.map(item => ({\n        label: \" \".concat(item.attributes.emoji_flag, \" \").concat(item.attributes.name, \" (\").concat(item.id, \") +\").concat(item.attributes.country_code),\n        value: item.attributes.country_code\n      }));\n    };\n\n    this.makeRemoteRequest = () => {\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      this.countryCodeApiCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.apiEndPointGetCountryCodes);\n      const header = {\n        \"Content-Type\": configJSON.contentTypeApiGetCountryCodes\n      };\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(header));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiGetCountryCodesType);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n    };\n\n    this.subScribedMessages = [getName(MessageEnum.RestAPIResponceMessage)];\n    this.receive = this.receive.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    runEngine.attachBuildingBlock(this, this.subScribedMessages);\n    this.state = {\n      dataSource: [],\n      countryCodeSelected: \"\",\n      mobileNo: \"\",\n      token: \"\",\n      placeHolder: configJSON.countryPlaceHolder,\n      disable: this.props.disable,\n      label: null\n    };\n  }\n\n  render() {\n    var index = -1;\n    var iIndex = -1;\n    this.state.dataSource.forEach(item => {\n      iIndex += 1;\n\n      if (item.value === this.props.value) {\n        index = iIndex;\n        return;\n      }\n    });\n    return /*#__PURE__*/React.createElement(View, {\n      style: {\n        marginBottom: 10,\n        zIndex: 99\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Select, {\n      style: this.props.style,\n      options: this.state.dataSource,\n      placeholder: this.state.placeHolder,\n      onChange: this.handleChange,\n      value: index >= 0 ? this.state.dataSource[index] : null,\n      isDisabled: this.state.disable,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  handleChange(item) {\n    this.setState({\n      label: item.label\n    });\n    const msg = new Message(getName(MessageEnum.CountryCodeMessage));\n    msg.addData(getName(MessageEnum.CountyCodeDataMessage), item.value);\n    runEngine.sendMessage(getName(MessageEnum.CountryCodeMessage), msg);\n  }\n\n  componentDidMount() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _this.makeRemoteRequest();\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  }\n\n  receive(from, message) {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var responseJson, errorReponse;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            runEngine.debugLog(\"Country Code\", message);\n\n            if (getName(MessageEnum.RestAPIResponceMessage) === message.id && _this2.countryCodeApiCallId != null && _this2.countryCodeApiCallId === message.getData(getName(MessageEnum.RestAPIResponceDataMessage))) {\n              responseJson = message.getData(getName(MessageEnum.RestAPIResponceSuccessMessage)); //\n\n              if (responseJson && !responseJson.errors) {\n                _this2.setState({\n                  dataSource: _this2.countryCodesToDropDown(responseJson.data)\n                });\n              } else {\n                errorReponse = message.getData(getName(MessageEnum.RestAPIResponceErrorMessage));\n\n                _this2.parseApiCatchErrorResponse(errorReponse);\n              }\n            }\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }))();\n  }\n\n}","map":{"version":3,"sources":["/home/lp-greenapex/gargi/okydpim-36944-react-native/src/packages/blocks/country-code-selector/src/CountryCodeSelector.web.tsx"],"names":["React","Select","Message","BlockComponent","runEngine","MessageEnum","getName","configJSON","require","CountryCodeSelector","constructor","props","countryCodeApiCallId","countryCodesToDropDown","data","map","item","label","attributes","emoji_flag","name","id","country_code","value","makeRemoteRequest","requestMessage","RestAPIRequestMessage","messageId","addData","RestAPIResponceEndPointMessage","apiEndPointGetCountryCodes","header","contentTypeApiGetCountryCodes","RestAPIRequestHeaderMessage","JSON","stringify","RestAPIRequestMethodMessage","apiGetCountryCodesType","sendMessage","subScribedMessages","RestAPIResponceMessage","receive","bind","handleChange","attachBuildingBlock","state","dataSource","countryCodeSelected","mobileNo","token","placeHolder","countryPlaceHolder","disable","render","index","iIndex","forEach","marginBottom","zIndex","style","setState","msg","CountryCodeMessage","CountyCodeDataMessage","componentDidMount","from","message","debugLog","getData","RestAPIResponceDataMessage","responseJson","RestAPIResponceSuccessMessage","errors","errorReponse","RestAPIResponceErrorMessage","parseApiCatchErrorResponse"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAASC,OAAT,QAAwB,gCAAxB;AACA,SAASC,cAAT,QAA+B,uCAA/B;AACA,SAASC,SAAT,QAA0B,kCAA1B;AACA,OAAOC,WAAP,IACEC,OADF,QAEO,6CAFP;;AAIA,MAAMC,UAAU,GAAGC,OAAO,CAAC,UAAD,CAA1B;;AAuBA,eAAe,MAAMC,mBAAN,SAAkCN,cAAlC,CAA+D;AAG5EO,EAAAA,WAAW,CAACC,KAAD,EAAe;AACxB,UAAMA,KAAN;AADwB,SAF1BC,oBAE0B;;AAAA,SAwD1BC,sBAxD0B,GAwDAC,IAAD,IAAe;AACtC,aAAOA,IAAI,CAACC,GAAL,CAAUC,IAAD,KAAgB;AAC9BC,QAAAA,KAAK,aAAMD,IAAI,CAACE,UAAL,CAAgBC,UAAtB,cAAoCH,IAAI,CAACE,UAAL,CAAgBE,IAApD,eACHJ,IAAI,CAACK,EADF,gBAECL,IAAI,CAACE,UAAL,CAAgBI,YAFjB,CADyB;AAI9BC,QAAAA,KAAK,EAAEP,IAAI,CAACE,UAAL,CAAgBI;AAJO,OAAhB,CAAT,CAAP;AAMD,KA/DyB;;AAAA,SA6F1BE,iBA7F0B,GA6FN,MAAM;AACxB,YAAMC,cAAc,GAAG,IAAIvB,OAAJ,CACrBI,OAAO,CAACD,WAAW,CAACqB,qBAAb,CADc,CAAvB;AAGA,WAAKd,oBAAL,GAA4Ba,cAAc,CAACE,SAA3C;AACAF,MAAAA,cAAc,CAACG,OAAf,CACEtB,OAAO,CAACD,WAAW,CAACwB,8BAAb,CADT,EAEEtB,UAAU,CAACuB,0BAFb;AAKA,YAAMC,MAAM,GAAG;AACb,wBAAgBxB,UAAU,CAACyB;AADd,OAAf;AAIAP,MAAAA,cAAc,CAACG,OAAf,CACEtB,OAAO,CAACD,WAAW,CAAC4B,2BAAb,CADT,EAEEC,IAAI,CAACC,SAAL,CAAeJ,MAAf,CAFF;AAKAN,MAAAA,cAAc,CAACG,OAAf,CACEtB,OAAO,CAACD,WAAW,CAAC+B,2BAAb,CADT,EAEE7B,UAAU,CAAC8B,sBAFb;AAKAjC,MAAAA,SAAS,CAACkC,WAAV,CAAsBb,cAAc,CAACJ,EAArC,EAAyCI,cAAzC;AACD,KAtHyB;;AAGxB,SAAKc,kBAAL,GAA0B,CAACjC,OAAO,CAACD,WAAW,CAACmC,sBAAb,CAAR,CAA1B;AACA,SAAKC,OAAL,GAAe,KAAKA,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAf;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAApB;AACAtC,IAAAA,SAAS,CAACwC,mBAAV,CAA8B,IAA9B,EAAoC,KAAKL,kBAAzC;AAEA,SAAKM,KAAL,GAAa;AACXC,MAAAA,UAAU,EAAE,EADD;AAEXC,MAAAA,mBAAmB,EAAE,EAFV;AAGXC,MAAAA,QAAQ,EAAE,EAHC;AAIXC,MAAAA,KAAK,EAAE,EAJI;AAKXC,MAAAA,WAAW,EAAE3C,UAAU,CAAC4C,kBALb;AAMXC,MAAAA,OAAO,EAAE,KAAKzC,KAAL,CAAWyC,OANT;AAOXnC,MAAAA,KAAK,EAAE;AAPI,KAAb;AASD;;AAEDoC,EAAAA,MAAM,GAAG;AACP,QAAIC,KAAK,GAAG,CAAC,CAAb;AACA,QAAIC,MAAM,GAAG,CAAC,CAAd;AAEA,SAAKV,KAAL,CAAWC,UAAX,CAAsBU,OAAtB,CAA8BxC,IAAI,IAAI;AACpCuC,MAAAA,MAAM,IAAI,CAAV;;AACA,UAAIvC,IAAI,CAACO,KAAL,KAAe,KAAKZ,KAAL,CAAWY,KAA9B,EAAqC;AACnC+B,QAAAA,KAAK,GAAGC,MAAR;AACA;AACD;AACF,KAND;AAQA,wBACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAEE,QAAAA,YAAY,EAAE,EAAhB;AAAoBC,QAAAA,MAAM,EAAE;AAA5B,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AACE,MAAA,KAAK,EAAE,KAAK/C,KAAL,CAAWgD,KADpB;AAEE,MAAA,OAAO,EAAE,KAAKd,KAAL,CAAWC,UAFtB;AAGE,MAAA,WAAW,EAAE,KAAKD,KAAL,CAAWK,WAH1B;AAIE,MAAA,QAAQ,EAAE,KAAKP,YAJjB;AAKE,MAAA,KAAK,EAAEW,KAAK,IAAI,CAAT,GAAa,KAAKT,KAAL,CAAWC,UAAX,CAAsBQ,KAAtB,CAAb,GAA4C,IALrD;AAME,MAAA,UAAU,EAAE,KAAKT,KAAL,CAAWO,OANzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAYD;;AAEDT,EAAAA,YAAY,CAAC3B,IAAD,EAAY;AACtB,SAAK4C,QAAL,CAAc;AAAE3C,MAAAA,KAAK,EAAED,IAAI,CAACC;AAAd,KAAd;AACA,UAAM4C,GAAG,GAAG,IAAI3D,OAAJ,CAAYI,OAAO,CAACD,WAAW,CAACyD,kBAAb,CAAnB,CAAZ;AACAD,IAAAA,GAAG,CAACjC,OAAJ,CAAYtB,OAAO,CAACD,WAAW,CAAC0D,qBAAb,CAAnB,EAAwD/C,IAAI,CAACO,KAA7D;AACAnB,IAAAA,SAAS,CAACkC,WAAV,CAAsBhC,OAAO,CAACD,WAAW,CAACyD,kBAAb,CAA7B,EAA+DD,GAA/D;AACD;;AAEKG,EAAAA,iBAAN,GAA0B;AAAA;;AAAA;AAAA;AAAA;AAAA;AACxB,YAAA,KAAI,CAACxC,iBAAL;;AADwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEzB;;AAWKiB,EAAAA,OAAN,CAAcwB,IAAd,EAA4BC,OAA5B,EAA8C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAC5C9D,YAAAA,SAAS,CAAC+D,QAAV,CAAmB,cAAnB,EAAmCD,OAAnC;;AAEA,gBACE5D,OAAO,CAACD,WAAW,CAACmC,sBAAb,CAAP,KAAgD0B,OAAO,CAAC7C,EAAxD,IACA,MAAI,CAACT,oBAAL,IAA6B,IAD7B,IAEA,MAAI,CAACA,oBAAL,KACEsD,OAAO,CAACE,OAAR,CAAgB9D,OAAO,CAACD,WAAW,CAACgE,0BAAb,CAAvB,CAJJ,EAKE;AACIC,cAAAA,YADJ,GACmBJ,OAAO,CAACE,OAAR,CACjB9D,OAAO,CAACD,WAAW,CAACkE,6BAAb,CADU,CADnB,EAKA;;AACA,kBAAID,YAAY,IAAI,CAACA,YAAY,CAACE,MAAlC,EAA0C;AACxC,gBAAA,MAAI,CAACZ,QAAL,CAAc;AACZd,kBAAAA,UAAU,EAAE,MAAI,CAACjC,sBAAL,CAA4ByD,YAAY,CAACxD,IAAzC;AADA,iBAAd;AAGD,eAJD,MAIO;AACD2D,gBAAAA,YADC,GACcP,OAAO,CAACE,OAAR,CACjB9D,OAAO,CAACD,WAAW,CAACqE,2BAAb,CADU,CADd;;AAKL,gBAAA,MAAI,CAACC,0BAAL,CAAgCF,YAAhC;AACD;AACF;;AAzB2C;AAAA;AAAA;AAAA;AAAA;AAAA;AA0B7C;;AA9F2E","sourcesContent":["import React from \"react\";\nimport { View } from \"react-native\";\nimport Select from \"react-select\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nimport MessageEnum, {\n  getName\n} from \"../../../framework/src/Messages/MessageEnum\";\n\nconst configJSON = require(\"./config\");\n\ninterface Props {\n  navigation: any;\n  style: any;\n  id: string;\n  disable: boolean;\n  allowPropChange: boolean;\n  value: string;\n}\n\ninterface S {\n  dataSource: any[];\n  countryCodeSelected: string;\n  mobileNo: string;\n  token: string;\n  placeHolder: string;\n  disable: boolean;\n  label: any;\n}\n\ninterface SS {}\n\nexport default class CountryCodeSelector extends BlockComponent<Props, S, SS> {\n  countryCodeApiCallId: any;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.subScribedMessages = [getName(MessageEnum.RestAPIResponceMessage)];\n    this.receive = this.receive.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    runEngine.attachBuildingBlock(this, this.subScribedMessages);\n\n    this.state = {\n      dataSource: [],\n      countryCodeSelected: \"\",\n      mobileNo: \"\",\n      token: \"\",\n      placeHolder: configJSON.countryPlaceHolder,\n      disable: this.props.disable,\n      label: null\n    };\n  }\n\n  render() {\n    var index = -1;\n    var iIndex = -1;\n\n    this.state.dataSource.forEach(item => {\n      iIndex += 1;\n      if (item.value === this.props.value) {\n        index = iIndex;\n        return;\n      }\n    });\n\n    return (\n      <View style={{ marginBottom: 10, zIndex: 99 }}>\n        <Select\n          style={this.props.style}\n          options={this.state.dataSource}\n          placeholder={this.state.placeHolder}\n          onChange={this.handleChange}\n          value={index >= 0 ? this.state.dataSource[index] : null}\n          isDisabled={this.state.disable}\n        />\n      </View>\n    );\n  }\n\n  handleChange(item: any) {\n    this.setState({ label: item.label });\n    const msg = new Message(getName(MessageEnum.CountryCodeMessage));\n    msg.addData(getName(MessageEnum.CountyCodeDataMessage), item.value);\n    runEngine.sendMessage(getName(MessageEnum.CountryCodeMessage), msg);\n  }\n\n  async componentDidMount() {\n    this.makeRemoteRequest();\n  }\n\n  countryCodesToDropDown = (data: any) => {\n    return data.map((item: any) => ({\n      label: ` ${item.attributes.emoji_flag} ${item.attributes.name} (${\n        item.id\n      }) +${item.attributes.country_code}`,\n      value: item.attributes.country_code\n    }));\n  };\n\n  async receive(from: String, message: Message) {\n    runEngine.debugLog(\"Country Code\", message);\n\n    if (\n      getName(MessageEnum.RestAPIResponceMessage) === message.id &&\n      this.countryCodeApiCallId != null &&\n      this.countryCodeApiCallId ===\n        message.getData(getName(MessageEnum.RestAPIResponceDataMessage))\n    ) {\n      var responseJson = message.getData(\n        getName(MessageEnum.RestAPIResponceSuccessMessage)\n      );\n\n      //\n      if (responseJson && !responseJson.errors) {\n        this.setState({\n          dataSource: this.countryCodesToDropDown(responseJson.data)\n        });\n      } else {\n        var errorReponse = message.getData(\n          getName(MessageEnum.RestAPIResponceErrorMessage)\n        );\n\n        this.parseApiCatchErrorResponse(errorReponse);\n      }\n    }\n  }\n\n  makeRemoteRequest = () => {\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n    this.countryCodeApiCallId = requestMessage.messageId;\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.apiEndPointGetCountryCodes\n    );\n\n    const header = {\n      \"Content-Type\": configJSON.contentTypeApiGetCountryCodes\n    };\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(header)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.apiGetCountryCodesType\n    );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n  };\n}\n"]},"metadata":{},"sourceType":"module"}