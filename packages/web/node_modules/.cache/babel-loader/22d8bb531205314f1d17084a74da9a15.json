{"ast":null,"code":"import _regeneratorRuntime from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport MessageEnum, { getName } from \"../../../framework/src/Messages/MessageEnum\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nimport * as Yup from \"yup\"; // Customizable Area Start\n// Customizable Area End\n\nexport const configJSON = require(\"./config\");\nexport default class EmailAccountLoginController extends BlockComponent {\n  // Customizable Area Start\n  // Customizable Area End\n  constructor(props) {\n    super(props);\n    this.apiEmailLoginCallId = \"\";\n    this.validationApiCallId = \"\";\n    this.apiPasswordCallId = \"\";\n    this.apiForgotCallId = \"\";\n    this.emailReg = void 0;\n    this.labelTitle = \"\";\n\n    this.getToken = () => {\n      const msg = new Message(getName(MessageEnum.SessionRequestMessage));\n      this.send(msg);\n      console.log('msg', msg);\n    };\n\n    this.txtInputPasswordWebProps = {\n      onChange: text => {\n        this.setState({\n          errorPassword: '',\n          password: text === null || text === void 0 ? void 0 : text.target.value\n        });\n      }\n    };\n    this.txtInputConfirmPasswordWebProps = {\n      onChange: text => {\n        this.setState({\n          errorConfirmPassword: '',\n          confirmPassword: text === null || text === void 0 ? void 0 : text.target.value\n        });\n      }\n    };\n    this.txtInputEmailWebProps = {\n      onChange: text => {\n        this.setState({\n          errorEmail: '',\n          email: text === null || text === void 0 ? void 0 : text.target.value\n        }); //@ts-ignore\n\n        this.txtInputEmailProps.value = text === null || text === void 0 ? void 0 : text.target.value;\n      }\n    };\n    this.txtInputEmailMobileProps = _objectSpread(_objectSpread({}, this.txtInputEmailWebProps), {}, {\n      autoCompleteType: \"email\",\n      keyboardType: \"email-address\"\n    });\n    this.txtInputEmailProps = this.isPlatformWeb() ? this.txtInputEmailWebProps : this.txtInputEmailMobileProps;\n\n    this.createNewPassword = values => {\n      console.log(\"urlTypeurlType\", values.type);\n      const header = {\n        \"Content-Type\": configJSON.forgotPasswordAPiContentType\n      };\n      let attrs = {};\n\n      if (values.type === 'activePassword') {\n        attrs = {\n          password: values.password,\n          confirm_password: values.passwordConfirmation // email: localStorage.getItem('email') || this.state.email ||  '',\n\n        };\n      } else {\n        attrs = {\n          new_password: values.password,\n          confirm_new_password: values.passwordConfirmation // email: localStorage.getItem('email') || this.state.email ||  '',\n\n        };\n      } // const attrs = {\n      //   password: values.password,\n      //   confirm_password: values.passwordConfirmation,\n      //   // email: localStorage.getItem('email') || this.state.email ||  '',\n      // };\n\n\n      const data = {\n        type: \"email_account\",\n        attributes: attrs\n      };\n      const httpBody = {\n        data: data\n      };\n      console.log('httpBody', httpBody);\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage)); // console.log(\"requestMessage\", requestMessage);\n\n      this.apiPasswordCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), values.type === 'activePassword' ? \"\".concat(configJSON.activePasswordApiEndPoint, \"?token=\").concat(values.token) : \"\".concat(configJSON.newPasswordApiEndPoint, \"?token=\").concat(values.token));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(header));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(httpBody));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.httpPostMethod);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    };\n\n    this.handleForgotPassword = values => {\n      // if (\n      //   this.state.email === null ||\n      //   this.state.email.length === 0 ||\n      //   !this.emailReg.test(this.state.email)\n      // ) {\n      //   this.setState({\n      //       errorEmail :configJSON.pleaseEnterAValidEmail\n      //   })  \n      //   return false;\n      // }\n      localStorage.setItem(\"email\", values.email);\n      const header = {\n        \"Content-Type\": configJSON.forgotPasswordAPiContentType\n      }; // console.log('this.state',this.state)\n\n      const attrs = {\n        email: values.email\n      };\n      const data = {\n        type: \"email_account\",\n        attributes: attrs\n      };\n      const httpBody = {\n        data: data\n      }; // console.log('httpBody',httpBody)\n\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage)); // console.log(\"requestMessage\", requestMessage);\n\n      this.apiForgotCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.ForgotPasswordApiEndPoint);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(header));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(httpBody));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.httpPostMethod);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    };\n\n    this.openSnackBarHandler = (type, message) => {\n      console.log(\"type,message\", type, message);\n      this.setState({\n        snackBar: {\n          show: true,\n          message: message,\n          type\n        }\n      });\n    };\n\n    this.closeSnackBarHandler = () => {\n      this.setState({\n        snackBar: {\n          show: false,\n          message: this.state.snackBar.message,\n          type: this.state.snackBar.type\n        }\n      });\n    };\n\n    this.receive = this.receive.bind(this); // Customizable Area Start\n\n    this.subScribedMessages = [getName(MessageEnum.CountryCodeMessage), getName(MessageEnum.RestAPIResponceMessage), getName(MessageEnum.ReciveUserCredentials)];\n    let EmailOnlySchema = {\n      email: Yup.string().email(configJSON.errorEmailNotValid).required(configJSON.errorEmailRequired)\n    };\n    let NewPasswordSchema = {\n      password: Yup.string().matches(configJSON.PASSWORD_REGULAR_EXPRESSION, configJSON.errorNewPasswordNotValid).required(configJSON.errorNewPasswordEmpty),\n      passwordConfirmation: Yup.string().oneOf([Yup.ref('password'), null], 'Passwords must match').required(configJSON.errorNewPasswordEmpty)\n    };\n    this.state = {\n      email: '',\n      errorEmail: '',\n      password: \"\",\n      errorPassword: \"\",\n      confirmPassword: '',\n      errorConfirmPassword: '',\n      EmailOnlySchema: EmailOnlySchema,\n      NewPasswordSchema: NewPasswordSchema,\n      snackBar: {\n        show: false\n      }\n    };\n    this.emailReg = new RegExp(\"\"); // Customizable Area End\n\n    runEngine.attachBuildingBlock(this, this.subScribedMessages);\n  }\n\n  componentDidMount() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            // this.callGetValidationApi();\n            _this.send(new Message(getName(MessageEnum.RequestUserCredentials))); // Customizable Area Start\n            // Customizable Area End\n\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  }\n\n  receive(from, message) {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var responseJson, errorReponse, apiRequestCallId, errors, _this2$props;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            // Customizable Area Start\n            if (getName(MessageEnum.RestAPIResponceMessage) === message.id) {\n              responseJson = message.getData(getName(MessageEnum.RestAPIResponceSuccessMessage));\n              errorReponse = message.getData(getName(MessageEnum.RestAPIResponceErrorMessage));\n              apiRequestCallId = message.getData(getName(MessageEnum.RestAPIResponceDataMessage));\n\n              if (responseJson && !responseJson.errors) {\n                if (apiRequestCallId != null) {\n                  console.log(\"responseJson\", responseJson); // \n\n                  if (apiRequestCallId === _this2.apiPasswordCallId && responseJson !== undefined) {\n                    _this2.openSnackBarHandler('success', configJSON.successCreateAccount);\n\n                    setTimeout(() => {\n                      //@ts-ignore\n                      localStorage.setItem(\"user_type\", responseJson.data.user_type); //@ts-ignore\n\n                      _this2.props.history.push(\"/\");\n                    }, 1000);\n                  }\n\n                  if (apiRequestCallId === _this2.apiForgotCallId && responseJson !== undefined) {\n                    console.log(\"responseJson\", responseJson);\n\n                    _this2.openSnackBarHandler('success', configJSON.successCreateAccount);\n\n                    setTimeout(() => {\n                      //  localStorage.setItem(\"email\", this.state.email);\n                      //   localStorage.setItem(\"user_type\", responseJson.data.user_type);\n                      localStorage.setItem(\"auth\", responseJson.token); // @ts-ignore\n\n                      _this2.props.history.push(\"forgot-email-send-successfully\");\n                    }, 1000);\n                  }\n                }\n              } else {\n                errors = responseJson.errors;\n\n                _this2.parseApiCatchErrorResponse(errorReponse);\n\n                if (errors[0].token === 'Invalid token' || errors[0].token === 'Token has Expired') {\n                  localStorage.setItem(\"auth\", \"\"); //@ts-ignore\n\n                  (_this2$props = _this2.props) === null || _this2$props === void 0 ? void 0 : _this2$props.history.push(\"/login\");\n                } else if (errors[0].message) {\n                  _this2.openSnackBarHandler('error', errors[0].message);\n                } else if (errors[0].otp) {\n                  _this2.openSnackBarHandler('error', errors[0].otp);\n                }\n              }\n            } // Customizable Area End\n\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }))();\n  } //apiForgotCallId\n\n\n  sendLoginFailMessage() {\n    const msg = new Message(getName(MessageEnum.LoginFaliureMessage));\n    this.send(msg);\n  } //   sendLoginSuccessMessage() {\n  //     const msg: Message = new Message(getName(MessageEnum.LoginSuccessMessage));\n  //     msg.addData(getName(MessageEnum.LoginUserName), this.state.email);\n  //     msg.addData(getName(MessageEnum.CountyCodeDataMessage), null);\n  //     msg.addData(getName(MessageEnum.LoginPassword), this.state.password);\n  //     msg.addData(\n  //       getName(MessageEnum.LoginIsRememberMe),\n  //       this.state.checkedRememberMe\n  //     );\n  //     this.send(msg);\n  //   }\n\n\n  saveLoggedInUserData(responseJson) {\n    console.log('responseJsonresponseJson', responseJson);\n\n    if (responseJson && responseJson.meta && responseJson.meta.token) {\n      const msg = new Message(getName(MessageEnum.SessionSaveMessage));\n      msg.addData(getName(MessageEnum.SessionResponseData), JSON.stringify(responseJson));\n      msg.addData(getName(MessageEnum.SessionResponseToken), responseJson.meta.token);\n      localStorage.setItem('auth', responseJson.meta.token);\n      this.send(msg);\n    }\n  }\n\n  openInfoPage() {\n    // const msg: Message = new Message(getName(MessageEnum.AccoutLoginSuccess));\n    // console.log('msg',msg)\n    // console.log('this.props',this.props)\n    // msg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n    // this.send(msg);\n    // localStorage.setItem('auth',);\n    // alert('Login Successful')\n    //@ts-ignore\n    this.props.history.push(\"/\"); // this.props.history.push(\"select-domain\")\n  }\n\n  goToForgotPassword() {\n    const msg = new Message(getName(MessageEnum.NavigationForgotPasswordMessage));\n    msg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n    msg.addData(getName(MessageEnum.NavigationForgotPasswordPageInfo), \"email\");\n    this.send(msg);\n  }\n\n  goToSocialLogin() {\n    const msg = new Message(getName(MessageEnum.NavigationSocialLogInMessage));\n    msg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n    this.send(msg);\n  }\n\n  callGetValidationApi() {\n    const headers = {\n      \"Content-Type\": configJSON.validationApiContentType\n    };\n    const getValidationsMsg = new Message(getName(MessageEnum.RestAPIRequestMessage));\n    this.validationApiCallId = getValidationsMsg.messageId;\n    getValidationsMsg.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.urlGetValidations);\n    getValidationsMsg.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n    getValidationsMsg.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.validationApiMethodType);\n    runEngine.sendMessage(getValidationsMsg.id, getValidationsMsg);\n  }\n\n}","map":{"version":3,"sources":["/home/lp-greenapex/gargi/okydpim-36944-react-native/src/packages/blocks/forgot-password/src/NewPasswordController.web.tsx"],"names":["Message","BlockComponent","MessageEnum","getName","runEngine","Yup","configJSON","require","EmailAccountLoginController","constructor","props","apiEmailLoginCallId","validationApiCallId","apiPasswordCallId","apiForgotCallId","emailReg","labelTitle","getToken","msg","SessionRequestMessage","send","console","log","txtInputPasswordWebProps","onChange","text","setState","errorPassword","password","target","value","txtInputConfirmPasswordWebProps","errorConfirmPassword","confirmPassword","txtInputEmailWebProps","errorEmail","email","txtInputEmailProps","txtInputEmailMobileProps","autoCompleteType","keyboardType","isPlatformWeb","createNewPassword","values","type","header","forgotPasswordAPiContentType","attrs","confirm_password","passwordConfirmation","new_password","confirm_new_password","data","attributes","httpBody","requestMessage","RestAPIRequestMessage","messageId","addData","RestAPIResponceEndPointMessage","activePasswordApiEndPoint","token","newPasswordApiEndPoint","RestAPIRequestHeaderMessage","JSON","stringify","RestAPIRequestBodyMessage","RestAPIRequestMethodMessage","httpPostMethod","sendMessage","id","handleForgotPassword","localStorage","setItem","ForgotPasswordApiEndPoint","openSnackBarHandler","message","snackBar","show","closeSnackBarHandler","state","receive","bind","subScribedMessages","CountryCodeMessage","RestAPIResponceMessage","ReciveUserCredentials","EmailOnlySchema","string","errorEmailNotValid","required","errorEmailRequired","NewPasswordSchema","matches","PASSWORD_REGULAR_EXPRESSION","errorNewPasswordNotValid","errorNewPasswordEmpty","oneOf","ref","RegExp","attachBuildingBlock","componentDidMount","RequestUserCredentials","from","responseJson","getData","RestAPIResponceSuccessMessage","errorReponse","RestAPIResponceErrorMessage","apiRequestCallId","RestAPIResponceDataMessage","errors","undefined","successCreateAccount","setTimeout","user_type","history","push","parseApiCatchErrorResponse","otp","sendLoginFailMessage","LoginFaliureMessage","saveLoggedInUserData","meta","SessionSaveMessage","SessionResponseData","SessionResponseToken","openInfoPage","goToForgotPassword","NavigationForgotPasswordMessage","NavigationPropsMessage","NavigationForgotPasswordPageInfo","goToSocialLogin","NavigationSocialLogInMessage","callGetValidationApi","headers","validationApiContentType","getValidationsMsg","urlGetValidations","validationApiMethodType"],"mappings":"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","sourcesContent":["import { IBlock } from \"../../../framework/src/IBlock\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport MessageEnum, {\n  getName,\n} from \"../../../framework/src/Messages/MessageEnum\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nimport {identity, isEmpty} from 'lodash'\nimport * as Yup from \"yup\";\n\n// Customizable Area Start\n// Customizable Area End\n\nexport const configJSON = require(\"./config\");\n\nexport interface Props {\n  navigation: any;\n  id: string;\n  // Customizable Area Start\n  // Customizable Area End\n}\n\ninterface S {\n  // Customizable Area Start\n  email: string;\n  errorEmail: string;\n  password: string;\n  errorPassword: string;\n  confirmPassword: string;\n  errorConfirmPassword: string;\n  EmailOnlySchema: any;\n  NewPasswordSchema: any;\n  snackBar: {\n    show: boolean,\n    message?: string,\n    type?: \"success\" | \"info\" | \"warning\" | \"error\" | undefined\n  };\n  // Customizable Area End\n}\n\ninterface SS {\n  // Customizable Area Start\n  id: any;\n  // Customizable Area End\n}\n\nexport default class EmailAccountLoginController extends BlockComponent<\n  Props,\n  S,\n  SS\n> {\n  // Customizable Area Start\n  apiEmailLoginCallId: string = \"\";\n  validationApiCallId: string = \"\";\n  apiPasswordCallId: string = \"\";\n  apiForgotCallId: string = \"\";\n\n  emailReg: RegExp;\n  labelTitle: string = \"\";\n  // Customizable Area End\n\n  constructor(props: Props) {\n    super(props);\n    this.receive = this.receive.bind(this);\n\n    // Customizable Area Start\n    this.subScribedMessages = [\n      getName(MessageEnum.CountryCodeMessage),\n      getName(MessageEnum.RestAPIResponceMessage),\n      getName(MessageEnum.ReciveUserCredentials),\n    ];\n\n    let EmailOnlySchema ={\n      email: Yup.string()\n        .email(configJSON.errorEmailNotValid)\n        .required(configJSON.errorEmailRequired),\n    }\n\n     let NewPasswordSchema = {\n      password: Yup.string() \n      .matches(\n        configJSON.PASSWORD_REGULAR_EXPRESSION,\n        configJSON.errorNewPasswordNotValid\n        )\n      .required(configJSON.errorNewPasswordEmpty),\n      passwordConfirmation: Yup.string()\n        .oneOf([Yup.ref('password'), null], 'Passwords must match')\n        .required(configJSON.errorNewPasswordEmpty)\n     }\n    \n\n    this.state = {\n      email: '',\n      errorEmail:'',\n      password: \"\",\n      errorPassword: \"\",\n      confirmPassword:'',\n      errorConfirmPassword:'',\n      EmailOnlySchema:EmailOnlySchema,\n      NewPasswordSchema:NewPasswordSchema,\n      snackBar: {\n        show: false,\n      },\n    };\n\n    this.emailReg = new RegExp(\"\");\n    // Customizable Area End\n\n    runEngine.attachBuildingBlock(this as IBlock, this.subScribedMessages);\n  }\n\n  async componentDidMount() {\n    // this.callGetValidationApi();\n    this.send(new Message(getName(MessageEnum.RequestUserCredentials)));\n    // Customizable Area Start\n    \n    // Customizable Area End\n  }\n  getToken = () => {\n    const msg: Message = new Message(\n      getName(MessageEnum.SessionRequestMessage)\n    );\n    this.send(msg);\n   console.log('msg',msg)\n\n  };\n\n  // Customizable Area Start\n  \n  txtInputPasswordWebProps = {\n    onChange: (text: any) => {\n      this.setState({ errorPassword:'' , password: text?.target.value });\n    },\n  };\n\n  txtInputConfirmPasswordWebProps = {\n    onChange: (text: any) => {\n      this.setState({ errorConfirmPassword:'' , confirmPassword: text?.target.value });\n    },\n  };\n\n\n  txtInputEmailWebProps = {\n    onChange: (text: any) => {\n      this.setState({ errorEmail:''  ,email: text?.target.value });\n      //@ts-ignore\n      this.txtInputEmailProps.value = text?.target.value;\n    },\n  };\n\n  txtInputEmailMobileProps = {\n    ...this.txtInputEmailWebProps,\n    autoCompleteType: \"email\",\n    keyboardType: \"email-address\",\n  };\n\n  txtInputEmailProps = this.isPlatformWeb()\n    ? this.txtInputEmailWebProps\n    : this.txtInputEmailMobileProps;\n\n\n\n \n  async receive(from: string, message: Message) {\n     // Customizable Area Start\n   \n    if (getName(MessageEnum.RestAPIResponceMessage) === message.id) {\n      var responseJson = message.getData(\n        getName(MessageEnum.RestAPIResponceSuccessMessage)\n      );\n      var errorReponse = message.getData(\n        getName(MessageEnum.RestAPIResponceErrorMessage)\n      );\n      const apiRequestCallId = message.getData(\n        getName(MessageEnum.RestAPIResponceDataMessage)\n      );\n      if (responseJson && !responseJson.errors) {\n        if (apiRequestCallId != null) {\n         console.log(\"responseJson\",responseJson)\n          // \n          if (apiRequestCallId === this.apiPasswordCallId && responseJson !== undefined) {\n            this.openSnackBarHandler('success', configJSON.successCreateAccount);\n            setTimeout(() => {\n              //@ts-ignore\n              localStorage.setItem(\"user_type\", responseJson.data.user_type);\n              //@ts-ignore\n              this.props.history.push(\"/\");\n            }, 1000);\n          }\n          if (apiRequestCallId === this.apiForgotCallId && responseJson !== undefined) {\n            console.log(\"responseJson\",responseJson)\n            this.openSnackBarHandler('success', configJSON.successCreateAccount);\n            setTimeout(() => {\n            //  localStorage.setItem(\"email\", this.state.email);\n            //   localStorage.setItem(\"user_type\", responseJson.data.user_type);\n            localStorage.setItem(\"auth\",responseJson.token)\n              // @ts-ignore\n              this.props.history.push(\"forgot-email-send-successfully\");\n            }, 1000);\n          }\n        }\n      } else {\n        const errors = responseJson.errors;\n        this.parseApiCatchErrorResponse(errorReponse);\n        if(errors[0].token === 'Invalid token' ||errors[0].token ===  'Token has Expired') {\n          localStorage.setItem(\"auth\", \"\");\n          //@ts-ignore\n          this.props?.history.push(\"/login\");\n        } else if(errors[0].message) {\n          this.openSnackBarHandler('error', errors[0].message);\n        }  else if(errors[0].otp) {\n          this.openSnackBarHandler('error', errors[0].otp);\n        } \n      }\n    }\n    // Customizable Area End\n   \n    }\n    //apiForgotCallId\n\n  sendLoginFailMessage() {\n    const msg: Message = new Message(getName(MessageEnum.LoginFaliureMessage));\n    this.send(msg);\n  }\n\n//   sendLoginSuccessMessage() {\n//     const msg: Message = new Message(getName(MessageEnum.LoginSuccessMessage));\n\n//     msg.addData(getName(MessageEnum.LoginUserName), this.state.email);\n//     msg.addData(getName(MessageEnum.CountyCodeDataMessage), null);\n//     msg.addData(getName(MessageEnum.LoginPassword), this.state.password);\n//     msg.addData(\n//       getName(MessageEnum.LoginIsRememberMe),\n//       this.state.checkedRememberMe\n//     );\n\n//     this.send(msg);\n//   }\n\n  saveLoggedInUserData(responseJson: any) {\n    console.log('responseJsonresponseJson',responseJson)\n    if (responseJson && responseJson.meta && responseJson.meta.token) {\n      const msg: Message = new Message(getName(MessageEnum.SessionSaveMessage));\n\n      msg.addData(\n        getName(MessageEnum.SessionResponseData),\n        JSON.stringify(responseJson)\n      );\n      msg.addData(\n        getName(MessageEnum.SessionResponseToken),\n        responseJson.meta.token\n      );\n       localStorage.setItem('auth',responseJson.meta.token)\n\n      this.send(msg);\n\n      \n    }\n  }\n\n  openInfoPage() {\n    // const msg: Message = new Message(getName(MessageEnum.AccoutLoginSuccess));\n    // console.log('msg',msg)\n    // console.log('this.props',this.props)\n    // msg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n\n    // this.send(msg);\n    \n    // localStorage.setItem('auth',);\n    // alert('Login Successful')\n    //@ts-ignore\n\n    this.props.history.push(\"/\");\n    // this.props.history.push(\"select-domain\")\n  }\n\n  goToForgotPassword() {\n    const msg: Message = new Message(\n      getName(MessageEnum.NavigationForgotPasswordMessage)\n    );\n    msg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n    msg.addData(getName(MessageEnum.NavigationForgotPasswordPageInfo), \"email\");\n    this.send(msg);\n  }\n\n  goToSocialLogin() {\n    const msg: Message = new Message(\n      getName(MessageEnum.NavigationSocialLogInMessage)\n    );\n    msg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n    this.send(msg);\n  }\n\n  createNewPassword = (values:any): Boolean => {\n\n    console.log(\"urlTypeurlType\",values.type)\n    const header = {\n      \"Content-Type\": configJSON.forgotPasswordAPiContentType,\n    };\n\n    let attrs ={}\n    if(values.type === 'activePassword'){\n      attrs = {\n        password: values.password,\n        confirm_password: values.passwordConfirmation,\n        // email: localStorage.getItem('email') || this.state.email ||  '',\n      }\n    }else{\n      attrs = {\n        new_password: values.password,\n        confirm_new_password: values.passwordConfirmation,\n        // email: localStorage.getItem('email') || this.state.email ||  '',\n        }\n    }\n\n    // const attrs = {\n    //   password: values.password,\n    //   confirm_password: values.passwordConfirmation,\n    //   // email: localStorage.getItem('email') || this.state.email ||  '',\n    // };\n\n    const data = {\n      type: \"email_account\",\n      attributes: attrs,\n    };\n\n    const httpBody = {\n      data: data,\n    };\n\n    console.log('httpBody',httpBody)\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage) \n    );\n\n    // console.log(\"requestMessage\", requestMessage);\n    this.apiPasswordCallId = requestMessage.messageId;\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      values.type === 'activePassword' ?\n     `${configJSON.activePasswordApiEndPoint}?token=${values.token}`\n     : `${configJSON.newPasswordApiEndPoint}?token=${values.token}`\n     \n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(header)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestBodyMessage),\n      JSON.stringify(httpBody)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.httpPostMethod\n    );\n\n   \n    runEngine.sendMessage(requestMessage.id, requestMessage);\n\n    return true;\n  }\n\n  callGetValidationApi() {\n    const headers = {\n      \"Content-Type\": configJSON.validationApiContentType,\n    };\n\n    const getValidationsMsg = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n    this.validationApiCallId = getValidationsMsg.messageId;\n\n    getValidationsMsg.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.urlGetValidations\n    );\n\n    getValidationsMsg.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(headers)\n    );\n    getValidationsMsg.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.validationApiMethodType\n    );\n    runEngine.sendMessage(getValidationsMsg.id, getValidationsMsg);\n  }\n\n\n  handleForgotPassword= (values:any) : Boolean =>{\n      // if (\n      //   this.state.email === null ||\n      //   this.state.email.length === 0 ||\n      //   !this.emailReg.test(this.state.email)\n      // ) {\n      //   this.setState({\n      //       errorEmail :configJSON.pleaseEnterAValidEmail\n      //   })  \n      //   return false;\n      // }\n    localStorage.setItem(\"email\",values.email)\n    const header = {\n      \"Content-Type\": configJSON.forgotPasswordAPiContentType,\n    };\n\n    // console.log('this.state',this.state)\n    const attrs = {\n      email: values.email\n    };\n\n    const data = {\n      type: \"email_account\",\n      attributes: attrs,\n    };\n\n    const httpBody = {\n      data: data,\n    };\n\n    // console.log('httpBody',httpBody)\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage) \n    );\n\n    // console.log(\"requestMessage\", requestMessage);\n    this.apiForgotCallId = requestMessage.messageId;\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.ForgotPasswordApiEndPoint\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(header)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestBodyMessage),\n      JSON.stringify(httpBody)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.httpPostMethod\n    );\n\n   \n    runEngine.sendMessage(requestMessage.id, requestMessage);\n\n      return true;\n  }\n\n   // Open View Details Modal\n  openSnackBarHandler = (type: \"success\" | \"info\" | \"warning\" | \"error\" | undefined,  message: string): void => {\n    console.log(\"type,message\",type,message)\n    this.setState({ snackBar: {\n      show: true,\n      message: message,\n      type\n    } });\n  };\n\n  // Close View Details Modal\n  closeSnackBarHandler = () => {\n    this.setState({ snackBar: {\n      show: false,\n      message: this.state.snackBar.message,\n      type: this.state.snackBar.type\n    }});\n  };\n}\n\n"]},"metadata":{},"sourceType":"module"}