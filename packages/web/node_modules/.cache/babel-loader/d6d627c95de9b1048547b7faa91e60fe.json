{"ast":null,"code":"import _objectSpread from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/react-native-elements/src/avatar/Avatar.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport RNImage from \"react-native-web/dist/exports/Image\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport { withTheme, ViewPropTypes } from '../config';\nimport { renderNode, nodeType } from '../helpers';\nimport Icon from '../icons/Icon';\nimport Image from '../image/Image';\nconst avatarSizes = {\n  small: 34,\n  medium: 50,\n  large: 75,\n  xlarge: 150\n};\nconst defaultEditButton = {\n  name: 'mode-edit',\n  type: 'material',\n  color: '#fff',\n  underlayColor: '#000'\n};\n\nconst Avatar = (_ref) => {\n  let onPress = _ref.onPress,\n      onLongPress = _ref.onLongPress,\n      _ref$Component = _ref.Component,\n      Component = _ref$Component === void 0 ? onPress || onLongPress ? TouchableOpacity : View : _ref$Component,\n      containerStyle = _ref.containerStyle,\n      icon = _ref.icon,\n      iconStyle = _ref.iconStyle,\n      source = _ref.source,\n      size = _ref.size,\n      avatarStyle = _ref.avatarStyle,\n      rounded = _ref.rounded,\n      title = _ref.title,\n      titleStyle = _ref.titleStyle,\n      overlayContainerStyle = _ref.overlayContainerStyle,\n      showEditButton = _ref.showEditButton,\n      passedEditButton = _ref.editButton,\n      onEditPress = _ref.onEditPress,\n      imageProps = _ref.imageProps,\n      placeholderStyle = _ref.placeholderStyle,\n      renderPlaceholderContent = _ref.renderPlaceholderContent,\n      ImageComponent = _ref.ImageComponent,\n      attributes = _objectWithoutProperties(_ref, [\"onPress\", \"onLongPress\", \"Component\", \"containerStyle\", \"icon\", \"iconStyle\", \"source\", \"size\", \"avatarStyle\", \"rounded\", \"title\", \"titleStyle\", \"overlayContainerStyle\", \"showEditButton\", \"editButton\", \"onEditPress\", \"imageProps\", \"placeholderStyle\", \"renderPlaceholderContent\", \"ImageComponent\"]);\n\n  const width = typeof size === 'number' ? size : avatarSizes[size] || avatarSizes.small;\n  const height = width;\n  const titleSize = width / 2;\n  const iconSize = width / 2;\n\n  const editButton = _objectSpread(_objectSpread({}, defaultEditButton), passedEditButton);\n\n  const editButtonSize = editButton.size || (width + height) / 2 / 3;\n  const Utils = showEditButton && /*#__PURE__*/React.createElement(TouchableHighlight, {\n    style: StyleSheet.flatten([styles.editButton, {\n      width: editButtonSize,\n      height: editButtonSize,\n      borderRadius: editButtonSize / 2\n    }, editButton.style]),\n    underlayColor: editButton.underlayColor,\n    onPress: onEditPress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Icon, Object.assign({\n    size: editButtonSize * 0.8\n  }, editButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }))));\n  const PlaceholderContent = renderPlaceholderContent && renderNode(undefined, renderPlaceholderContent) || title && /*#__PURE__*/React.createElement(Text, {\n    style: StyleSheet.flatten([styles.title, {\n      fontSize: titleSize\n    }, titleStyle]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, title) || icon && /*#__PURE__*/React.createElement(Icon, {\n    style: iconStyle && iconStyle,\n    color: icon.color || 'white',\n    name: icon.name || 'user',\n    size: icon.size || iconSize,\n    type: icon.type && icon.type,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }); // Remove placeholder styling if we're not using image\n\n  const hidePlaceholder = !source;\n  return /*#__PURE__*/React.createElement(Component, Object.assign({\n    onPress: onPress,\n    onLongPress: onLongPress,\n    style: StyleSheet.flatten([styles.container, {\n      height,\n      width\n    }, rounded && {\n      borderRadius: width / 2\n    }, containerStyle])\n  }, attributes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Image, Object.assign({\n    placeholderStyle: StyleSheet.flatten([placeholderStyle, hidePlaceholder && {\n      backgroundColor: 'transparent'\n    }]),\n    PlaceholderContent: PlaceholderContent,\n    containerStyle: StyleSheet.flatten([styles.overlayContainer, overlayContainerStyle, rounded && {\n      borderRadius: width / 2,\n      overflow: 'hidden'\n    }]),\n    source: source\n  }, imageProps, {\n    style: StyleSheet.flatten([styles.avatar, imageProps && imageProps.style, avatarStyle]),\n    ImageComponent: ImageComponent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  })), Utils);\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'transparent'\n  },\n  avatar: {\n    flex: 1,\n    width: null,\n    height: null\n  },\n  overlayContainer: {\n    flex: 1,\n    backgroundColor: '#bdbdbd'\n  },\n  title: {\n    color: '#ffffff',\n    backgroundColor: 'transparent',\n    textAlign: 'center'\n  },\n  editButton: _objectSpread({\n    position: 'absolute',\n    bottom: 0,\n    right: 0,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#aaa'\n  }, Platform.select({\n    android: {\n      elevation: 1\n    },\n    default: {\n      shadowColor: '#000',\n      shadowOffset: {\n        width: 1,\n        height: 1\n      },\n      shadowRadius: 2,\n      shadowOpacity: 0.5\n    }\n  }))\n});\nAvatar.propTypes = {\n  Component: PropTypes.oneOf([View, TouchableOpacity, TouchableHighlight, TouchableNativeFeedback, TouchableWithoutFeedback]),\n  onPress: PropTypes.func,\n  onLongPress: PropTypes.func,\n  containerStyle: ViewPropTypes.style,\n  source: RNImage.propTypes.source,\n  avatarStyle: ViewPropTypes.style,\n  rounded: PropTypes.bool,\n  title: PropTypes.string,\n  titleStyle: Text.propTypes.style,\n  overlayContainerStyle: ViewPropTypes.style,\n  activeOpacity: PropTypes.number,\n  icon: PropTypes.object,\n  iconStyle: Text.propTypes.style,\n  size: PropTypes.oneOfType([PropTypes.oneOf(['small', 'medium', 'large', 'xlarge']), PropTypes.number]),\n  showEditButton: PropTypes.bool,\n  onEditPress: PropTypes.func,\n  editButton: PropTypes.shape({\n    size: PropTypes.number,\n    name: PropTypes.string,\n    type: PropTypes.string,\n    color: PropTypes.string,\n    underlayColor: PropTypes.string,\n    style: ViewPropTypes.style\n  }),\n  placeholderStyle: ViewPropTypes.style,\n  renderPlaceholderContent: nodeType,\n  imageProps: PropTypes.object,\n  ImageComponent: PropTypes.elementType\n};\nAvatar.defaultProps = {\n  showEditButton: false,\n  onEditPress: null,\n  size: 'small',\n  editButton: defaultEditButton,\n  ImageComponent: RNImage\n};\nexport { Avatar };\nexport default withTheme(Avatar, 'Avatar');","map":{"version":3,"sources":["/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/react-native-elements/src/avatar/Avatar.js"],"names":["React","PropTypes","withTheme","ViewPropTypes","renderNode","nodeType","Icon","Image","avatarSizes","small","medium","large","xlarge","defaultEditButton","name","type","color","underlayColor","Avatar","onPress","onLongPress","Component","TouchableOpacity","View","containerStyle","icon","iconStyle","source","size","avatarStyle","rounded","title","titleStyle","overlayContainerStyle","showEditButton","passedEditButton","editButton","onEditPress","imageProps","placeholderStyle","renderPlaceholderContent","ImageComponent","attributes","width","height","titleSize","iconSize","editButtonSize","Utils","StyleSheet","flatten","styles","borderRadius","style","PlaceholderContent","undefined","fontSize","hidePlaceholder","container","backgroundColor","overlayContainer","overflow","avatar","create","flex","textAlign","position","bottom","right","alignItems","justifyContent","Platform","select","android","elevation","default","shadowColor","shadowOffset","shadowRadius","shadowOpacity","propTypes","oneOf","TouchableHighlight","TouchableNativeFeedback","TouchableWithoutFeedback","func","RNImage","bool","string","Text","activeOpacity","number","object","oneOfType","shape","elementType","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  View,\n  Text,\n  Image as RNImage,\n  Platform,\n  StyleSheet,\n  TouchableOpacity,\n  TouchableHighlight,\n  TouchableNativeFeedback,\n  TouchableWithoutFeedback,\n} from 'react-native';\n\nimport { withTheme, ViewPropTypes } from '../config';\nimport { renderNode, nodeType } from '../helpers';\n\nimport Icon from '../icons/Icon';\nimport Image from '../image/Image';\n\nconst avatarSizes = {\n  small: 34,\n  medium: 50,\n  large: 75,\n  xlarge: 150,\n};\n\nconst defaultEditButton = {\n  name: 'mode-edit',\n  type: 'material',\n  color: '#fff',\n  underlayColor: '#000',\n};\n\nconst Avatar = ({\n  onPress,\n  onLongPress,\n  Component = onPress || onLongPress ? TouchableOpacity : View,\n  containerStyle,\n  icon,\n  iconStyle,\n  source,\n  size,\n  avatarStyle,\n  rounded,\n  title,\n  titleStyle,\n  overlayContainerStyle,\n  showEditButton,\n  editButton: passedEditButton,\n  onEditPress,\n  imageProps,\n  placeholderStyle,\n  renderPlaceholderContent,\n  ImageComponent,\n  ...attributes\n}) => {\n  const width =\n    typeof size === 'number' ? size : avatarSizes[size] || avatarSizes.small;\n  const height = width;\n  const titleSize = width / 2;\n  const iconSize = width / 2;\n\n  const editButton = {\n    ...defaultEditButton,\n    ...passedEditButton,\n  };\n  const editButtonSize = editButton.size || (width + height) / 2 / 3;\n\n  const Utils = showEditButton && (\n    <TouchableHighlight\n      style={StyleSheet.flatten([\n        styles.editButton,\n        {\n          width: editButtonSize,\n          height: editButtonSize,\n          borderRadius: editButtonSize / 2,\n        },\n        editButton.style,\n      ])}\n      underlayColor={editButton.underlayColor}\n      onPress={onEditPress}\n    >\n      <View>\n        <Icon size={editButtonSize * 0.8} {...editButton} />\n      </View>\n    </TouchableHighlight>\n  );\n\n  const PlaceholderContent =\n    (renderPlaceholderContent &&\n      renderNode(undefined, renderPlaceholderContent)) ||\n    (title && (\n      <Text\n        style={StyleSheet.flatten([\n          styles.title,\n          { fontSize: titleSize },\n          titleStyle,\n        ])}\n      >\n        {title}\n      </Text>\n    )) ||\n    (icon && (\n      <Icon\n        style={iconStyle && iconStyle}\n        color={icon.color || 'white'}\n        name={icon.name || 'user'}\n        size={icon.size || iconSize}\n        type={icon.type && icon.type}\n      />\n    ));\n\n  // Remove placeholder styling if we're not using image\n  const hidePlaceholder = !source;\n\n  return (\n    <Component\n      onPress={onPress}\n      onLongPress={onLongPress}\n      style={StyleSheet.flatten([\n        styles.container,\n        { height, width },\n        rounded && { borderRadius: width / 2 },\n        containerStyle,\n      ])}\n      {...attributes}\n    >\n      <Image\n        placeholderStyle={StyleSheet.flatten([\n          placeholderStyle,\n          hidePlaceholder && { backgroundColor: 'transparent' },\n        ])}\n        PlaceholderContent={PlaceholderContent}\n        containerStyle={StyleSheet.flatten([\n          styles.overlayContainer,\n          overlayContainerStyle,\n          rounded && { borderRadius: width / 2, overflow: 'hidden' },\n        ])}\n        source={source}\n        {...imageProps}\n        style={StyleSheet.flatten([\n          styles.avatar,\n          imageProps && imageProps.style,\n          avatarStyle,\n        ])}\n        ImageComponent={ImageComponent}\n      />\n      {Utils}\n    </Component>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'transparent',\n  },\n  avatar: {\n    flex: 1,\n    width: null,\n    height: null,\n  },\n  overlayContainer: {\n    flex: 1,\n    backgroundColor: '#bdbdbd',\n  },\n  title: {\n    color: '#ffffff',\n    backgroundColor: 'transparent',\n    textAlign: 'center',\n  },\n  editButton: {\n    position: 'absolute',\n    bottom: 0,\n    right: 0,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#aaa',\n    ...Platform.select({\n      android: {\n        elevation: 1,\n      },\n      default: {\n        shadowColor: '#000',\n        shadowOffset: { width: 1, height: 1 },\n        shadowRadius: 2,\n        shadowOpacity: 0.5,\n      },\n    }),\n  },\n});\n\nAvatar.propTypes = {\n  Component: PropTypes.oneOf([\n    View,\n    TouchableOpacity,\n    TouchableHighlight,\n    TouchableNativeFeedback,\n    TouchableWithoutFeedback,\n  ]),\n  onPress: PropTypes.func,\n  onLongPress: PropTypes.func,\n  containerStyle: ViewPropTypes.style,\n  source: RNImage.propTypes.source,\n  avatarStyle: ViewPropTypes.style,\n  rounded: PropTypes.bool,\n  title: PropTypes.string,\n  titleStyle: Text.propTypes.style,\n  overlayContainerStyle: ViewPropTypes.style,\n  activeOpacity: PropTypes.number,\n  icon: PropTypes.object,\n  iconStyle: Text.propTypes.style,\n  size: PropTypes.oneOfType([\n    PropTypes.oneOf(['small', 'medium', 'large', 'xlarge']),\n    PropTypes.number,\n  ]),\n  showEditButton: PropTypes.bool,\n  onEditPress: PropTypes.func,\n  editButton: PropTypes.shape({\n    size: PropTypes.number,\n    name: PropTypes.string,\n    type: PropTypes.string,\n    color: PropTypes.string,\n    underlayColor: PropTypes.string,\n    style: ViewPropTypes.style,\n  }),\n  placeholderStyle: ViewPropTypes.style,\n  renderPlaceholderContent: nodeType,\n  imageProps: PropTypes.object,\n  ImageComponent: PropTypes.elementType,\n};\n\nAvatar.defaultProps = {\n  showEditButton: false,\n  onEditPress: null,\n  size: 'small',\n  editButton: defaultEditButton,\n  ImageComponent: RNImage,\n};\n\nexport { Avatar };\nexport default withTheme(Avatar, 'Avatar');\n"]},"metadata":{},"sourceType":"module"}