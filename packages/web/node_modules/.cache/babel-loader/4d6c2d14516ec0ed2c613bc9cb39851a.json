{"ast":null,"code":"import _regeneratorRuntime from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n// Do not change anything in the protected area. Doing so will be detected and your commit will be rejected.\n// Protected Area Start\nimport { Component } from 'react';\nimport { runEngine } from './RunEngine';\nimport { Message } from './Message';\nimport MessageEnum, { getName } from './Messages/MessageEnum';\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport * as helper from './Helpers';\nexport class BlockComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.isLoaded = false;\n    this.send = void 0;\n    this.blockId = void 0;\n    this.subScribedMessages = void 0;\n\n    const uuidv4 = require('uuid/v4');\n\n    this.blockId = uuidv4();\n\n    this.send = message => runEngine.sendMessage(this.blockId, message);\n\n    this.subScribedMessages = [''];\n    this.hideKeyboard = this.hideKeyboard.bind(this);\n  } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  receive(from, message) {}\n\n  componentDidMount() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _this.isLoaded = true;\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  }\n\n  componentWillUnmount() {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            _this2.isLoaded = false;\n            Keyboard.dismiss();\n            runEngine.unSubscribeFromMessages(_this2, _this2.subScribedMessages);\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }))();\n  }\n\n  toggleState(objectID) {\n    this.changeState(objectID, !this.getState(objectID));\n  }\n\n  changeState(objectID, value) {\n    switch (objectID) {\n      default:\n        console.log('changeState::Not Confifured for ' + objectID);\n    }\n  }\n\n  getState(objectID) {\n    var testString = '';\n\n    switch (objectID) {\n      case 'testBoolTrue':\n        return true;\n\n      case 'testBoolFalse':\n        return false;\n\n      case 'testString':\n        return testString;\n\n      default:\n        console.log('changeState::Not Confifured for ' + objectID);\n        return null;\n    }\n  }\n\n  processOnClickMessage(messageID, value = null) {\n    switch (messageID) {\n      default:\n        console.log('processOnClickMessage::Not Configured for ' + messageID);\n    }\n  }\n\n  showAlert(title, error, btnPositiveText, btnPositiveMessage, btnNegativeText, btnNegativeMessage, btnNeutralText, btnNeutralMessage) {\n    Keyboard.dismiss();\n\n    if (!btnPositiveText && !btnNegativeText && !btnNeutralText) {\n      btnPositiveText = 'Ok';\n    }\n\n    const alertMsg = new Message(getName(MessageEnum.AlertMessage));\n    alertMsg.addData(getName(MessageEnum.AlertTitleMessage), title);\n    alertMsg.addData(getName(MessageEnum.AlertBodyMessage), error);\n    alertMsg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n    alertMsg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n    alertMsg.addData(getName(MessageEnum.AlertButtonPositiveText), btnPositiveText);\n    alertMsg.addData(getName(MessageEnum.AlertButtonNegativeText), btnNegativeText);\n    alertMsg.addData(getName(MessageEnum.AlertButtonNeutralText), btnNeutralText);\n    alertMsg.addData(getName(MessageEnum.AlertButtonPositiveMessage), btnPositiveMessage);\n    alertMsg.addData(getName(MessageEnum.AlertButtonNegativeMessage), btnNegativeMessage);\n    alertMsg.addData(getName(MessageEnum.AlertButtonNeutralMessage), btnNeutralMessage);\n    runEngine.sendMessage(alertMsg.id, alertMsg);\n  }\n\n  parseApiErrorResponse(responseJson) {\n    if (!responseJson || !responseJson.errors) {\n      return;\n    }\n\n    const errors = responseJson.errors;\n    let allerrors = '';\n    errors.map(object => {\n      const newLocal = JSON.stringify(object);\n      JSON.parse(newLocal, (key, value) => {\n        if (value.length > 0) {\n          if (allerrors.length <= 0) {\n            allerrors = value;\n          } else {\n            allerrors = \"\".concat(allerrors, \"{\\n}\").concat(value);\n          }\n        }\n      });\n    });\n    this.showAlert('Error', allerrors);\n  }\n\n  isPlatformWeb() {\n    return helper.getOS() === 'web';\n  }\n\n  isPlatformiOS() {\n    return helper.getOS() === 'ios';\n  }\n\n  isPlatformAndroid() {\n    return helper.getOS() === 'android';\n  }\n\n  parseApiCatchErrorResponse(errorReponse) {\n    if (errorReponse) {\n      this.showAlert('Error', JSON.stringify(errorReponse).replace(new RegExp('\"', 'g'), ''));\n    }\n  }\n\n  hideKeyboard() {\n    if (!this.isPlatformWeb()) {\n      Keyboard.dismiss();\n    }\n  }\n\n} // Protected Area End","map":{"version":3,"sources":["/home/lp-greenapex/gargi/okydpim-36944-react-native/src/packages/framework/src/BlockComponent.tsx"],"names":["Component","runEngine","Message","MessageEnum","getName","helper","BlockComponent","constructor","props","isLoaded","send","blockId","subScribedMessages","uuidv4","require","message","sendMessage","hideKeyboard","bind","receive","from","componentDidMount","componentWillUnmount","Keyboard","dismiss","unSubscribeFromMessages","toggleState","objectID","changeState","getState","value","console","log","testString","processOnClickMessage","messageID","showAlert","title","error","btnPositiveText","btnPositiveMessage","btnNegativeText","btnNegativeMessage","btnNeutralText","btnNeutralMessage","alertMsg","AlertMessage","addData","AlertTitleMessage","AlertBodyMessage","NavigationPropsMessage","AlertButtonPositiveText","AlertButtonNegativeText","AlertButtonNeutralText","AlertButtonPositiveMessage","AlertButtonNegativeMessage","AlertButtonNeutralMessage","id","parseApiErrorResponse","responseJson","errors","allerrors","map","object","newLocal","JSON","stringify","parse","key","length","isPlatformWeb","getOS","isPlatformiOS","isPlatformAndroid","parseApiCatchErrorResponse","errorReponse","replace","RegExp"],"mappings":"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","sourcesContent":["// Do not change anything in the protected area. Doing so will be detected and your commit will be rejected.\n\n// Protected Area Start\nimport { Component } from 'react';\nimport { IBlock } from './IBlock';\nimport { runEngine } from './RunEngine';\nimport { Message } from './Message';\nimport MessageEnum, { getName } from './Messages/MessageEnum';\nimport { Keyboard } from 'react-native';\n\nimport * as helper from './Helpers';\nimport { Stream } from 'stream';\n\nexport class BlockComponent<Props, S, SS> extends Component<Props, S, SS>\n  implements IBlock {\n  isLoaded = false;\n\n  send: (message: Message) => void;\n\n  blockId: string;\n\n  subScribedMessages: string[];\n\n  constructor(props: Props) {\n    super(props);\n    const uuidv4 = require('uuid/v4');\n    this.blockId = uuidv4();\n    this.send = message => runEngine.sendMessage(this.blockId, message);\n    this.subScribedMessages = [''];\n    this.hideKeyboard = this.hideKeyboard.bind(this);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  receive(from: string, message: Message): void {}\n\n  async componentDidMount() {\n    this.isLoaded = true;\n  }\n\n  async componentWillUnmount() {\n    this.isLoaded = false;\n    Keyboard.dismiss();\n    runEngine.unSubscribeFromMessages(this, this.subScribedMessages);\n  }\n\n  public toggleState(objectID: string) {\n    this.changeState(objectID, !this.getState(objectID));\n  }\n\n  public changeState(objectID: string, value: any) {\n    switch (objectID) {\n      default:\n        console.log('changeState::Not Confifured for ' + objectID);\n    }\n  }\n\n  public getState(objectID: string) {\n    var testString = '';\n\n    switch (objectID) {\n      case 'testBoolTrue':\n        return true;\n      case 'testBoolFalse':\n        return false;\n      case 'testString':\n        return testString;\n      default:\n        console.log('changeState::Not Confifured for ' + objectID);\n        return null;\n    }\n  }\n\n  public processOnClickMessage(messageID: string, value: any = null) {\n    switch (messageID) {\n      default:\n        console.log('processOnClickMessage::Not Configured for ' + messageID);\n    }\n  }\n\n  public showAlert(\n    title: string,\n    error: string,\n    btnPositiveText?: string,\n    btnPositiveMessage?: Message,\n    btnNegativeText?: string,\n    btnNegativeMessage?: Message,\n    btnNeutralText?: string,\n    btnNeutralMessage?: Message\n  ) {\n    Keyboard.dismiss();\n\n    if (!btnPositiveText && !btnNegativeText && !btnNeutralText) {\n      btnPositiveText = 'Ok';\n    }\n\n    const alertMsg: Message = new Message(getName(MessageEnum.AlertMessage));\n    alertMsg.addData(getName(MessageEnum.AlertTitleMessage), title);\n    alertMsg.addData(getName(MessageEnum.AlertBodyMessage), error);\n    alertMsg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n\n    alertMsg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n\n    alertMsg.addData(\n      getName(MessageEnum.AlertButtonPositiveText),\n      btnPositiveText\n    );\n    alertMsg.addData(\n      getName(MessageEnum.AlertButtonNegativeText),\n      btnNegativeText\n    );\n    alertMsg.addData(\n      getName(MessageEnum.AlertButtonNeutralText),\n      btnNeutralText\n    );\n\n    alertMsg.addData(\n      getName(MessageEnum.AlertButtonPositiveMessage),\n      btnPositiveMessage\n    );\n    alertMsg.addData(\n      getName(MessageEnum.AlertButtonNegativeMessage),\n      btnNegativeMessage\n    );\n    alertMsg.addData(\n      getName(MessageEnum.AlertButtonNeutralMessage),\n      btnNeutralMessage\n    );\n\n    runEngine.sendMessage(alertMsg.id, alertMsg);\n  }\n\n  public parseApiErrorResponse(responseJson: any) {\n    if (!responseJson || !responseJson.errors) {\n      return;\n    }\n    const errors: any[] = responseJson.errors;\n\n    let allerrors = '';\n    errors.map((object: string) => {\n      const newLocal = JSON.stringify(object);\n      JSON.parse(newLocal, (key, value) => {\n        if (value.length > 0) {\n          if (allerrors.length <= 0) {\n            allerrors = value;\n          } else {\n            allerrors = `${allerrors}{\\n}${value}`;\n          }\n        }\n      });\n    });\n\n    this.showAlert('Error', allerrors);\n  }\n\n  public isPlatformWeb() {\n    return helper.getOS() === 'web';\n  }\n\n  public isPlatformiOS() {\n    return helper.getOS() === 'ios';\n  }\n\n  public isPlatformAndroid() {\n    return helper.getOS() === 'android';\n  }\n\n  public parseApiCatchErrorResponse(errorReponse: any) {\n    if (errorReponse) {\n      this.showAlert(\n        'Error',\n        JSON.stringify(errorReponse).replace(new RegExp('\"', 'g'), '')\n      );\n    }\n  }\n\n  public hideKeyboard() {\n    if (!this.isPlatformWeb()) {\n      Keyboard.dismiss();\n    }\n  }\n}\n\n// Protected Area End\n"]},"metadata":{},"sourceType":"module"}