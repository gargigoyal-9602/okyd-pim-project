{"ast":null,"code":"import _regeneratorRuntime from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport MessageEnum, { getName } from \"../../../framework/src/Messages/MessageEnum\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nimport * as Yup from \"yup\"; // Customizable Area Start\n\nimport { imgPasswordInVisible, imgPasswordVisible } from \"./assets\";\nimport { isEmpty } from \"lodash\";\n// Customizable Area End\nexport const configJSON = require(\"./config\");\nexport default class EmailAccountLoginController extends BlockComponent {\n  // Customizable Area Start\n  // Customizable Area End\n  constructor(props) {\n    super(props);\n    this.apiEmailLoginCallId = \"\";\n    this.validationApiCallId = \"\";\n    this.apiEmailCallId = \"\";\n    this.emailReg = void 0;\n    this.labelTitle = \"\";\n\n    this.getToken = () => {\n      const msg = new Message(getName(MessageEnum.SessionRequestMessage));\n      this.send(msg);\n      console.log('msg', msg);\n    };\n\n    this.btnSocialLoginProps = {\n      onClick: () => this.goToSocialLogin()\n    };\n    this.btnPasswordShowHideProps = {\n      onClick: () => {\n        this.setState({\n          errorPassword: '',\n          enablePasswordField: !this.state.enablePasswordField\n        });\n        this.txtInputPasswordProps.secureTextEntry = !this.state.enablePasswordField;\n        this.btnPasswordShowHideImageProps.source = this.txtInputPasswordProps.secureTextEntry ? imgPasswordVisible : imgPasswordInVisible;\n      }\n    };\n    this.CustomCheckBoxProps = {\n      onChange: value => {\n        // console.log('value',value.target.value)\n        this.setState({\n          checkedRememberMe: value\n        });\n        this.CustomCheckBoxProps.isChecked = value;\n      },\n      isChecked: false\n    };\n    this.btnForgotPasswordProps = {\n      onClick: () => this.goToForgotPassword()\n    };\n    this.txtInputPasswordProps = {\n      onChange: text => {\n        this.setState({\n          errorPassword: '',\n          password: text === null || text === void 0 ? void 0 : text.target.value\n        }); //@ts-ignore\n\n        this.txtInputPasswordProps.value = text === null || text === void 0 ? void 0 : text.target.value;\n      },\n      secureTextEntry: true\n    };\n    this.btnPasswordShowHideImageProps = {\n      source: imgPasswordVisible\n    };\n    this.btnSelectDominWebProps = {\n      onChange: text => {\n        console.log('text?.target.value', text === null || text === void 0 ? void 0 : text.target.value);\n        this.setState({\n          selectedDomain: text === null || text === void 0 ? void 0 : text.target.value\n        });\n      }\n    };\n    this.btnRememberMeProps = {\n      onClick: evt => {\n        // console.log('evt.target.checked',evt.target.checked)\n        this.setState({\n          checkedRememberMe: !this.CustomCheckBoxProps.isChecked\n        });\n        this.CustomCheckBoxProps.isChecked = !this.CustomCheckBoxProps.isChecked; // console.log('this.CustomCheckBoxProps.isChecked',this.CustomCheckBoxProps.isChecked)\n        // console.log('this.state',this.state)\n      } // defaultChecked: false,\n      // checked : !this.state?.checkedRememberMe,\n      // value : !this.state?.checkedRememberMe,\n\n    };\n    this.txtInputEmailWebProps = {\n      onChange: text => {\n        this.setState({\n          errorEmail: '',\n          email: text === null || text === void 0 ? void 0 : text.target.value\n        }); //@ts-ignore\n\n        this.txtInputEmailProps.value = text === null || text === void 0 ? void 0 : text.target.value;\n      }\n    };\n    this.txtInputEmailMobileProps = _objectSpread(_objectSpread({}, this.txtInputEmailWebProps), {}, {\n      autoCompleteType: \"email\",\n      keyboardType: \"email-address\"\n    });\n    this.txtInputEmailProps = this.isPlatformWeb() ? this.txtInputEmailWebProps : this.txtInputEmailMobileProps;\n\n    this.openSnackBarHandler = (type, message) => {\n      console.log(\"type,message\", type, message);\n      this.setState({\n        snackBar: {\n          show: true,\n          message: message,\n          type\n        }\n      });\n    };\n\n    this.closeSnackBarHandler = () => {\n      this.setState({\n        snackBar: {\n          show: false,\n          message: this.state.snackBar.message,\n          type: this.state.snackBar.type\n        }\n      });\n    };\n\n    this.doEmailLogIn = values => {\n      console.log(\"values\", values);\n      const header = {\n        \"Content-Type\": configJSON.loginApiContentType\n      };\n      const getDomain = JSON.parse(localStorage.getItem('selectedDomain') || \"[]\");\n      console.log(\"getDomain\", getDomain);\n      !isEmpty(getDomain) && this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n        selectedDomain: getDomain\n      }));\n      const attrs = {\n        email: values.email || localStorage.getItem(\"email\"),\n        password: values.password,\n        domain: this.state.selectedDomain || localStorage.getItem(\"selectedDomain\") // email: \"admin@oked.com\",\n        // password: \"Admin@123\",\n\n      };\n      const data = {\n        type: \"email_account\",\n        attributes: attrs\n      };\n      const httpBody = {\n        data: data\n      };\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage)); // console.log(\"requestMessage\", requestMessage);\n\n      this.apiEmailLoginCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.loginAPiEndPoint);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(header));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(httpBody));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.loginAPiMethod); // console.log(\n      //   \"requestMessage.id, requestMessage\",\n      //   requestMessage.id,\n      //   requestMessage\n      // );\n\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    };\n\n    this.handleEmailLogin = values => {\n      localStorage.setItem('email', values.email);\n      const header = {\n        \"Content-Type\": configJSON.loginApiContentType\n      };\n      const attrs = {\n        email: values.email\n      };\n      const data = {\n        type: \"email_account\",\n        attributes: attrs\n      };\n      const httpBody = {\n        data: data\n      }; // console.log('httpBody',httpBody)\n\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      this.apiEmailCallId = requestMessage.messageId;\n      console.log(\"apiEmailCallId\", this.apiEmailCallId);\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.EmailLoginAPiEndPoint);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(header));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(httpBody));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.loginAPiMethod); // console.log(\n      //   \"requestMessage.id, requestMessage\",\n      //   requestMessage.id,\n      //   requestMessage\n      // );\n\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    };\n\n    this.receive = this.receive.bind(this); // Customizable Area Start\n\n    this.subScribedMessages = [getName(MessageEnum.CountryCodeMessage), getName(MessageEnum.RestAPIResponceMessage), getName(MessageEnum.ReciveUserCredentials)];\n    let EmailSchema = {\n      email: Yup.string().email(configJSON.errorEmailNotValid).required(configJSON.errorEmailRequired),\n      password: Yup.string().required(configJSON.errorPasswordNotValid)\n    };\n    let PasswordOnlySchema = {\n      password: Yup.string().required(configJSON.errorPasswordNotValid)\n    };\n    let EmailOnlySchema = {\n      email: Yup.string().email(configJSON.errorEmailNotValid).required(configJSON.errorEmailRequired)\n    };\n    let inviteSchema = {\n      email: Yup.string().email(configJSON.errorEmailNotValid).required(configJSON.errorEmailRequired),\n      domainName: Yup.string().required(configJSON.errorDomainRequired)\n    };\n    this.state = {\n      email: \"\",\n      password: \"\",\n      enablePasswordField: true,\n      checkedRememberMe: false,\n      placeHolderEmail: configJSON.placeHolderEmail,\n      placeHolderPassword: configJSON.placeHolderPassword,\n      imgPasswordVisible: configJSON.imgPasswordVisible,\n      imgPasswordInVisible: imgPasswordInVisible,\n      labelHeader: configJSON.labelHeader,\n      btnTxtLogin: configJSON.btnTxtLogin,\n      labelRememberMe: configJSON.labelRememberMe,\n      btnTxtSocialLogin: configJSON.btnTxtSocialLogin,\n      labelOr: configJSON.labelOr,\n      errorEmail: '',\n      errorPassword: '',\n      domain: [],\n      selectedDomain: '',\n      EmailSchema: EmailSchema,\n      PasswordOnlySchema: PasswordOnlySchema,\n      EmailOnlySchema: EmailOnlySchema,\n      inviteSchema: inviteSchema,\n      snackBar: {\n        show: false\n      }\n    };\n    this.emailReg = new RegExp(\"\");\n    this.labelTitle = configJSON.labelTitle; // Customizable Area End\n\n    runEngine.attachBuildingBlock(this, this.subScribedMessages);\n  }\n\n  componentDidMount() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var lsdomain, lsSelecteDomain, lsEmail;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            // this.callGetValidationApi(); email\n            _this.send(new Message(getName(MessageEnum.RequestUserCredentials))); // Customizable Area Start\n\n\n            lsdomain = localStorage.getItem('domain') || '[]';\n            lsSelecteDomain = localStorage.getItem('selectedDomain') || '';\n            lsEmail = localStorage.getItem('email') || '';\n            !isEmpty(lsdomain) && _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n              domain: lsdomain\n            })) && console.log('lsdomain', lsdomain);\n            !isEmpty(lsSelecteDomain) && _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n              selectedDomain: lsSelecteDomain\n            }));\n            !isEmpty(lsEmail) && _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n              email: lsEmail\n            })); // Customizable Area End\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  }\n\n  // Customizable Area End\n  receive(from, message) {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var responseJson, errorReponse, apiRequestCallId, errors, _this2$props4;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            // Customizable Area Start\n            // runEngine.debugLog(\"runEngine.debugLog\", message);\n            if (getName(MessageEnum.RestAPIResponceMessage) === message.id) {\n              responseJson = message.getData(getName(MessageEnum.RestAPIResponceSuccessMessage));\n              errorReponse = message.getData(getName(MessageEnum.RestAPIResponceErrorMessage));\n              apiRequestCallId = message.getData(getName(MessageEnum.RestAPIResponceDataMessage));\n\n              if (responseJson && !responseJson.errors) {\n                if (apiRequestCallId != null) {\n                  console.log(\"responseJson\", responseJson); // \n\n                  if (apiRequestCallId === _this2.apiEmailLoginCallId && responseJson !== undefined) {\n                    // this.openSnackBarHandler('success', configJSON.successLogin);\n                    setTimeout(() => {\n                      //@ts-ignore\n                      _this2.saveLoggedInUserData(responseJson);\n\n                      _this2.sendLoginSuccessMessage();\n\n                      _this2.openInfoPage();\n                    }, 1000);\n                  } // \n\n\n                  if (apiRequestCallId === _this2.apiEmailCallId && responseJson !== undefined) {\n                    //this.openSnackBarHandler('success', configJSON.successLogin);\n                    setTimeout(() => {\n                      if (responseJson.success === false) {\n                        var _this2$props;\n\n                        //@ts-ignore\n                        (_this2$props = _this2.props) === null || _this2$props === void 0 ? void 0 : _this2$props.history.push('email-account-Login-welcome');\n                      } else {\n                        runEngine.unSubscribeFromMessages(_this2, _this2.subScribedMessages);\n\n                        _this2.setState({\n                          domain: responseJson.domain\n                        });\n\n                        const msg = new Message(getName(MessageEnum.LoginSuccessMessage));\n                        msg.addData(getName(MessageEnum.DomainNameMessage), _this2.state.domain);\n                        localStorage.setItem('domain', JSON.stringify(responseJson.domain));\n\n                        if (isEmpty(responseJson.domain)) {\n                          var _this2$props2;\n\n                          //@ts-ignore\n                          (_this2$props2 = _this2.props) === null || _this2$props2 === void 0 ? void 0 : _this2$props2.history.push('email-account-Login-welcome');\n                        } else {\n                          var _this2$props3;\n\n                          console.log(responseJson, \"this is your domain name\"); //@ts-ignore\n\n                          (_this2$props3 = _this2.props) === null || _this2$props3 === void 0 ? void 0 : _this2$props3.history.push(\"select-domain\");\n                        }\n                      }\n                    }, 1000);\n                  }\n                }\n              } else {\n                errors = responseJson.errors;\n\n                _this2.parseApiCatchErrorResponse(errorReponse);\n\n                console.log(\"Inside\", errors[0].failed_login);\n                console.log('errors', errors);\n\n                if (errors[0].token === 'Invalid token' || errors[0].token === 'Token has Expired') {\n                  localStorage.setItem(\"auth\", \"\"); //@ts-ignore\n\n                  (_this2$props4 = _this2.props) === null || _this2$props4 === void 0 ? void 0 : _this2$props4.history.push(\"/login\");\n                } else if (errors[0].message) {\n                  _this2.openSnackBarHandler('error', errors[0].message);\n                } else if (errors[0].failed_login) {\n                  _this2.openSnackBarHandler('error', errors[0].failed_login);\n                }\n              }\n            } // Customizable Area End this.apiEmailCallId\n\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }))();\n  } // Open View Details Modal\n\n\n  sendLoginFailMessage() {\n    const msg = new Message(getName(MessageEnum.LoginFaliureMessage));\n    this.send(msg);\n  }\n\n  sendLoginSuccessMessage() {\n    const msg = new Message(getName(MessageEnum.LoginSuccessMessage));\n    msg.addData(getName(MessageEnum.LoginUserName), this.state.email);\n    msg.addData(getName(MessageEnum.CountyCodeDataMessage), null);\n    msg.addData(getName(MessageEnum.LoginPassword), this.state.password);\n    msg.addData(getName(MessageEnum.LoginIsRememberMe), this.state.checkedRememberMe);\n    this.send(msg);\n  }\n\n  saveLoggedInUserData(responseJson) {\n    console.log('responseJsonresponseJson', responseJson);\n\n    if (responseJson && responseJson.meta && responseJson.meta.token) {\n      const msg = new Message(getName(MessageEnum.SessionSaveMessage));\n      msg.addData(getName(MessageEnum.SessionResponseData), JSON.stringify(responseJson));\n      msg.addData(getName(MessageEnum.SessionResponseToken), responseJson.meta.token); // AsyncStorage.setItem('token', responseJson.meta.token)\n\n      localStorage.setItem('auth', responseJson.meta.token);\n      localStorage.setItem('user_type', responseJson.meta.account.user_type);\n      localStorage.setItem('fullname', responseJson.meta.account.fullname);\n      this.send(msg);\n    }\n  }\n\n  openInfoPage() {\n    // const msg: Message = new Message(getName(MessageEnum.AccoutLoginSuccess));\n    // console.log('msg',msg)\n    // console.log('this.props',this.props)\n    // msg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n    // this.send(msg);\n    // localStorage.setItem('auth',);\n    // alert('Login Successful')\n    //@ts-ignore\n    this.props.history.push(\"/\"); // this.props.history.push(\"select-domain\")\n  }\n\n  goToForgotPassword() {\n    const msg = new Message(getName(MessageEnum.NavigationForgotPasswordMessage));\n    msg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n    msg.addData(getName(MessageEnum.NavigationForgotPasswordPageInfo), \"email\");\n    this.send(msg);\n  }\n\n  goToSocialLogin() {\n    const msg = new Message(getName(MessageEnum.NavigationSocialLogInMessage));\n    msg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n    this.send(msg);\n  }\n\n  handleDomainSelection() {\n    // console.log(\"API HIT\");\n    // console.log('this.state',this.state)\n    if (this.state.selectedDomain === '' || isEmpty(this.state.selectedDomain)) {\n      this.openSnackBarHandler('error', \"Domain is not Selected\"); // alert('Domain is not Selected')\n\n      return false;\n    } else {\n      var _this$props;\n\n      localStorage.setItem('selectedDomain', JSON.stringify(this.state.selectedDomain)); //@ts-ignore\n\n      (_this$props = this.props) === null || _this$props === void 0 ? void 0 : _this$props.history.push('email-account-Login-welcome');\n      return true;\n    }\n  }\n\n  callGetValidationApi() {\n    const headers = {\n      \"Content-Type\": configJSON.validationApiContentType\n    };\n    const getValidationsMsg = new Message(getName(MessageEnum.RestAPIRequestMessage));\n    this.validationApiCallId = getValidationsMsg.messageId;\n    getValidationsMsg.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.urlGetValidations);\n    getValidationsMsg.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n    getValidationsMsg.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.validationApiMethodType);\n    runEngine.sendMessage(getValidationsMsg.id, getValidationsMsg);\n  }\n\n}","map":{"version":3,"sources":["/home/lp-greenapex/gargi/okydpim-36944-react-native/src/packages/blocks/email-account-login/src/EmailAccountLoginController.web.tsx"],"names":["Message","BlockComponent","MessageEnum","getName","runEngine","Yup","imgPasswordInVisible","imgPasswordVisible","isEmpty","configJSON","require","EmailAccountLoginController","constructor","props","apiEmailLoginCallId","validationApiCallId","apiEmailCallId","emailReg","labelTitle","getToken","msg","SessionRequestMessage","send","console","log","btnSocialLoginProps","onClick","goToSocialLogin","btnPasswordShowHideProps","setState","errorPassword","enablePasswordField","state","txtInputPasswordProps","secureTextEntry","btnPasswordShowHideImageProps","source","CustomCheckBoxProps","onChange","value","checkedRememberMe","isChecked","btnForgotPasswordProps","goToForgotPassword","text","password","target","btnSelectDominWebProps","selectedDomain","btnRememberMeProps","evt","txtInputEmailWebProps","errorEmail","email","txtInputEmailProps","txtInputEmailMobileProps","autoCompleteType","keyboardType","isPlatformWeb","openSnackBarHandler","type","message","snackBar","show","closeSnackBarHandler","doEmailLogIn","values","header","loginApiContentType","getDomain","JSON","parse","localStorage","getItem","attrs","domain","data","attributes","httpBody","requestMessage","RestAPIRequestMessage","messageId","addData","RestAPIResponceEndPointMessage","loginAPiEndPoint","RestAPIRequestHeaderMessage","stringify","RestAPIRequestBodyMessage","RestAPIRequestMethodMessage","loginAPiMethod","sendMessage","id","handleEmailLogin","setItem","EmailLoginAPiEndPoint","receive","bind","subScribedMessages","CountryCodeMessage","RestAPIResponceMessage","ReciveUserCredentials","EmailSchema","string","errorEmailNotValid","required","errorEmailRequired","errorPasswordNotValid","PasswordOnlySchema","EmailOnlySchema","inviteSchema","domainName","errorDomainRequired","placeHolderEmail","placeHolderPassword","labelHeader","btnTxtLogin","labelRememberMe","btnTxtSocialLogin","labelOr","RegExp","attachBuildingBlock","componentDidMount","RequestUserCredentials","lsdomain","lsSelecteDomain","lsEmail","from","responseJson","getData","RestAPIResponceSuccessMessage","errorReponse","RestAPIResponceErrorMessage","apiRequestCallId","RestAPIResponceDataMessage","errors","undefined","setTimeout","saveLoggedInUserData","sendLoginSuccessMessage","openInfoPage","success","history","push","unSubscribeFromMessages","LoginSuccessMessage","DomainNameMessage","parseApiCatchErrorResponse","failed_login","token","sendLoginFailMessage","LoginFaliureMessage","LoginUserName","CountyCodeDataMessage","LoginPassword","LoginIsRememberMe","meta","SessionSaveMessage","SessionResponseData","SessionResponseToken","account","user_type","fullname","NavigationForgotPasswordMessage","NavigationPropsMessage","NavigationForgotPasswordPageInfo","NavigationSocialLogInMessage","handleDomainSelection","callGetValidationApi","headers","validationApiContentType","getValidationsMsg","urlGetValidations","validationApiMethodType"],"mappings":"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","sourcesContent":["import { IBlock } from \"../../../framework/src/IBlock\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport MessageEnum, {\n  getName,\n} from \"../../../framework/src/Messages/MessageEnum\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nimport * as Yup from \"yup\";\n// Customizable Area Start\nimport { imgPasswordInVisible, imgPasswordVisible } from \"./assets\";\nimport { isEmpty } from \"lodash\";\nimport { AsyncStorage } from \"react-native\";\n// Customizable Area End\n\nexport const configJSON = require(\"./config\");\n\nexport interface Props {\n  navigation: any;\n  id: string;\n  // Customizable Area Start\n  // Customizable Area End\n}\n\ninterface S {\n  // Customizable Area Start\n  password: string;\n  email: string;\n  enablePasswordField: boolean;\n  checkedRememberMe: boolean;\n  placeHolderEmail: string;\n  placeHolderPassword: string;\n  imgPasswordVisible: any;\n  imgPasswordInVisible: any;\n  labelHeader: string;\n  btnTxtLogin: string;\n  labelRememberMe: string;\n  btnTxtSocialLogin: string;\n  labelOr: string;\n  errorEmail: string;\n  errorPassword: string;\n  domain: any;\n  selectedDomain: string;\n  EmailSchema: any;\n  PasswordOnlySchema: any;\n  EmailOnlySchema: any;\n  inviteSchema: any;\n  snackBar: {\n    show: boolean,\n    message?: string,\n    type?: \"success\" | \"info\" | \"warning\" | \"error\" | undefined\n  };\n  // Customizable Area End\n}\n\ninterface SS {\n  // Customizable Area Start\n  id: any;\n  // Customizable Area End\n}\n\nexport default class EmailAccountLoginController extends BlockComponent<\n  Props,\n  S,\n  SS\n  > {\n  // Customizable Area Start\n  apiEmailLoginCallId: string = \"\";\n  validationApiCallId: string = \"\";\n  apiEmailCallId: string = \"\";\n\n  emailReg: RegExp;\n  labelTitle: string = \"\";\n  // Customizable Area End\n\n  constructor(props: Props) {\n    super(props);\n    this.receive = this.receive.bind(this);\n\n    // Customizable Area Start\n    this.subScribedMessages = [\n      getName(MessageEnum.CountryCodeMessage),\n      getName(MessageEnum.RestAPIResponceMessage),\n      getName(MessageEnum.ReciveUserCredentials),\n    ];\n\n    let EmailSchema = {\n      email: Yup.string()\n        .email(configJSON.errorEmailNotValid)\n        .required(configJSON.errorEmailRequired),\n      password: Yup.string()\n        .required(configJSON.errorPasswordNotValid),\n    };\n\n    let PasswordOnlySchema = {\n      password: Yup.string()\n        .required(configJSON.errorPasswordNotValid),\n    };\n\n    let EmailOnlySchema = {\n      email: Yup.string()\n        .email(configJSON.errorEmailNotValid)\n        .required(configJSON.errorEmailRequired),\n    }\n\n    let inviteSchema = {\n      email: Yup.string()\n        .email(configJSON.errorEmailNotValid)\n        .required(configJSON.errorEmailRequired),\n      domainName: Yup.string()\n        .required(configJSON.errorDomainRequired),\n    };\n\n\n\n    this.state = {\n      email: \"\",\n      password: \"\",\n      enablePasswordField: true,\n      checkedRememberMe: false,\n      placeHolderEmail: configJSON.placeHolderEmail,\n      placeHolderPassword: configJSON.placeHolderPassword,\n      imgPasswordVisible: configJSON.imgPasswordVisible,\n      imgPasswordInVisible: imgPasswordInVisible,\n      labelHeader: configJSON.labelHeader,\n      btnTxtLogin: configJSON.btnTxtLogin,\n      labelRememberMe: configJSON.labelRememberMe,\n      btnTxtSocialLogin: configJSON.btnTxtSocialLogin,\n      labelOr: configJSON.labelOr,\n      errorEmail: '',\n      errorPassword: '',\n      domain: [],\n      selectedDomain: '',\n      EmailSchema: EmailSchema,\n      PasswordOnlySchema: PasswordOnlySchema,\n      EmailOnlySchema: EmailOnlySchema,\n      inviteSchema: inviteSchema,\n      snackBar: {\n        show: false,\n      },\n    };\n\n    this.emailReg = new RegExp(\"\");\n    this.labelTitle = configJSON.labelTitle;\n    // Customizable Area End\n\n    runEngine.attachBuildingBlock(this as IBlock, this.subScribedMessages);\n  }\n\n  async componentDidMount() {\n    // this.callGetValidationApi(); email\n    this.send(new Message(getName(MessageEnum.RequestUserCredentials)));\n    // Customizable Area Start\n    const lsdomain = localStorage.getItem('domain') || '[]'\n    const lsSelecteDomain = localStorage.getItem('selectedDomain') || ''\n    const lsEmail = localStorage.getItem('email') || ''\n\n    !isEmpty(lsdomain) && this.setState({ ...this.state, domain: lsdomain }) && console.log('lsdomain', lsdomain)\n    !isEmpty(lsSelecteDomain) && this.setState({ ...this.state, selectedDomain: lsSelecteDomain })\n    !isEmpty(lsEmail) && this.setState({ ...this.state, email: lsEmail })\n    // Customizable Area End\n  }\n  getToken = () => {\n    const msg: Message = new Message(\n      getName(MessageEnum.SessionRequestMessage)\n    );\n    this.send(msg);\n    console.log('msg', msg)\n\n  };\n\n  // Customizable Area Start\n  btnSocialLoginProps = {\n    onClick: () => this.goToSocialLogin(),\n  };\n\n  btnPasswordShowHideProps = {\n    onClick: () => {\n      this.setState({ errorPassword: '', enablePasswordField: !this.state.enablePasswordField });\n      this.txtInputPasswordProps.secureTextEntry = !this.state\n        .enablePasswordField;\n      this.btnPasswordShowHideImageProps.source = this.txtInputPasswordProps\n        .secureTextEntry\n        ? imgPasswordVisible\n        : imgPasswordInVisible;\n    },\n  };\n\n\n  CustomCheckBoxProps = {\n    onChange: (value: any) => {\n      // console.log('value',value.target.value)\n      this.setState({ checkedRememberMe: value });\n      this.CustomCheckBoxProps.isChecked = value;\n    },\n    isChecked: false,\n  };\n\n  btnForgotPasswordProps = {\n    onClick: () => this.goToForgotPassword(),\n  };\n\n  txtInputPasswordProps = {\n    onChange: (text: any) => {\n      this.setState({ errorPassword: '', password: text?.target.value });\n\n      //@ts-ignore\n      this.txtInputPasswordProps.value = text?.target.value;\n    },\n    secureTextEntry: true,\n  };\n\n  btnPasswordShowHideImageProps = {\n    source: imgPasswordVisible,\n  };\n\n  btnSelectDominWebProps = {\n    onChange: (text: any) => {\n      console.log('text?.target.value', text?.target.value)\n      this.setState({ selectedDomain: text?.target.value });\n    },\n  };\n\n  btnRememberMeProps = {\n    onClick: (evt: any) => {\n      // console.log('evt.target.checked',evt.target.checked)\n      this.setState({ checkedRememberMe: !this.CustomCheckBoxProps.isChecked });\n      this.CustomCheckBoxProps.isChecked = !this.CustomCheckBoxProps.isChecked;\n      // console.log('this.CustomCheckBoxProps.isChecked',this.CustomCheckBoxProps.isChecked)\n      // console.log('this.state',this.state)\n    },\n    // defaultChecked: false,\n    // checked : !this.state?.checkedRememberMe,\n    // value : !this.state?.checkedRememberMe,\n  };\n\n  txtInputEmailWebProps = {\n    onChange: (text: any) => {\n      this.setState({ errorEmail: '', email: text?.target.value });\n      //@ts-ignore\n      this.txtInputEmailProps.value = text?.target.value;\n    },\n  };\n\n  txtInputEmailMobileProps = {\n    ...this.txtInputEmailWebProps,\n    autoCompleteType: \"email\",\n    keyboardType: \"email-address\",\n  };\n\n  txtInputEmailProps = this.isPlatformWeb()\n    ? this.txtInputEmailWebProps\n    : this.txtInputEmailMobileProps;\n\n  // Customizable Area End\n\n  async receive(from: string, message: Message) {\n    // Customizable Area Start\n    // runEngine.debugLog(\"runEngine.debugLog\", message);\n\n    if (getName(MessageEnum.RestAPIResponceMessage) === message.id) {\n      var responseJson = message.getData(\n        getName(MessageEnum.RestAPIResponceSuccessMessage)\n      );\n      var errorReponse = message.getData(\n        getName(MessageEnum.RestAPIResponceErrorMessage)\n      );\n      const apiRequestCallId = message.getData(\n        getName(MessageEnum.RestAPIResponceDataMessage)\n      );\n      if (responseJson && !responseJson.errors) {\n        if (apiRequestCallId != null) {\n          console.log(\"responseJson\", responseJson)\n          // \n          if (apiRequestCallId === this.apiEmailLoginCallId && responseJson !== undefined) {\n            // this.openSnackBarHandler('success', configJSON.successLogin);\n            setTimeout(() => {\n              //@ts-ignore\n              this.saveLoggedInUserData(responseJson);\n              this.sendLoginSuccessMessage();\n              this.openInfoPage();\n            }, 1000);\n          }\n\n          // \n          if (apiRequestCallId === this.apiEmailCallId && responseJson !== undefined) {\n            //this.openSnackBarHandler('success', configJSON.successLogin);\n            setTimeout(() => {\n              if (responseJson.success === false) {\n                //@ts-ignore\n                this.props?.history.push('email-account-Login-welcome')\n              } else {\n                runEngine.unSubscribeFromMessages(this, this.subScribedMessages);\n                this.setState({\n                  domain: responseJson.domain\n                })\n                const msg: Message = new Message(getName(MessageEnum.LoginSuccessMessage));\n                msg.addData(getName(MessageEnum.DomainNameMessage), this.state.domain);\n                localStorage.setItem('domain', JSON.stringify(responseJson.domain));\n                if (isEmpty(responseJson.domain)) {\n                  //@ts-ignore\n                  this.props?.history.push('email-account-Login-welcome')\n                } else {\n                  console.log(responseJson, \"this is your domain name\")\n                  //@ts-ignore\n                  this.props?.history.push(\"select-domain\")\n                }\n              }\n            }, 1000);\n          }\n        }\n      } else {\n        const errors = responseJson.errors;\n        this.parseApiCatchErrorResponse(errorReponse);\n        console.log(\"Inside\", errors[0].failed_login)\n        console.log('errors', errors)\n        if (errors[0].token === 'Invalid token' || errors[0].token === 'Token has Expired') {\n          localStorage.setItem(\"auth\", \"\");\n          //@ts-ignore\n          this.props?.history.push(\"/login\");\n        } else if (errors[0].message) {\n          this.openSnackBarHandler('error', errors[0].message);\n        } else if (errors[0].failed_login) {\n          this.openSnackBarHandler('error', errors[0].failed_login);\n        }\n      }\n    }\n    // Customizable Area End this.apiEmailCallId\n  }\n\n\n  // Open View Details Modal\n  openSnackBarHandler = (type: \"success\" | \"info\" | \"warning\" | \"error\" | undefined, message: string): void => {\n    console.log(\"type,message\", type, message)\n    this.setState({\n      snackBar: {\n        show: true,\n        message: message,\n        type\n      }\n    });\n  };\n\n  // Close View Details Modal\n  closeSnackBarHandler = () => {\n    this.setState({\n      snackBar: {\n        show: false,\n        message: this.state.snackBar.message,\n        type: this.state.snackBar.type\n      }\n    });\n  };\n\n  sendLoginFailMessage() {\n    const msg: Message = new Message(getName(MessageEnum.LoginFaliureMessage));\n    this.send(msg);\n  }\n\n  sendLoginSuccessMessage() {\n    const msg: Message = new Message(getName(MessageEnum.LoginSuccessMessage));\n\n    msg.addData(getName(MessageEnum.LoginUserName), this.state.email);\n    msg.addData(getName(MessageEnum.CountyCodeDataMessage), null);\n    msg.addData(getName(MessageEnum.LoginPassword), this.state.password);\n    msg.addData(\n      getName(MessageEnum.LoginIsRememberMe),\n      this.state.checkedRememberMe\n    );\n\n    this.send(msg);\n  }\n\n  saveLoggedInUserData(responseJson: any) {\n    console.log('responseJsonresponseJson', responseJson)\n    if (responseJson && responseJson.meta && responseJson.meta.token) {\n      const msg: Message = new Message(getName(MessageEnum.SessionSaveMessage));\n\n      msg.addData(\n        getName(MessageEnum.SessionResponseData),\n        JSON.stringify(responseJson)\n      );\n      msg.addData(\n        getName(MessageEnum.SessionResponseToken),\n        responseJson.meta.token\n      );\n      // AsyncStorage.setItem('token', responseJson.meta.token)\n\n      localStorage.setItem('auth', responseJson.meta.token)\n      localStorage.setItem('user_type', responseJson.meta.account.user_type)\n      localStorage.setItem('fullname', responseJson.meta.account.fullname)\n\n\n\n      this.send(msg);\n\n\n    }\n  }\n\n  openInfoPage() {\n    // const msg: Message = new Message(getName(MessageEnum.AccoutLoginSuccess));\n    // console.log('msg',msg)\n    // console.log('this.props',this.props)\n    // msg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n\n    // this.send(msg);\n\n    // localStorage.setItem('auth',);\n    // alert('Login Successful')\n    //@ts-ignore\n    this.props.history.push(\"/\");\n    // this.props.history.push(\"select-domain\")\n  }\n\n  goToForgotPassword() {\n    const msg: Message = new Message(\n      getName(MessageEnum.NavigationForgotPasswordMessage)\n    );\n    msg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n    msg.addData(getName(MessageEnum.NavigationForgotPasswordPageInfo), \"email\");\n    this.send(msg);\n  }\n\n  goToSocialLogin() {\n    const msg: Message = new Message(\n      getName(MessageEnum.NavigationSocialLogInMessage)\n    );\n    msg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n    this.send(msg);\n  }\n\n  doEmailLogIn = (values: any): Boolean => {\n    console.log(\"values\", values)\n    const header = {\n      \"Content-Type\": configJSON.loginApiContentType,\n    };\n\n    const getDomain = JSON.parse(localStorage.getItem('selectedDomain') || \"[]\")\n    console.log(\"getDomain\", getDomain)\n    !isEmpty(getDomain) && this.setState({ ...this.state, selectedDomain: getDomain })\n    const attrs = {\n      email: values.email || localStorage.getItem(\"email\"),\n      password: values.password,\n      domain: this.state.selectedDomain || localStorage.getItem(\"selectedDomain\")\n      // email: \"admin@oked.com\",\n      // password: \"Admin@123\",\n    };\n\n    const data = {\n      type: \"email_account\",\n      attributes: attrs,\n    };\n\n    const httpBody = {\n      data: data,\n    };\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n    // console.log(\"requestMessage\", requestMessage);\n    this.apiEmailLoginCallId = requestMessage.messageId;\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.loginAPiEndPoint\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(header)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestBodyMessage),\n      JSON.stringify(httpBody)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.loginAPiMethod\n    );\n\n    // console.log(\n    //   \"requestMessage.id, requestMessage\",\n    //   requestMessage.id,\n    //   requestMessage\n    // );\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n\n    return true;\n  }\n\n  handleEmailLogin = (values: any): Boolean => {\n    localStorage.setItem('email', values.email)\n\n    const header = {\n      \"Content-Type\": configJSON.loginApiContentType,\n    };\n\n    const attrs = {\n      email: values.email,\n    };\n\n    const data = {\n      type: \"email_account\",\n      attributes: attrs,\n    };\n\n    const httpBody = {\n      data: data,\n    };\n    // console.log('httpBody',httpBody)\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n    this.apiEmailCallId = requestMessage.messageId;\n    console.log(\"apiEmailCallId\", this.apiEmailCallId);\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.EmailLoginAPiEndPoint\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(header)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestBodyMessage),\n      JSON.stringify(httpBody)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.loginAPiMethod\n    );\n\n    // console.log(\n    //   \"requestMessage.id, requestMessage\",\n    //   requestMessage.id,\n    //   requestMessage\n    // );\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n\n    return true;\n  }\n\n  handleDomainSelection(): Boolean {\n    // console.log(\"API HIT\");\n    // console.log('this.state',this.state)\n    if (\n      this.state.selectedDomain === '' ||\n      isEmpty(this.state.selectedDomain)\n    ) {\n      this.openSnackBarHandler('error', \"Domain is not Selected\");\n      // alert('Domain is not Selected')\n      return false;\n    }\n    else {\n      localStorage.setItem('selectedDomain', JSON.stringify(this.state.selectedDomain));\n      //@ts-ignore\n      this.props?.history.push('email-account-Login-welcome')\n      return true;\n    }\n  }\n\n  callGetValidationApi() {\n    const headers = {\n      \"Content-Type\": configJSON.validationApiContentType,\n    };\n\n    const getValidationsMsg = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n    this.validationApiCallId = getValidationsMsg.messageId;\n\n    getValidationsMsg.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.urlGetValidations\n    );\n\n    getValidationsMsg.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(headers)\n    );\n    getValidationsMsg.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.validationApiMethodType\n    );\n    runEngine.sendMessage(getValidationsMsg.id, getValidationsMsg);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}