{"ast":null,"code":"import _regeneratorRuntime from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/packages/blocks/info-page/src/InfoPageBlock.tsx\";\nimport React from \"react\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nimport MessageEnum, { getName } from \"../../../framework/src/Messages/MessageEnum\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nexport default class InfoPageBlock extends BlockComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: \"An error has occured.\",\n      buttonText: \"Ok\",\n      buttonMessage: new Message(\"\"),\n      title: \"ERROR\"\n    };\n    this.subScribedMessages = [getName(MessageEnum.RestAPIResponceMessage), getName(MessageEnum.NavigationPayLoadMessage)];\n    this.receive = this.receive.bind(this);\n    runEngine.attachBuildingBlock(this, this.subScribedMessages);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(ScrollView, {\n      style: styles.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }, this.isPlatformWeb() ? /*#__PURE__*/React.createElement(Text, {\n      style: styles.labelTitle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }\n    }, \"Information\") : null, /*#__PURE__*/React.createElement(Text, {\n      style: {\n        fontSize: 20,\n        marginTop: 40,\n        marginBottom: 40\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }, this.state.message), /*#__PURE__*/React.createElement(View, {\n      style: this.isPlatformWeb() ? styles.btnStyleWebContainer : styles.btnStyleMobileContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TouchableOpacity, {\n      onPress: () => this.send(this.state.buttonMessage),\n      style: this.isPlatformWeb() ? styles.btnStyleWeb : styles.btnStyleMobile,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onPress: () => this.send(this.state.buttonMessage),\n      title: this.state.buttonText,\n      color: \"#6200EE\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 15\n      }\n    })))));\n  }\n\n  receive(from, message) {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var title, content, buttonText, buttonMessage;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            if (getName(MessageEnum.NavigationPayLoadMessage) === message.id) {\n              title = message.getData(getName(MessageEnum.InfoPageTitleMessage));\n              content = message.getData(getName(MessageEnum.InfoPageBodyMessage));\n              buttonText = message.getData(getName(MessageEnum.InfoPageButtonTextMessage));\n              buttonMessage = message.getData(getName(MessageEnum.InfoPageNavigationScreenMessage));\n\n              _this.setState({\n                message: content,\n                title: title,\n                buttonMessage: buttonMessage,\n                buttonText: buttonText\n              });\n            }\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  }\n\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    width: Platform.OS === \"web\" ? \"75%\" : \"100%\",\n    maxWidth: 650,\n    padding: 16,\n    backgroundColor: \"#fff\"\n  },\n  labelTitle: {\n    marginTop: 24,\n    marginBottom: 32,\n    fontSize: 32,\n    textAlign: \"left\",\n    marginVertical: 8,\n    color: \"#6200EE\"\n  },\n  btnStyleWebContainer: {\n    justifyContent: \"flex-end\",\n    flexDirection: \"row\"\n  },\n  btnStyleMobileContainer: {},\n  btnStyleWeb: {\n    paddingLeft: 50,\n    paddingRight: 50,\n    backgroundColor: \"#6200EE\"\n  },\n  btnStyleMobile: {}\n});","map":{"version":3,"sources":["/home/lp-greenapex/gargi/okydpim-36944-react-native/src/packages/blocks/info-page/src/InfoPageBlock.tsx"],"names":["React","Message","BlockComponent","runEngine","MessageEnum","getName","InfoPageBlock","constructor","props","state","message","buttonText","buttonMessage","title","subScribedMessages","RestAPIResponceMessage","NavigationPayLoadMessage","receive","bind","attachBuildingBlock","render","styles","container","isPlatformWeb","labelTitle","fontSize","marginTop","marginBottom","btnStyleWebContainer","btnStyleMobileContainer","send","btnStyleWeb","btnStyleMobile","from","id","getData","InfoPageTitleMessage","content","InfoPageBodyMessage","InfoPageButtonTextMessage","InfoPageNavigationScreenMessage","setState","StyleSheet","create","flex","marginLeft","marginRight","width","Platform","OS","maxWidth","padding","backgroundColor","textAlign","marginVertical","color","justifyContent","flexDirection","paddingLeft","paddingRight"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport { IBlock } from \"../../../framework/src/IBlock\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nimport MessageEnum, {\n  getName\n} from \"../../../framework/src/Messages/MessageEnum\";\n\nimport {\n  StyleSheet,\n  Text,\n  View,\n  Button,\n  ScrollView,\n  Platform,\n  TouchableOpacity\n} from \"react-native\";\n\ninterface Props {\n  navigation: any;\n  id: string;\n}\n\ninterface S {\n  message: string;\n  title: string;\n  buttonText: string;\n  buttonMessage: Message;\n}\n\ninterface SS {\n  id: any;\n}\n\nexport default class InfoPageBlock extends BlockComponent<Props, S, SS> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      message: \"An error has occured.\",\n      buttonText: \"Ok\",\n      buttonMessage: new Message(\"\"),\n      title: \"ERROR\"\n    };\n\n    this.subScribedMessages = [\n      getName(MessageEnum.RestAPIResponceMessage),\n      getName(MessageEnum.NavigationPayLoadMessage)\n    ];\n\n    this.receive = this.receive.bind(this);\n    runEngine.attachBuildingBlock(this as IBlock, this.subScribedMessages);\n  }\n\n  render() {\n \n    return (\n      <ScrollView style={styles.container}>\n        <View>\n          {this.isPlatformWeb() ? (\n            <Text style={styles.labelTitle}>Information</Text>\n          ) : null}\n\n          <Text\n            style={{\n              fontSize: 20,\n              marginTop: 40,\n              marginBottom: 40\n            }}\n          >\n            {this.state.message}\n          </Text>\n\n          <View\n            style={\n              this.isPlatformWeb()\n                ? styles.btnStyleWebContainer\n                : styles.btnStyleMobileContainer\n            }\n          >\n            <TouchableOpacity\n              onPress={() => this.send(this.state.buttonMessage)}\n              style={\n                this.isPlatformWeb()\n                  ? styles.btnStyleWeb\n                  : styles.btnStyleMobile\n              }\n            >\n              <Button\n                onPress={() => this.send(this.state.buttonMessage)}\n                title={this.state.buttonText}\n                color=\"#6200EE\"\n              />\n            </TouchableOpacity>\n          </View>\n        </View>\n      </ScrollView>\n    );\n  }\n\n  async receive(from: String, message: Message) {\n    if (getName(MessageEnum.NavigationPayLoadMessage) === message.id) {\n      const title = message.getData(getName(MessageEnum.InfoPageTitleMessage));\n      var content = message.getData(getName(MessageEnum.InfoPageBodyMessage));\n\n      var buttonText = message.getData(\n        getName(MessageEnum.InfoPageButtonTextMessage)\n      );\n\n      var buttonMessage = message.getData(\n        getName(MessageEnum.InfoPageNavigationScreenMessage)\n      );\n\n      this.setState({\n        message: content,\n        title: title,\n        buttonMessage: buttonMessage,\n        buttonText: buttonText\n      });\n    }\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    width: Platform.OS === \"web\" ? \"75%\" : \"100%\",\n    maxWidth: 650,\n    padding: 16,\n    backgroundColor: \"#fff\"\n  },\n  labelTitle: {\n    marginTop: 24,\n    marginBottom: 32,\n    fontSize: 32,\n    textAlign: \"left\",\n    marginVertical: 8,\n    color: \"#6200EE\"\n  },\n\n  btnStyleWebContainer: { justifyContent: \"flex-end\", flexDirection: \"row\" },\n  btnStyleMobileContainer: {},\n\n  btnStyleWeb: {\n    paddingLeft: 50,\n    paddingRight: 50,\n    backgroundColor: \"#6200EE\"\n  },\n  btnStyleMobile: {}\n});\n"]},"metadata":{},"sourceType":"module"}