{"ast":null,"code":"import _objectSpread from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/react-native-vector-icons/lib/toolbar-android.js\";\n\n/* eslint-disable react/no-unused-prop-types */\nimport isEqual from 'lodash/isEqual';\nimport pick from 'lodash/pick';\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { ToolbarAndroid } from './react-native';\nconst ICON_PROP_NAMES = ['iconSize', 'iconColor', 'titleColor'];\nconst LOGO_ICON_PROP_NAMES = [...ICON_PROP_NAMES, 'logoName'];\nconst NAV_ICON_PROP_NAMES = [...ICON_PROP_NAMES, 'navIconName'];\nconst OVERFLOW_ICON_PROP_NAMES = [...ICON_PROP_NAMES, 'overflowIconName'];\nconst ACTIONS_PROP_NAMES = [...ICON_PROP_NAMES, 'actions'];\n\nconst arePropsEqual = keys => (prevProps, nextProps) => isEqual(pick(prevProps, keys), pick(nextProps, keys));\n\nconst areLogoIconPropsEqual = arePropsEqual(LOGO_ICON_PROP_NAMES);\nconst areNavIconPropsEqual = arePropsEqual(NAV_ICON_PROP_NAMES);\nconst areOverflowIconPropsEqual = arePropsEqual(OVERFLOW_ICON_PROP_NAMES);\nconst areActionPropsEqual = arePropsEqual(ACTIONS_PROP_NAMES);\nexport default function createToolbarAndroidComponent(IconNamePropType, getImageSource) {\n  var _class, _temp;\n\n  return _temp = _class = class IconToolbarAndroid extends PureComponent {\n    constructor(...args) {\n      super(...args);\n      this.state = {\n        logo: undefined,\n        navIcon: undefined,\n        overflowIcon: undefined,\n        actions: undefined\n      };\n    }\n\n    componentDidMount() {\n      this.updateLogoIconSource();\n      this.updateNavIconSource();\n      this.updateOverflowIconSource();\n      this.updateActionIconSources();\n    }\n\n    componentDidUpdate(prevProps) {\n      if (!areLogoIconPropsEqual(prevProps, this.props)) {\n        this.updateLogoIconSource();\n      }\n\n      if (!areNavIconPropsEqual(prevProps, this.props)) {\n        this.updateNavIconSource();\n      }\n\n      if (!areOverflowIconPropsEqual(prevProps, this.props)) {\n        this.updateOverflowIconSource();\n      }\n\n      if (!areActionPropsEqual(prevProps, this.props)) {\n        this.updateActionIconSources();\n      }\n    }\n\n    updateLogoIconSource() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this$props, logoName, iconSize, iconColor, titleColor, logo;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _this$props = _this.props, logoName = _this$props.logoName, iconSize = _this$props.iconSize, iconColor = _this$props.iconColor, titleColor = _this$props.titleColor;\n\n              if (!logoName) {\n                _context.next = 8;\n                break;\n              }\n\n              _context.next = 4;\n              return getImageSource(logoName, iconSize, iconColor || titleColor);\n\n            case 4:\n              logo = _context.sent;\n\n              _this.setState({\n                logo\n              }); // eslint-disable-next-line react/destructuring-assignment\n\n\n              _context.next = 9;\n              break;\n\n            case 8:\n              if (_this.state.logo) {\n                _this.setState({\n                  logo: undefined\n                });\n              }\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }))();\n    }\n\n    updateNavIconSource() {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this2$props, navIconName, iconSize, iconColor, titleColor, navIcon;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _this2$props = _this2.props, navIconName = _this2$props.navIconName, iconSize = _this2$props.iconSize, iconColor = _this2$props.iconColor, titleColor = _this2$props.titleColor;\n\n              if (!navIconName) {\n                _context2.next = 8;\n                break;\n              }\n\n              _context2.next = 4;\n              return getImageSource(navIconName, iconSize, iconColor || titleColor);\n\n            case 4:\n              navIcon = _context2.sent;\n\n              _this2.setState({\n                navIcon\n              }); // eslint-disable-next-line react/destructuring-assignment\n\n\n              _context2.next = 9;\n              break;\n\n            case 8:\n              if (_this2.state.navIcon) {\n                _this2.setState({\n                  navIcon: undefined\n                });\n              }\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }))();\n    }\n\n    updateOverflowIconSource() {\n      var _this3 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _this3$props, overflowIconName, iconSize, iconColor, titleColor, overflowIcon;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _this3$props = _this3.props, overflowIconName = _this3$props.overflowIconName, iconSize = _this3$props.iconSize, iconColor = _this3$props.iconColor, titleColor = _this3$props.titleColor;\n\n              if (!overflowIconName) {\n                _context3.next = 8;\n                break;\n              }\n\n              _context3.next = 4;\n              return getImageSource(overflowIconName, iconSize, iconColor || titleColor);\n\n            case 4:\n              overflowIcon = _context3.sent;\n\n              _this3.setState({\n                overflowIcon\n              }); // eslint-disable-next-line react/destructuring-assignment\n\n\n              _context3.next = 9;\n              break;\n\n            case 8:\n              if (_this3.state.overflowIcon) {\n                _this3.setState({\n                  overflowIcon: undefined\n                });\n              }\n\n            case 9:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }))();\n    }\n\n    updateActionIconSources() {\n      var _this4 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var _this4$props, actions, iconSize, iconColor, titleColor, updatedActions;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _this4$props = _this4.props, actions = _this4$props.actions, iconSize = _this4$props.iconSize, iconColor = _this4$props.iconColor, titleColor = _this4$props.titleColor;\n              _context4.next = 3;\n              return Promise.all((actions || []).map(action => {\n                if (action.iconName) {\n                  return getImageSource(action.iconName, action.iconSize || iconSize, action.iconColor || iconColor || titleColor).then(icon => _objectSpread(_objectSpread({}, action), {}, {\n                    icon\n                  }));\n                }\n\n                return Promise.resolve(action);\n              }));\n\n            case 3:\n              updatedActions = _context4.sent;\n\n              _this4.setState({\n                actions: updatedActions\n              });\n\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4);\n      }))();\n    }\n\n    render() {\n      return /*#__PURE__*/React.createElement(ToolbarAndroid, Object.assign({}, this.props, this.state, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 14\n        }\n      }));\n    }\n\n  }, _class.propTypes = {\n    logoName: IconNamePropType,\n    navIconName: IconNamePropType,\n    overflowIconName: IconNamePropType,\n    actions: PropTypes.arrayOf(PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      iconName: IconNamePropType,\n      iconSize: PropTypes.number,\n      iconColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n      show: PropTypes.oneOf(['always', 'ifRoom', 'never']),\n      showWithText: PropTypes.bool\n    })),\n    iconSize: PropTypes.number,\n    iconColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    titleColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n  }, _class.defaultProps = {\n    iconSize: 24\n  }, _temp;\n}","map":{"version":3,"sources":["/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/react-native-vector-icons/lib/toolbar-android.js"],"names":["isEqual","pick","React","PureComponent","PropTypes","ToolbarAndroid","ICON_PROP_NAMES","LOGO_ICON_PROP_NAMES","NAV_ICON_PROP_NAMES","OVERFLOW_ICON_PROP_NAMES","ACTIONS_PROP_NAMES","arePropsEqual","keys","prevProps","nextProps","areLogoIconPropsEqual","areNavIconPropsEqual","areOverflowIconPropsEqual","areActionPropsEqual","createToolbarAndroidComponent","IconNamePropType","getImageSource","IconToolbarAndroid","state","logo","undefined","navIcon","overflowIcon","actions","componentDidMount","updateLogoIconSource","updateNavIconSource","updateOverflowIconSource","updateActionIconSources","componentDidUpdate","props","logoName","iconSize","iconColor","titleColor","setState","navIconName","overflowIconName","Promise","all","map","action","iconName","then","icon","resolve","updatedActions","render","propTypes","arrayOf","shape","title","string","isRequired","number","oneOfType","show","oneOf","showWithText","bool","defaultProps"],"mappings":"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","sourcesContent":["/* eslint-disable react/no-unused-prop-types */\nimport isEqual from 'lodash/isEqual';\nimport pick from 'lodash/pick';\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { ToolbarAndroid } from './react-native';\n\nconst ICON_PROP_NAMES = ['iconSize', 'iconColor', 'titleColor'];\nconst LOGO_ICON_PROP_NAMES = [...ICON_PROP_NAMES, 'logoName'];\nconst NAV_ICON_PROP_NAMES = [...ICON_PROP_NAMES, 'navIconName'];\nconst OVERFLOW_ICON_PROP_NAMES = [...ICON_PROP_NAMES, 'overflowIconName'];\nconst ACTIONS_PROP_NAMES = [...ICON_PROP_NAMES, 'actions'];\n\nconst arePropsEqual = keys => (prevProps, nextProps) =>\n  isEqual(pick(prevProps, keys), pick(nextProps, keys));\n\nconst areLogoIconPropsEqual = arePropsEqual(LOGO_ICON_PROP_NAMES);\nconst areNavIconPropsEqual = arePropsEqual(NAV_ICON_PROP_NAMES);\nconst areOverflowIconPropsEqual = arePropsEqual(OVERFLOW_ICON_PROP_NAMES);\nconst areActionPropsEqual = arePropsEqual(ACTIONS_PROP_NAMES);\n\nexport default function createToolbarAndroidComponent(\n  IconNamePropType,\n  getImageSource\n) {\n  return class IconToolbarAndroid extends PureComponent {\n    static propTypes = {\n      logoName: IconNamePropType,\n      navIconName: IconNamePropType,\n      overflowIconName: IconNamePropType,\n      actions: PropTypes.arrayOf(\n        PropTypes.shape({\n          title: PropTypes.string.isRequired,\n          iconName: IconNamePropType,\n          iconSize: PropTypes.number,\n          iconColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n          show: PropTypes.oneOf(['always', 'ifRoom', 'never']),\n          showWithText: PropTypes.bool,\n        })\n      ),\n      iconSize: PropTypes.number,\n      iconColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n      titleColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    };\n\n    static defaultProps = {\n      iconSize: 24,\n    };\n\n    state = {\n      logo: undefined,\n      navIcon: undefined,\n      overflowIcon: undefined,\n      actions: undefined,\n    };\n\n    componentDidMount() {\n      this.updateLogoIconSource();\n      this.updateNavIconSource();\n      this.updateOverflowIconSource();\n      this.updateActionIconSources();\n    }\n\n    componentDidUpdate(prevProps) {\n      if (!areLogoIconPropsEqual(prevProps, this.props)) {\n        this.updateLogoIconSource();\n      }\n      if (!areNavIconPropsEqual(prevProps, this.props)) {\n        this.updateNavIconSource();\n      }\n      if (!areOverflowIconPropsEqual(prevProps, this.props)) {\n        this.updateOverflowIconSource();\n      }\n      if (!areActionPropsEqual(prevProps, this.props)) {\n        this.updateActionIconSources();\n      }\n    }\n\n    async updateLogoIconSource() {\n      const { logoName, iconSize, iconColor, titleColor } = this.props;\n      if (logoName) {\n        const logo = await getImageSource(\n          logoName,\n          iconSize,\n          iconColor || titleColor\n        );\n        this.setState({ logo });\n        // eslint-disable-next-line react/destructuring-assignment\n      } else if (this.state.logo) {\n        this.setState({ logo: undefined });\n      }\n    }\n\n    async updateNavIconSource() {\n      const { navIconName, iconSize, iconColor, titleColor } = this.props;\n      if (navIconName) {\n        const navIcon = await getImageSource(\n          navIconName,\n          iconSize,\n          iconColor || titleColor\n        );\n        this.setState({ navIcon });\n        // eslint-disable-next-line react/destructuring-assignment\n      } else if (this.state.navIcon) {\n        this.setState({ navIcon: undefined });\n      }\n    }\n\n    async updateOverflowIconSource() {\n      const { overflowIconName, iconSize, iconColor, titleColor } = this.props;\n      if (overflowIconName) {\n        const overflowIcon = await getImageSource(\n          overflowIconName,\n          iconSize,\n          iconColor || titleColor\n        );\n        this.setState({ overflowIcon });\n        // eslint-disable-next-line react/destructuring-assignment\n      } else if (this.state.overflowIcon) {\n        this.setState({ overflowIcon: undefined });\n      }\n    }\n\n    async updateActionIconSources() {\n      const { actions, iconSize, iconColor, titleColor } = this.props;\n      const updatedActions = await Promise.all(\n        (actions || []).map(action => {\n          if (action.iconName) {\n            return getImageSource(\n              action.iconName,\n              action.iconSize || iconSize,\n              action.iconColor || iconColor || titleColor\n            ).then(icon => ({ ...action, icon }));\n          }\n          return Promise.resolve(action);\n        })\n      );\n      this.setState({ actions: updatedActions });\n    }\n\n    render() {\n      return <ToolbarAndroid {...this.props} {...this.state} />;\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}