{"ast":null,"code":"import _regeneratorRuntime from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport MessageEnum, { getName } from \"../../../framework/src/Messages/MessageEnum\";\nimport { runEngine } from \"../../../framework/src/RunEngine\"; // Customizable Area Start\n// import { imgPasswordInVisible, imgPasswordVisible } from \"./assets\";\n// Customizable Area End\n\nimport { orderBy } from \"lodash\";\nexport const configJSON = require(\"./config\");\nexport default class RolesPermissionsControllerWeb extends BlockComponent {\n  constructor(props) {\n    super(props);\n    this.auth = window.localStorage.getItem(\"auth\");\n    this.getRolesApiCallId = \"\";\n    this.roleDetailsApiCallId = \"\";\n    this.roleCreateApiCallId = \"\";\n    this.getModulesApiCallId = \"\";\n    this.deleteRoleApiCallId = \"\";\n\n    this.getRolesList = () => {\n      const headers = {\n        \"Content-Type\": configJSON.contentType,\n        token: this.auth\n      };\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      this.getRolesApiCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.getRolesApiEndPoint);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.httpGetType);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    };\n\n    this.roleDetails = accountId => {\n      const headers = {\n        \"Content-Type\": configJSON.contentType,\n        token: this.auth\n      };\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      this.roleDetailsApiCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), \"\".concat(configJSON.getRolesApiEndPoint, \"/\").concat(accountId));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.httpGetType);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    };\n\n    this.getModulesList = () => {\n      const headers = {\n        \"Content-Type\": configJSON.contentType,\n        token: this.auth\n      };\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      this.getModulesApiCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.getModulesApiEndPoint);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.httpGetType);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    };\n\n    this.createRole = values => {\n      const headers = {\n        \"Content-Type\": configJSON.contentType,\n        token: this.auth\n      };\n      const httpBody = {\n        role: {\n          name: values.roleName,\n          module_roles_attributes: values.module_roles_attributes\n        }\n      };\n      const apiEndPoint = values.roleId && values.roleId !== '' ? \"\".concat(configJSON.getRolesApiEndPoint, \"/\").concat(values.roleId) : configJSON.getRolesApiEndPoint;\n      const methodType = values.roleId && values.roleId !== '' ? configJSON.httpPutType : configJSON.httpPostType;\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      this.roleCreateApiCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), apiEndPoint);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(httpBody));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), methodType);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    };\n\n    this.deleteRolesHandler = accountId => {\n      const headers = {\n        token: this.auth\n      };\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      this.deleteRoleApiCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), \"\".concat(configJSON.deleteRoleApiEndPoint, \"/\").concat(accountId));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.httpDeleteType);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    };\n\n    this.onMenuToggle = () => {\n      this.setState({\n        menuCollapsed: !this.state.menuCollapsed\n      });\n    };\n\n    this.openUpdateRolesModalHandler = accountId => {\n      this.setState({\n        loader: true,\n        roleDetailsData: {}\n      });\n      this.roleDetails(accountId);\n      setTimeout(() => {\n        this.setState({\n          loader: false,\n          rolesCreateModal: true\n        });\n      }, 500);\n    };\n\n    this.closeUpdateRolesModalHandler = () => {\n      this.setState({\n        rolesCreateModal: false,\n        roleDetailsData: {},\n        attributeData: []\n      });\n    };\n\n    this.openRolesModalHandler = () => {\n      this.setState({\n        loader: true,\n        roleDetailsData: {}\n      });\n      this.getModulesList();\n      setTimeout(() => {\n        this.setState({\n          loader: false,\n          rolesCreateModal: true\n        });\n      }, 500);\n    };\n\n    this.closeRolesModalHandler = () => {\n      this.setState({\n        roleDetailsData: {},\n        attributeData: [],\n        rolesCreateModal: false\n      });\n    };\n\n    this.openSnackBarHandler = (type, message) => {\n      this.setState({\n        snackBar: {\n          show: true,\n          message: message,\n          type\n        }\n      });\n    };\n\n    this.closeSnackBarHandler = () => {\n      this.setState({\n        snackBar: {\n          show: false,\n          message: this.state.snackBar.message,\n          type: this.state.snackBar.type\n        }\n      });\n    };\n\n    this.handleSortingRoleData = () => {\n      console.log(\"function running\");\n      this.setState({\n        sortOrder: this.state.sortOrder === 'asc' ? 'desc' : 'asc'\n      });\n      let sortedData = orderBy(this.state.rolesData, item => item.attributes.name, this.state.sortOrder);\n      this.setState({\n        rolesData: sortedData\n      });\n    };\n\n    this.receive = this.receive.bind(this); // Customizable Area Start\n\n    this.subScribedMessages = [getName(MessageEnum.RestAPIResponceMessage)];\n    this.state = {\n      auth: \"\",\n      trailType: configJSON.membersText,\n      startDate: new Date(),\n      endDate: null,\n      userType: configJSON.subscriber,\n      menuCollapsed: false,\n      rolesData: [],\n      roleDetailsData: [],\n      modulesData: [],\n      attributeData: [],\n      rolesUpdateModal: false,\n      rolesCreateModal: false,\n      checkbox: false,\n      snackBar: {\n        show: false\n      },\n      loader: false,\n      sortOrder: 'asc'\n    }; // Customizable Area End\n\n    runEngine.attachBuildingBlock(this, this.subScribedMessages);\n  }\n\n  componentDidMount() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _this.getRolesList();\n\n            _this.handleSortingRoleData();\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  } // Handler for Get Roles List\n\n\n  receive(from, message) {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var responseJson, errorReponse, apiRequestCallId, attributeData, errors, _this2$props;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            // Customizable Area Start\n            runEngine.debugLog(\"Message Recevied\", message);\n\n            if (getName(MessageEnum.RestAPIResponceMessage) === message.id) {\n              responseJson = message.getData(getName(MessageEnum.RestAPIResponceSuccessMessage));\n              errorReponse = message.getData(getName(MessageEnum.RestAPIResponceErrorMessage));\n              apiRequestCallId = message.getData(getName(MessageEnum.RestAPIResponceDataMessage));\n\n              if (responseJson && !responseJson.errors) {\n                if (apiRequestCallId != null) {\n                  // Store All Roles data\n                  if (apiRequestCallId === _this2.getRolesApiCallId && responseJson !== undefined) {\n                    _this2.setState({\n                      rolesData: responseJson.data\n                    });\n                  }\n\n                  console.log(_this2.state.rolesData); // Store role detaills\n\n                  if (apiRequestCallId === _this2.roleDetailsApiCallId && responseJson !== undefined) {\n                    _this2.setState({\n                      roleDetailsData: responseJson.data,\n                      attributeData: []\n                    });\n\n                    attributeData = [];\n                    responseJson.data.attributes.module_roles.data.map(module => {\n                      attributeData.push({\n                        \"create_action\": module.attributes.create_action,\n                        \"update_action\": module.attributes.update_action,\n                        \"delete_action\": module.attributes.delete_action,\n                        \"view_action\": module.attributes.view_action,\n                        \"module_id\": module.attributes.module_id,\n                        \"name\": module.attributes.module_name\n                      });\n\n                      if (module.attributes.sub_modules.data.length && module.attributes.sub_modules.data.length > 0) {\n                        module.attributes.sub_modules.data.map(sub_module => {\n                          attributeData.push({\n                            \"create_action\": sub_module.attributes.create_action,\n                            \"update_action\": sub_module.attributes.update_action,\n                            \"delete_action\": sub_module.attributes.delete_action,\n                            \"view_action\": sub_module.attributes.view_action,\n                            \"name\": sub_module.attributes.module_name,\n                            \"module_id\": sub_module.attributes.module_id,\n                            \"parent_id\": module.attributes.module_id\n                          });\n                        });\n                      }\n                    });\n                    console.log('fetched attributeData', attributeData);\n\n                    _this2.setState({\n                      attributeData\n                    });\n                  } // Create role\n\n\n                  if (apiRequestCallId === _this2.roleCreateApiCallId && responseJson !== undefined) {\n                    _this2.openSnackBarHandler('success', configJSON.successCreateMsgText);\n\n                    _this2.getRolesList();\n\n                    _this2.closeRolesModalHandler();\n                  } // Delete role\n\n\n                  if (apiRequestCallId === _this2.deleteRoleApiCallId && responseJson !== undefined) {\n                    _this2.openSnackBarHandler('success', responseJson.message);\n\n                    _this2.getRolesList();\n                  } // Get Modules\n\n\n                  if (apiRequestCallId === _this2.getModulesApiCallId && responseJson !== undefined) {\n                    _this2.setState({\n                      modulesData: responseJson.data,\n                      attributeData: []\n                    });\n\n                    attributeData = [];\n                    responseJson.data.map(module => {\n                      attributeData.push({\n                        \"create_action\": false,\n                        \"update_action\": false,\n                        \"delete_action\": false,\n                        \"view_action\": false,\n                        \"module_id\": module.attributes.id,\n                        \"name\": module.attributes.name\n                      });\n                      module.attributes.sub_modules.map(sub_module => {\n                        attributeData.push({\n                          \"create_action\": false,\n                          \"update_action\": false,\n                          \"delete_action\": false,\n                          \"view_action\": false,\n                          \"name\": sub_module.name,\n                          \"module_id\": sub_module.id,\n                          \"parent_id\": sub_module.parent_id\n                        });\n                      });\n                    });\n                    console.log('attributeData', attributeData);\n\n                    _this2.setState({\n                      attributeData\n                    });\n                  }\n                }\n              } else {\n                errors = responseJson.errors;\n                console.log(\"responseJson.errors\", errors);\n\n                _this2.parseApiCatchErrorResponse(errorReponse);\n\n                if (errors[0].token === 'Invalid token' || 'Token has Expired') {\n                  AsyncStorage.setItem(\"auth\", \"\"); //@ts-ignore\n\n                  (_this2$props = _this2.props) === null || _this2$props === void 0 ? void 0 : _this2$props.history.push(\"/login\");\n                } else if (errors[0].message) {\n                  _this2.openSnackBarHandler('error', errors[0].message);\n                } else {\n                  if (apiRequestCallId === _this2.roleCreateApiCallId) {\n                    _this2.openSnackBarHandler('error', configJSON.errorCreateMsgText);\n                  }\n                }\n              }\n            } // Customizable Area End\n\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }))();\n  } // Customizable Area End\n\n\n}","map":{"version":3,"sources":["/home/lp-greenapex/gargi/okydpim-36944-react-native/src/packages/blocks/RolesPermissions/src/RolesPermissionsController.web.tsx"],"names":["Message","BlockComponent","MessageEnum","getName","runEngine","orderBy","configJSON","require","RolesPermissionsControllerWeb","constructor","props","auth","window","localStorage","getItem","getRolesApiCallId","roleDetailsApiCallId","roleCreateApiCallId","getModulesApiCallId","deleteRoleApiCallId","getRolesList","headers","contentType","token","requestMessage","RestAPIRequestMessage","messageId","addData","RestAPIResponceEndPointMessage","getRolesApiEndPoint","RestAPIRequestHeaderMessage","JSON","stringify","RestAPIRequestMethodMessage","httpGetType","sendMessage","id","roleDetails","accountId","getModulesList","getModulesApiEndPoint","createRole","values","httpBody","role","name","roleName","module_roles_attributes","apiEndPoint","roleId","methodType","httpPutType","httpPostType","RestAPIRequestBodyMessage","deleteRolesHandler","deleteRoleApiEndPoint","httpDeleteType","onMenuToggle","setState","menuCollapsed","state","openUpdateRolesModalHandler","loader","roleDetailsData","setTimeout","rolesCreateModal","closeUpdateRolesModalHandler","attributeData","openRolesModalHandler","closeRolesModalHandler","openSnackBarHandler","type","message","snackBar","show","closeSnackBarHandler","handleSortingRoleData","console","log","sortOrder","sortedData","rolesData","item","attributes","receive","bind","subScribedMessages","RestAPIResponceMessage","trailType","membersText","startDate","Date","endDate","userType","subscriber","modulesData","rolesUpdateModal","checkbox","attachBuildingBlock","componentDidMount","from","debugLog","responseJson","getData","RestAPIResponceSuccessMessage","errorReponse","RestAPIResponceErrorMessage","apiRequestCallId","RestAPIResponceDataMessage","errors","undefined","data","module_roles","map","module","push","create_action","update_action","delete_action","view_action","module_id","module_name","sub_modules","length","sub_module","successCreateMsgText","parent_id","parseApiCatchErrorResponse","AsyncStorage","setItem","history","errorCreateMsgText"],"mappings":"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","sourcesContent":["import { AsyncStorage } from \"react-native\";\nimport { IBlock } from \"../../../framework/src/IBlock\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport MessageEnum, {\n  getName,\n} from \"../../../framework/src/Messages/MessageEnum\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\n\n// Customizable Area Start\n// import { imgPasswordInVisible, imgPasswordVisible } from \"./assets\";\n// Customizable Area End\nimport {sortBy ,orderBy} from \"lodash\"\nexport const configJSON = require(\"./config\");\n\ninterface SelectOptions {\n  value: string;\n  label: string;\n}\nexport interface Props {\n  navigation: any;\n  id: string;\n  // Customizable Area Start\n  // Customizable Area End\n}\n\ninterface S {\n  // Customizable Area Start\n  auth: string | null | undefined;\n  trailType: string;\n  startDate: Date | null | undefined;\n  endDate: Date | null | undefined;\n  userType: string;\n  menuCollapsed: boolean;\n  rolesData: object[];\n  modulesData: object[];\n  attributeData: object[];\n  roleDetailsData: any;\n  rolesUpdateModal: boolean;\n  rolesCreateModal: boolean;\n  checkbox: boolean;\n  snackBar: {\n    show: boolean,\n    message?: string,\n    type?: \"success\" | \"info\" | \"warning\" | \"error\" | undefined\n  };\n  loader: boolean,\n  sortOrder:any\n  // Customizable Area End\n}\n\ninterface SS {\n  id: any;\n}\n\nexport default class RolesPermissionsControllerWeb extends BlockComponent<\n  Props,\n  S,\n  SS\n> {\n  auth: string | null | undefined = window.localStorage.getItem(\"auth\");\n  getRolesApiCallId: string = \"\";\n  roleDetailsApiCallId: string = \"\";\n  roleCreateApiCallId: string = \"\";\n  getModulesApiCallId: string = \"\";\n  deleteRoleApiCallId: string = \"\";\n\n  constructor(props: Props) {\n    super(props);\n    this.receive = this.receive.bind(this);\n\n    // Customizable Area Start\n    this.subScribedMessages = [getName(MessageEnum.RestAPIResponceMessage)];\n\n    this.state = {\n      auth: \"\",\n      trailType: configJSON.membersText,\n      startDate: new Date(),\n      endDate: null,\n      userType: configJSON.subscriber,\n      menuCollapsed: false,\n      rolesData: [],\n      roleDetailsData: [],\n      modulesData: [],\n      attributeData: [],\n      rolesUpdateModal: false,\n      rolesCreateModal: false,\n      checkbox: false,\n      snackBar: {\n        show: false,\n      },\n      loader: false,\n      sortOrder:'asc'\n    };\n    // Customizable Area End\n    runEngine.attachBuildingBlock(this as IBlock, this.subScribedMessages);\n  }\n\n  \n  async componentDidMount() {\n    this.getRolesList();\n    this.handleSortingRoleData();\n  }\n  \n  // Handler for Get Roles List\n  getRolesList = (): boolean => {\n    const headers = {\n      \"Content-Type\": configJSON.contentType,\n      token: this.auth,\n    };\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n    this.getRolesApiCallId = requestMessage.messageId;\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.getRolesApiEndPoint\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(headers)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.httpGetType\n    );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n\n    return true;\n  };\n\n  // Handler for Trails of Team member\n  roleDetails = (accountId: number): boolean => {\n    const headers = {\n      \"Content-Type\": configJSON.contentType,\n      token: this.auth,\n    };\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n    this.roleDetailsApiCallId = requestMessage.messageId;\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      `${configJSON.getRolesApiEndPoint}/${accountId}`\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(headers)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.httpGetType\n    );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n\n    return true;\n  };\n\n  // Handler for Get Modules List\n  getModulesList = (): boolean => {\n    const headers = {\n      \"Content-Type\": configJSON.contentType,\n      token: this.auth,\n    };\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n    this.getModulesApiCallId = requestMessage.messageId;\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.getModulesApiEndPoint\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(headers)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.httpGetType\n    );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n\n    return true;\n  };\n\n  // Create Role Handler\n  createRole = (values: any): boolean => {\n    const headers = {\n      \"Content-Type\": configJSON.contentType,\n      token: this.auth,\n    };\n\n    const httpBody = {\n      role: {\n        name: values.roleName,\n        module_roles_attributes: values.module_roles_attributes\n      },\n    };\n    \n    const apiEndPoint = values.roleId && values.roleId !==  '' ? `${configJSON.getRolesApiEndPoint}/${values.roleId}` : configJSON.getRolesApiEndPoint;\n    const methodType = values.roleId && values.roleId !==  '' ? configJSON.httpPutType : configJSON.httpPostType;\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n    this.roleCreateApiCallId = requestMessage.messageId;\n    requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), apiEndPoint);\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(httpBody));\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), methodType);\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n\n    return true;\n  };\n\n  // Delete role handler\n  deleteRolesHandler = (accountId: number): boolean => {\n    const headers = {\n      token: this.auth,\n    };\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n    this.deleteRoleApiCallId = requestMessage.messageId;\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      `${configJSON.deleteRoleApiEndPoint}/${accountId}`\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(headers)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.httpDeleteType\n    );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n\n    return true;\n  };\n\n  async receive(from: string, message: Message) {\n    // Customizable Area Start\n    runEngine.debugLog(\"Message Recevied\", message);\n\n    if (getName(MessageEnum.RestAPIResponceMessage) === message.id) {\n      var responseJson = message.getData(\n        getName(MessageEnum.RestAPIResponceSuccessMessage)\n      );\n      var errorReponse = message.getData(\n        getName(MessageEnum.RestAPIResponceErrorMessage)\n      );\n\n      const apiRequestCallId = message.getData(\n        getName(MessageEnum.RestAPIResponceDataMessage)\n      );\n      if (responseJson && !responseJson.errors) {\n        if (apiRequestCallId != null) {\n          // Store All Roles data\n          if (\n            apiRequestCallId === this.getRolesApiCallId &&\n            responseJson !== undefined\n          ) {\n            this.setState({ rolesData: responseJson.data });\n          }\n          console.log(this.state.rolesData)\n\n          // Store role detaills\n          if (\n            apiRequestCallId === this.roleDetailsApiCallId &&\n            responseJson !== undefined\n          ) {\n            this.setState({\n              roleDetailsData: responseJson.data,\n              attributeData: []\n            });\n            const attributeData: any = [];\n            responseJson.data.attributes.module_roles.data.map((module: any) => {\n              attributeData.push({\n                \"create_action\": module.attributes.create_action,\n                \"update_action\": module.attributes.update_action,\n                \"delete_action\": module.attributes.delete_action,\n                \"view_action\":module.attributes.view_action,\n                \"module_id\": module.attributes.module_id,\n                \"name\": module.attributes.module_name\n              });\n              if(module.attributes.sub_modules.data.length && module.attributes.sub_modules.data.length > 0) {\n                module.attributes.sub_modules.data.map((sub_module: any) => {\n                  attributeData.push({\n                    \"create_action\": sub_module.attributes.create_action,\n                    \"update_action\": sub_module.attributes.update_action,\n                    \"delete_action\": sub_module.attributes.delete_action,\n                    \"view_action\":sub_module.attributes.view_action,\n                    \"name\": sub_module.attributes.module_name,\n                    \"module_id\": sub_module.attributes.module_id,\n                    \"parent_id\": module.attributes.module_id,\n                  });\n                });\n              }\n            });\n            console.log('fetched attributeData', attributeData);\n            this.setState({ attributeData });\n          }\n\n          // Create role\n          if (apiRequestCallId === this.roleCreateApiCallId && responseJson !== undefined) {\n            this.openSnackBarHandler('success', configJSON.successCreateMsgText);\n            this.getRolesList();\n            this.closeRolesModalHandler();\n          }\n\n          // Delete role\n          if (apiRequestCallId === this.deleteRoleApiCallId && responseJson !== undefined) {\n            this.openSnackBarHandler('success', responseJson.message);\n            this.getRolesList();\n          }\n\n          // Get Modules\n          if (\n            apiRequestCallId === this.getModulesApiCallId &&\n            responseJson !== undefined\n          ) {\n            this.setState({ \n              modulesData: responseJson.data,\n              attributeData: []\n            });\n            const attributeData: any = [];\n            responseJson.data.map((module: any) => {\n              attributeData.push({\n                \"create_action\": false,\n                \"update_action\": false,\n                \"delete_action\": false,\n                \"view_action\":false,\n                \"module_id\": module.attributes.id,\n                \"name\": module.attributes.name\n              });\n              module.attributes.sub_modules.map((sub_module: any) => {\n                attributeData.push({\n                  \"create_action\": false,\n                  \"update_action\": false,\n                  \"delete_action\": false,\n                  \"view_action\":false,\n                  \"name\": sub_module.name,\n                  \"module_id\": sub_module.id,\n                  \"parent_id\": sub_module.parent_id,\n                });\n              });\n            });\n            console.log('attributeData', attributeData);\n            this.setState({ attributeData });\n          }\n        }\n      } else {\n        const errors = responseJson.errors;\n        console.log(\"responseJson.errors\", errors);\n        this.parseApiCatchErrorResponse(errorReponse);\n        if(errors[0].token === 'Invalid token' || 'Token has Expired') {\n          AsyncStorage.setItem(\"auth\", \"\");\n          //@ts-ignore\n          this.props?.history.push(\"/login\");\n        } else if(errors[0].message) {\n          this.openSnackBarHandler('error', errors[0].message);\n        } else {\n          if (apiRequestCallId === this.roleCreateApiCallId) {\n            this.openSnackBarHandler('error', configJSON.errorCreateMsgText);\n          }\n        }\n      }\n    }\n    // Customizable Area End\n  }\n\n  onMenuToggle = () => {\n    this.setState({\n      menuCollapsed: !this.state.menuCollapsed,\n    });\n  };\n\n  // Open View Details Modal\n  openUpdateRolesModalHandler = (accountId: number): void => {\n    this.setState({ \n      loader: true,\n      roleDetailsData: {},\n    });\n    this.roleDetails(accountId);\n    setTimeout(() => {\n      this.setState({ \n        loader: false, \n        rolesCreateModal: true,\n      });\n    }, 500);\n  };\n\n  // Close View Details Modal\n  closeUpdateRolesModalHandler = () => {\n    this.setState({\n      rolesCreateModal: false,\n      roleDetailsData: {},\n      attributeData: [],\n    });\n  };\n\n  // Open View Details Modal\n  openRolesModalHandler = (): void => {\n    this.setState({\n      loader: true,\n      roleDetailsData: {},\n    });\n    this.getModulesList();\n    setTimeout(() => {\n      this.setState({ \n        loader: false, \n        rolesCreateModal: true,\n      });\n    }, 500);\n  };\n\n  // Close View Details Modal\n  closeRolesModalHandler = () => {\n    this.setState({\n      roleDetailsData: {},\n      attributeData: [],\n      rolesCreateModal: false \n    });\n  };\n\n  // Open View Details Modal\n  openSnackBarHandler = (type: \"success\" | \"info\" | \"warning\" | \"error\" | undefined,  message: string): void => {\n    this.setState({ snackBar: {\n      show: true,\n      message: message,\n      type\n    } });\n  };\n\n  // Close View Details Modal\n  closeSnackBarHandler = () => {\n    this.setState({ snackBar: {\n      show: false,\n      message: this.state.snackBar.message,\n      type: this.state.snackBar.type\n    }});\n  };\n\n  // handle sorting of roleData\n  handleSortingRoleData =()=>{\n    console.log(\"function running\")\n    this.setState({\n      sortOrder :this.state.sortOrder === 'asc' ? 'desc' : 'asc'\n    })\n\n    let sortedData = orderBy(this.state.rolesData, (item:any)=> item.attributes.name, this.state.sortOrder );\n    this.setState({\n      rolesData :sortedData \n    })\n    \n    \n  }\n  // Customizable Area End\n}\n"]},"metadata":{},"sourceType":"module"}