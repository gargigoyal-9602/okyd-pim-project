{"ast":null,"code":"import _regeneratorRuntime from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nimport MessageEnum, { getName } from \"../../../framework/src/Messages/MessageEnum\"; // Customizable Area Start\n// Customizable Area End\n\nexport const configJSON = require(\"./config\");\nexport default class OTPInputAuthController extends BlockComponent {\n  // Customizable Area Start\n  // Customizable Area End\n  constructor(props) {\n    super(props);\n    this.otpAuthApiCallId = void 0;\n    this.btnTxtSubmitOtp = void 0;\n    this.placeHolderOtp = void 0;\n    this.labelInfo = void 0;\n    this.submitButtonColor = configJSON.submitButtonColor;\n    this.btnSubmitOTPProps = {\n      onPress: () => this.submitOtp()\n    };\n    this.txtMobilePhoneOTPWebProps = {\n      onChangeText: text => this.setState({\n        otp: text\n      })\n    };\n    this.txtMobilePhoneOTPMobileProps = _objectSpread(_objectSpread({}, this.txtMobilePhoneOTPWebProps), {}, {\n      keyboardType: \"numeric\"\n    });\n    this.txtMobilePhoneOTPProps = this.isPlatformWeb() ? this.txtMobilePhoneOTPWebProps : this.txtMobilePhoneOTPMobileProps;\n    this.subScribedMessages = [// Customizable Area Start\n    getName(MessageEnum.RestAPIResponceMessage), getName(MessageEnum.NavigationPayLoadMessage) // Customizable Area End\n    ];\n    this.receive = this.receive.bind(this);\n    runEngine.attachBuildingBlock(this, this.subScribedMessages); // Customizable Area Start\n\n    this.state = {\n      otp: \"\",\n      otpAuthToken: \"\",\n      userAccountID: \"\",\n      labelInfo: configJSON.labelInfo,\n      toMessage: \"\",\n      isFromForgotPassword: false\n    };\n    this.btnTxtSubmitOtp = configJSON.btnTxtSubmitOtp;\n    this.placeHolderOtp = configJSON.placeHolderOtp; // Customizable Area End\n  }\n\n  receive(from, message) {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var responseJson, msg, errorReponse, phoneAuthToken, phoneNumber, forgotPasswordBool, emailValue, userAccountID, updatedLabel;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            // Customizable Area Start\n            if (getName(MessageEnum.RestAPIResponceMessage) === message.id && _this.otpAuthApiCallId != null && _this.otpAuthApiCallId === message.getData(getName(MessageEnum.RestAPIResponceDataMessage))) {\n              responseJson = message.getData(getName(MessageEnum.RestAPIResponceSuccessMessage));\n\n              if (responseJson && (responseJson.messages || responseJson.meta && responseJson.meta.token)) {\n                if (responseJson.meta && responseJson.meta.token) {\n                  _this.setState({\n                    otpAuthToken: responseJson.meta.token\n                  });\n                }\n\n                if (_this.state.isFromForgotPassword) {\n                  // runEngine.debugLog(\"about to send NavigationNewPasswordMessage\");\n                  msg = new Message(getName(MessageEnum.NavigationNewPasswordMessage));\n                  msg.addData(getName(MessageEnum.AuthTokenDataMessage), _this.state.otpAuthToken);\n                  msg.addData(getName(MessageEnum.NavigationPropsMessage), _this.props);\n\n                  _this.send(msg);\n                } else {\n                  msg = new Message(getName(MessageEnum.NavigationMobilePhoneAdditionalDetailsMessage));\n                  msg.addData(getName(MessageEnum.AuthTokenDataMessage), _this.state.otpAuthToken);\n                  msg.addData(getName(MessageEnum.NavigationPropsMessage), _this.props);\n\n                  _this.send(msg);\n                }\n              } else {\n                //Check Error Response\n                _this.parseApiErrorResponse(responseJson);\n              }\n\n              errorReponse = message.getData(getName(MessageEnum.RestAPIResponceErrorMessage));\n\n              if (errorReponse != null) {\n                _this.parseApiCatchErrorResponse(errorReponse);\n              }\n            } else if (getName(MessageEnum.NavigationPayLoadMessage) === message.id) {\n              phoneAuthToken = message.getData(getName(MessageEnum.AuthTokenDataMessage));\n              phoneNumber = message.getData(getName(MessageEnum.AuthTokenPhoneNumberMessage));\n              forgotPasswordBool = message.getData(getName(MessageEnum.EnterOTPAsForgotPasswordMessage));\n              emailValue = message.getData(getName(MessageEnum.AuthTokenEmailMessage));\n              userAccountID = phoneNumber ? \"\" + phoneNumber : \"\" + emailValue;\n              updatedLabel = _this.state.labelInfo;\n\n              if (userAccountID && userAccountID !== \"undefined\") {\n                updatedLabel = updatedLabel.replace(\"phone\", userAccountID);\n              }\n\n              _this.setState({\n                otpAuthToken: phoneAuthToken && phoneAuthToken.length > 0 ? phoneAuthToken : _this.state.otpAuthToken,\n                userAccountID: userAccountID,\n                labelInfo: updatedLabel,\n                isFromForgotPassword: forgotPasswordBool === undefined ? _this.state.isFromForgotPassword : forgotPasswordBool\n              });\n            } // Customizable Area End\n\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  } // Customizable Area Start\n\n\n  submitOtp() {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var requestMessage, header, data, httpBody, headers;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(!_this2.state.otp || _this2.state.otp.length === 0)) {\n              _context2.next = 3;\n              break;\n            }\n\n            _this2.showAlert(configJSON.errorTitle, configJSON.errorOtpNotValid);\n\n            return _context2.abrupt(\"return\");\n\n          case 3:\n            requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n\n            if (_this2.state.isFromForgotPassword) {\n              // console.log(\"entered is from forgot password!\");\n              header = {\n                \"Content-Type\": configJSON.apiVerifyOtpContentType\n              }; //GO TO REQUEST STATE\n\n              _this2.otpAuthApiCallId = requestMessage.messageId;\n              requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.apiVerifyForgotPasswordOtpEndPoint);\n              requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(header));\n              data = {\n                token: _this2.state.otpAuthToken ? _this2.state.otpAuthToken : \"\",\n                otp_code: _this2.state.otp ? _this2.state.otp : \"\"\n              };\n              httpBody = {\n                data: data\n              }; //requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), \"POST\");\n\n              requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(httpBody));\n            } else {\n              headers = {\n                \"Content-Type\": configJSON.apiVerifyOtpContentType,\n                token: _this2.state.otpAuthToken\n              };\n              _this2.otpAuthApiCallId = requestMessage.messageId;\n              requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.apiVerifyOtpEndPoint + _this2.state.otp);\n              requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n              requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(JSON.stringify({})));\n            }\n\n            requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiVerifyOtpMethod); // console.log(\"requestMessage.id is: \" + requestMessage.id);\n\n            runEngine.sendMessage(requestMessage.id, requestMessage);\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }))();\n  } // Customizable Area End\n\n\n}","map":{"version":3,"sources":["/home/lp-greenapex/gargi/okydpim-36944-react-native/src/packages/blocks/otp-input-confirmation/src/OTPInputAuthController.tsx"],"names":["Message","BlockComponent","runEngine","MessageEnum","getName","configJSON","require","OTPInputAuthController","constructor","props","otpAuthApiCallId","btnTxtSubmitOtp","placeHolderOtp","labelInfo","submitButtonColor","btnSubmitOTPProps","onPress","submitOtp","txtMobilePhoneOTPWebProps","onChangeText","text","setState","otp","txtMobilePhoneOTPMobileProps","keyboardType","txtMobilePhoneOTPProps","isPlatformWeb","subScribedMessages","RestAPIResponceMessage","NavigationPayLoadMessage","receive","bind","attachBuildingBlock","state","otpAuthToken","userAccountID","toMessage","isFromForgotPassword","from","message","id","getData","RestAPIResponceDataMessage","responseJson","RestAPIResponceSuccessMessage","messages","meta","token","msg","NavigationNewPasswordMessage","addData","AuthTokenDataMessage","NavigationPropsMessage","send","NavigationMobilePhoneAdditionalDetailsMessage","parseApiErrorResponse","errorReponse","RestAPIResponceErrorMessage","parseApiCatchErrorResponse","phoneAuthToken","phoneNumber","AuthTokenPhoneNumberMessage","forgotPasswordBool","EnterOTPAsForgotPasswordMessage","emailValue","AuthTokenEmailMessage","updatedLabel","replace","length","undefined","showAlert","errorTitle","errorOtpNotValid","requestMessage","RestAPIRequestMessage","header","apiVerifyOtpContentType","messageId","RestAPIResponceEndPointMessage","apiVerifyForgotPasswordOtpEndPoint","RestAPIRequestHeaderMessage","JSON","stringify","data","otp_code","httpBody","RestAPIRequestBodyMessage","headers","apiVerifyOtpEndPoint","RestAPIRequestMethodMessage","apiVerifyOtpMethod","sendMessage"],"mappings":"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","sourcesContent":["import { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nimport MessageEnum, {\n  getName\n} from \"../../../framework/src/Messages/MessageEnum\";\n\n// Customizable Area Start\n// Customizable Area End\n\nexport const configJSON = require(\"./config\");\n\nexport interface Props {\n  navigation: any;\n  id: string;\n  // Customizable Area Start\n  // Customizable Area End\n}\n\nexport interface S {\n  // Customizable Area Start\n  otp: string;\n  otpAuthToken: string;\n  userAccountID: string;\n  labelInfo: string;\n  toMessage: string;\n  isFromForgotPassword: boolean;\n  // Customizable Area End\n}\n\nexport interface SS {\n  // Customizable Area Start\n  id: any;\n  // Customizable Area End\n}\n\nexport default class OTPInputAuthController extends BlockComponent<\n  Props,\n  S,\n  SS\n> {\n  // Customizable Area Start\n  otpAuthApiCallId: any;\n  btnTxtSubmitOtp: string;\n  placeHolderOtp: string;\n  labelInfo: string;\n  submitButtonColor: any = configJSON.submitButtonColor;\n  // Customizable Area End\n\n  constructor(props: Props) {\n    super(props);\n    this.subScribedMessages = [\n      // Customizable Area Start\n      getName(MessageEnum.RestAPIResponceMessage),\n      getName(MessageEnum.NavigationPayLoadMessage)\n      // Customizable Area End\n    ];\n\n    this.receive = this.receive.bind(this);\n\n    runEngine.attachBuildingBlock(this, this.subScribedMessages);\n\n    // Customizable Area Start\n    this.state = {\n      otp: \"\",\n      otpAuthToken: \"\",\n      userAccountID: \"\",\n      labelInfo: configJSON.labelInfo,\n      toMessage: \"\",\n      isFromForgotPassword: false\n    };\n\n    this.btnTxtSubmitOtp = configJSON.btnTxtSubmitOtp;\n    this.placeHolderOtp = configJSON.placeHolderOtp;\n    // Customizable Area End\n  }\n\n  async receive(from: String, message: Message) {\n    // Customizable Area Start\n    if (\n      getName(MessageEnum.RestAPIResponceMessage) === message.id &&\n      this.otpAuthApiCallId != null &&\n      this.otpAuthApiCallId ===\n        message.getData(getName(MessageEnum.RestAPIResponceDataMessage))\n    ) {\n      var responseJson = message.getData(\n        getName(MessageEnum.RestAPIResponceSuccessMessage)\n      );\n\n      if (\n        responseJson &&\n        (responseJson.messages ||\n          (responseJson.meta && responseJson.meta.token))\n      ) {\n        if (responseJson.meta && responseJson.meta.token) {\n          this.setState({\n            otpAuthToken: responseJson.meta.token\n          });\n        }\n\n        if (this.state.isFromForgotPassword) {\n          // runEngine.debugLog(\"about to send NavigationNewPasswordMessage\");\n          const msg: Message = new Message(\n            getName(MessageEnum.NavigationNewPasswordMessage)\n          );\n          msg.addData(\n            getName(MessageEnum.AuthTokenDataMessage),\n            this.state.otpAuthToken\n          );\n\n          msg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n\n          this.send(msg);\n        } else {\n          const msg: Message = new Message(\n            getName(MessageEnum.NavigationMobilePhoneAdditionalDetailsMessage)\n          );\n\n          msg.addData(\n            getName(MessageEnum.AuthTokenDataMessage),\n            this.state.otpAuthToken\n          );\n\n          msg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n\n          this.send(msg);\n        }\n      } else {\n        //Check Error Response\n        this.parseApiErrorResponse(responseJson);\n      }\n\n      var errorReponse = message.getData(\n        getName(MessageEnum.RestAPIResponceErrorMessage)\n      );\n\n      if (errorReponse != null) {\n        this.parseApiCatchErrorResponse(errorReponse);\n      }\n    } else if (getName(MessageEnum.NavigationPayLoadMessage) === message.id) {\n      const phoneAuthToken = message.getData(\n        getName(MessageEnum.AuthTokenDataMessage)\n      );\n\n      const phoneNumber = message.getData(\n        getName(MessageEnum.AuthTokenPhoneNumberMessage)\n      );\n\n      const forgotPasswordBool = message.getData(\n        getName(MessageEnum.EnterOTPAsForgotPasswordMessage)\n      );\n\n      const emailValue = message.getData(\n        getName(MessageEnum.AuthTokenEmailMessage)\n      );\n\n      const userAccountID = phoneNumber ? \"\" + phoneNumber : \"\" + emailValue;\n\n      let updatedLabel = this.state.labelInfo;\n      if (userAccountID && userAccountID !== \"undefined\") {\n        updatedLabel = updatedLabel.replace(\"phone\", userAccountID);\n      }\n\n      this.setState({\n        otpAuthToken:\n          phoneAuthToken && phoneAuthToken.length > 0\n            ? phoneAuthToken\n            : this.state.otpAuthToken,\n        userAccountID: userAccountID,\n        labelInfo: updatedLabel,\n        isFromForgotPassword:\n          forgotPasswordBool === undefined\n            ? this.state.isFromForgotPassword\n            : forgotPasswordBool\n      });\n    }\n    // Customizable Area End\n  }\n\n  // Customizable Area Start\n  async submitOtp() {\n    if (!this.state.otp || this.state.otp.length === 0) {\n      this.showAlert(configJSON.errorTitle, configJSON.errorOtpNotValid);\n      return;\n    }\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n    if (this.state.isFromForgotPassword) {\n      // console.log(\"entered is from forgot password!\");\n      const header = {\n        \"Content-Type\": configJSON.apiVerifyOtpContentType\n      };\n\n      //GO TO REQUEST STATE\n      this.otpAuthApiCallId = requestMessage.messageId;\n\n      requestMessage.addData(\n        getName(MessageEnum.RestAPIResponceEndPointMessage),\n        configJSON.apiVerifyForgotPasswordOtpEndPoint\n      );\n\n      requestMessage.addData(\n        getName(MessageEnum.RestAPIRequestHeaderMessage),\n        JSON.stringify(header)\n      );\n\n      const data = {\n        token: this.state.otpAuthToken ? this.state.otpAuthToken : \"\",\n        otp_code: this.state.otp ? this.state.otp : \"\"\n      };\n\n      const httpBody = {\n        data: data\n      };\n\n      //requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), \"POST\");\n\n      requestMessage.addData(\n        getName(MessageEnum.RestAPIRequestBodyMessage),\n        JSON.stringify(httpBody)\n      );\n    } else {\n      const headers = {\n        \"Content-Type\": configJSON.apiVerifyOtpContentType,\n        token: this.state.otpAuthToken\n      };\n\n      this.otpAuthApiCallId = requestMessage.messageId;\n\n      requestMessage.addData(\n        getName(MessageEnum.RestAPIResponceEndPointMessage),\n        configJSON.apiVerifyOtpEndPoint + this.state.otp\n      );\n\n      requestMessage.addData(\n        getName(MessageEnum.RestAPIRequestHeaderMessage),\n        JSON.stringify(headers)\n      );\n\n      requestMessage.addData(\n        getName(MessageEnum.RestAPIRequestBodyMessage),\n        JSON.stringify(JSON.stringify({}))\n      );\n    }\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.apiVerifyOtpMethod\n    );\n    // console.log(\"requestMessage.id is: \" + requestMessage.id);\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n  }\n\n  btnSubmitOTPProps = {\n    onPress: () => this.submitOtp()\n  };\n\n  txtMobilePhoneOTPWebProps = {\n    onChangeText: (text: string) => this.setState({ otp: text })\n  };\n\n  txtMobilePhoneOTPMobileProps = {\n    ...this.txtMobilePhoneOTPWebProps,\n    keyboardType: \"numeric\"\n  };\n\n  txtMobilePhoneOTPProps = this.isPlatformWeb()\n    ? this.txtMobilePhoneOTPWebProps\n    : this.txtMobilePhoneOTPMobileProps;\n\n  // Customizable Area End\n}\n"]},"metadata":{},"sourceType":"module"}