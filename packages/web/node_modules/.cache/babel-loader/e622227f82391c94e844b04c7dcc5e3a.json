{"ast":null,"code":"import _regeneratorRuntime from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport MessageEnum, { getName } from \"../../../framework/src/Messages/MessageEnum\";\nimport { runEngine } from \"../../../framework/src/RunEngine\"; // Customizable Area Start\n// Customizable Area End\n\nexport const configJSON = require(\"./config.js\");\nexport default class DashboardController extends BlockComponent {\n  constructor(props) {\n    super(props);\n    this.userDashboardApiCallId = \"\";\n\n    this.getDashboardDetails = () => {\n      const headers = {\n        \"Content-Type\": configJSON.dashboarContentType,\n        token: window.localStorage.getItem(\"auth\")\n      };\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      this.userDashboardApiCallId = requestMessage.messageId;\n      console.log(\"this.userProfileApiCallId\", this.userDashboardApiCallId);\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.endPointApiGetdashboardURL);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.dashboarApiMethodType);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    };\n\n    this.onMenuToggle = () => {\n      this.setState({\n        menuCollapsed: !this.state.menuCollapsed\n      });\n    };\n\n    this.receive = this.receive.bind(this);\n    this.subScribedMessages = [getName(MessageEnum.AccoutLoginSuccess), getName(MessageEnum.RestAPIResponceMessage)];\n    this.state = {\n      dashboardData: [],\n      errorMsg: \"\",\n      token: \"\",\n      loading: false,\n      user_type: configJSON.subscriber,\n      menuCollapsed: false,\n      searchText: \"\",\n      message: \"sgbfn\"\n    };\n    runEngine.attachBuildingBlock(this, this.subScribedMessages);\n  }\n\n  componentDidMount() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _this.getDashboardDetails();\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  }\n\n  receive(from, message) {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var responseJson, apiRequestCallId, errorReponse;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            // Customizable Area Start\n            runEngine.debugLog(\"Message Recived\", message);\n\n            if (getName(MessageEnum.RestAPIResponceMessage) === message.id) {\n              responseJson = message.getData(getName(MessageEnum.RestAPIResponceSuccessMessage));\n              console.log(responseJson);\n\n              if (responseJson && !responseJson.errors) {\n                apiRequestCallId = message.getData(getName(MessageEnum.RestAPIResponceDataMessage));\n                console.log(apiRequestCallId, \"api call id\");\n\n                if (apiRequestCallId != null) {\n                  console.log(responseJson);\n                  console.log(apiRequestCallId, \"api call id\");\n                  console.log(_this2.userDashboardApiCallId, \"user id\");\n\n                  if (apiRequestCallId === _this2.userDashboardApiCallId) {\n                    console.log(responseJson, \"updated response\");\n\n                    _this2.setState({\n                      message: _this2.state.message\n                    });\n                  }\n                }\n              } else {\n                errorReponse = message.getData(getName(MessageEnum.RestAPIResponceErrorMessage));\n\n                _this2.parseApiCatchErrorResponse(errorReponse);\n              }\n            }\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }))();\n  } // Handler dashboard Details\n\n\n}","map":{"version":3,"sources":["/home/lp-greenapex/gargi/okydpim-36944-react-native/src/packages/blocks/dashboard/src/DashboardControllerNew.web.tsx"],"names":["Message","BlockComponent","MessageEnum","getName","runEngine","configJSON","require","DashboardController","constructor","props","userDashboardApiCallId","getDashboardDetails","headers","dashboarContentType","token","window","localStorage","getItem","requestMessage","RestAPIRequestMessage","messageId","console","log","addData","RestAPIResponceEndPointMessage","endPointApiGetdashboardURL","RestAPIRequestHeaderMessage","JSON","stringify","RestAPIRequestMethodMessage","dashboarApiMethodType","sendMessage","id","onMenuToggle","setState","menuCollapsed","state","receive","bind","subScribedMessages","AccoutLoginSuccess","RestAPIResponceMessage","dashboardData","errorMsg","loading","user_type","subscriber","searchText","message","attachBuildingBlock","componentDidMount","from","debugLog","responseJson","getData","RestAPIResponceSuccessMessage","errors","apiRequestCallId","RestAPIResponceDataMessage","errorReponse","RestAPIResponceErrorMessage","parseApiCatchErrorResponse"],"mappings":"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","sourcesContent":["import { IBlock } from \"../../../framework/src/IBlock\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport MessageEnum, {\n  getName,\n} from \"../../../framework/src/Messages/MessageEnum\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\n\n// Customizable Area Start\n// Customizable Area End\n\nexport const configJSON = require(\"./config.js\");\n\nexport interface Props {\n  navigation: any;\n  id: string;\n  // Customizable Area Start\n  // Customizable Area End\n}\ninterface S {\n  // Customizable Area Start\n  dashboardData: any;\n  token: string;\n  errorMsg: string;\n  loading: boolean;\n  user_type: string;\n  menuCollapsed: boolean;\n  searchText: string | null | undefined;\n  message: string;\n  // Customizable Area End\n}\ninterface SS {\n  id: any;\n}\n\nexport default class DashboardController extends BlockComponent<Props, S, SS> {\n  userDashboardApiCallId: string = \"\";\n\n  constructor(props: Props) {\n    super(props);\n    this.receive = this.receive.bind(this);\n\n    this.subScribedMessages = [\n      getName(MessageEnum.AccoutLoginSuccess),\n      getName(MessageEnum.RestAPIResponceMessage),\n    ];\n\n    this.state = {\n      dashboardData: [],\n      errorMsg: \"\",\n      token: \"\",\n      loading: false,\n      user_type: configJSON.subscriber,\n      menuCollapsed: false,\n      searchText: \"\",\n      message: \"sgbfn\",\n    };\n    runEngine.attachBuildingBlock(this as IBlock, this.subScribedMessages);\n  }\n\n  async componentDidMount() {\n    this.getDashboardDetails();\n  }\n\n  async receive(from: string, message: Message) {\n    // Customizable Area Start\n    runEngine.debugLog(\"Message Recived\", message);\n\n    if (getName(MessageEnum.RestAPIResponceMessage) === message.id) {\n      var responseJson = message.getData(\n        getName(MessageEnum.RestAPIResponceSuccessMessage)\n      );\n      console.log(responseJson);\n      if (responseJson && !responseJson.errors) {\n        const apiRequestCallId = message.getData(\n          getName(MessageEnum.RestAPIResponceDataMessage)\n        );\n        console.log(apiRequestCallId, \"api call id\");\n\n        if (apiRequestCallId != null) {\n          console.log(responseJson);\n          console.log(apiRequestCallId, \"api call id\");\n          console.log(this.userDashboardApiCallId, \"user id\");\n\n          if (apiRequestCallId === this.userDashboardApiCallId) {\n            console.log(responseJson, \"updated response\");\n            this.setState({\n              message: this.state.message,\n            });\n          }\n        }\n      } else {\n        var errorReponse = message.getData(\n          getName(MessageEnum.RestAPIResponceErrorMessage)\n        );\n        this.parseApiCatchErrorResponse(errorReponse);\n      }\n    }\n  }\n\n  // Handler dashboard Details\n  getDashboardDetails = (): boolean => {\n    const headers = {\n      \"Content-Type\": configJSON.dashboarContentType,\n      token: window.localStorage.getItem(\"auth\"),\n    };\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n    this.userDashboardApiCallId = requestMessage.messageId;\n    console.log(\"this.userProfileApiCallId\", this.userDashboardApiCallId);\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.endPointApiGetdashboardURL\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(headers)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.dashboarApiMethodType\n    );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n\n    return true;\n  };\n\n  onMenuToggle = () => {\n    this.setState({\n      menuCollapsed: !this.state.menuCollapsed,\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}