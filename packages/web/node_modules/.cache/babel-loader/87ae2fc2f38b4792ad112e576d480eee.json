{"ast":null,"code":"import _regeneratorRuntime from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport MessageEnum, { getName } from \"../../../framework/src/Messages/MessageEnum\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nimport * as Yup from \"yup\"; // Customizable Area Start\n// Customizable Area End\n\nexport const configJSON = require(\"./config\");\nexport default class UserGroupsController extends BlockComponent {\n  constructor(props) {\n    super(props);\n    this.getAllMembersApiCallId = \"\";\n    this.getTeamMemberApiCallId = \"\";\n    this.trailsOfTeamMemberApiCallId = \"\";\n    this.deleteTeamMemberApiCallId = \"\";\n    this.inviteTeamMemberApiCallId = \"\";\n    this.updateTeamMemberApiCallId = \"\";\n    this.rolesListingApiCallId = \"\";\n    this.resendinviteTeamMemberApiCallId = \"\";\n\n    this.getTeamMember = () => {\n      const headers = {\n        \"Content-Type\": configJSON.getAllMembersApiContentType,\n        token: window.localStorage.getItem(\"auth\")\n      };\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      this.getTeamMemberApiCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.TeamMemberAPiEndPoint);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.validationGetApiMethodType);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    };\n\n    this.getRolesList = () => {\n      const headers = {\n        \"Content-Type\": configJSON.getAllMembersApiContentType,\n        token: window.localStorage.getItem(\"auth\")\n      };\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      this.rolesListingApiCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.RolesListAPiEndPoint);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.validationGetApiMethodType);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    };\n\n    this.openSnackBarHandler = (type, message) => {\n      this.setState({\n        snackBar: {\n          show: true,\n          message: message,\n          type\n        }\n      });\n    };\n\n    this.closeSnackBarHandler = () => {\n      this.setState({\n        snackBar: {\n          show: false,\n          message: this.state.snackBar.message,\n          type: this.state.snackBar.type\n        }\n      });\n    };\n\n    this.txtInputWebProps = {\n      onChangeText: text => {\n        this.setState({\n          txtInputValue: text\n        });\n      },\n      secureTextEntry: false\n    };\n\n    this.handleEventTypeChange = selectedOption => {\n      // console.log(`Option selected:`, selectedOption);\n      this.setState({\n        selectedEventTypeOption: selectedOption\n      });\n    };\n\n    this.handleResourceTypeChange = selectedOption => {\n      // console.log(`Option selected:`, selectedOption);\n      this.setState({\n        selectedResourceTypeOption: selectedOption\n      });\n    };\n\n    this.hanldeOnChangeDate = dates => {\n      // console.log(dates);\n      const _dates = _slicedToArray(dates, 2),\n            start = _dates[0],\n            end = _dates[1];\n\n      this.setState({\n        startDate: start,\n        endDate: end,\n        showFilterCalendar: end === null || end === \"\"\n      });\n    };\n\n    this.onCalendarOpen = () => {\n      this.setState({\n        showFilterCalendar: true\n      });\n    };\n\n    this.logsFilterHandler = () => {\n      this.setState({\n        showLogsFilter: !this.state.showLogsFilter\n      });\n    };\n\n    this.handleTrailType = type => {\n      this.setState({\n        trailType: type\n      });\n    };\n\n    this.onMenuToggle = () => {\n      this.setState({\n        menuCollapsed: !this.state.menuCollapsed\n      });\n    };\n\n    this.openTrailViewDetailsModalHandler = () => {\n      this.getRolesList();\n      this.setState({\n        memberDetailsModal: true,\n        currentId: ''\n      });\n    };\n\n    this.closeTrailViewDetailsModalHandler = () => {\n      this.setState({\n        memberDetailsModal: false,\n        firstName: \"\",\n        designation: \"\",\n        phone: \"\",\n        email: \"\",\n        rolesGroup: []\n      });\n    };\n\n    this.openInviteTeamMemberModalHandler = () => {\n      this.getRolesList();\n      this.setState({\n        memberDetailsModal: false,\n        inviteMemberDetailModal: true\n      });\n    };\n\n    this.closeInviteTeamMemberModalHandler = () => {\n      this.setState({\n        inviteMemberDetailModal: false\n      });\n    };\n\n    this.openEditTeamMemberModalHandler = () => {\n      this.getRolesList();\n      this.setState({\n        memberDetailsModal: true,\n        inviteMemberDetailModal: false\n      });\n    };\n\n    this.getTeamMemberbyId = accountId => {\n      const headers = {\n        \"Content-Type\": configJSON.getAllMembersApiContentType,\n        token: window.localStorage.getItem(\"auth\")\n      };\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      this.getTeamMemberApiCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), \"\".concat(configJSON.TeamMemberAPiEndPoint, \"/\").concat(accountId));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.validationGetApiMethodType);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    };\n\n    this.updateTeamMemberbyId = values => {\n      const headers = {\n        \"Content-Type\": configJSON.getAllMembersApiContentType,\n        token: window.localStorage.getItem(\"auth\")\n      };\n      let role_id = [];\n\n      for (let i = 0; i < (values === null || values === void 0 ? void 0 : values.rolesGroup.length); i++) {\n        role_id.push(values === null || values === void 0 ? void 0 : values.rolesGroup[i].value);\n      }\n\n      console.log(\"crate\", role_id);\n      const attrs = {\n        fullname: values.firstName,\n        company_name: this.state.company_name,\n        address: this.state.address,\n        country: this.state.country,\n        teamMemberOkyd: this.state.teamMemberOkyd,\n        natureOfBussiness: this.state.natureOfBussiness,\n        clientTarget: this.state.clientTarget,\n        role_ids: role_id || [],\n        full_phone_number: values.phone\n      };\n      this.setState({\n        firstName: values.firstName,\n        email: values.email,\n        phone: values.phone,\n        designation: values.designation,\n        role_ids: values.rolesGroup,\n        rolesGroup: values.rolesGroup\n      }); // const data = {\n      //   // type: \"email_account\",\n      //   user: attrs,\n      // };\n\n      const httpBody = {\n        user: attrs\n      }; // console.log('httpBody',httpBody)\n\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      this.updateTeamMemberApiCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), \"\".concat(configJSON.TeamMemberAPiEndPoint, \"/\").concat(this.state.currentId));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(httpBody));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.validationUpdateApiMethodType);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      this.openInviteTeamMemberModalHandler();\n      return true;\n    };\n\n    this.deleteTeamMemberbyId = memberDetail => {\n      // const headers = {\n      //   \"Content-Type\": configJSON.getAllMembersApiContentType,\n      //   token: window.localStorage.getItem(\"auth\"),\n      // };\n      // const requestMessage = new Message(\n      //   getName(MessageEnum.RestAPIRequestMessage)\n      // );\n      // this.deleteTeamMemberApiCallId = requestMessage.messageId;\n      // requestMessage.addData(\n      //   getName(MessageEnum.RestAPIResponceEndPointMessage),\n      //   `${configJSON.TeamMemberAPiEndPoint}/${memberDetail.id}`\n      // );\n      // requestMessage.addData(\n      //   getName(MessageEnum.RestAPIRequestHeaderMessage),\n      //   JSON.stringify(headers)\n      // );\n      // requestMessage.addData(\n      //   getName(MessageEnum.RestAPIRequestMethodMessage),\n      //   configJSON.validationDeleteApiMethodType\n      // );\n      // runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    };\n\n    this.handleInviteTeamMember = values => {\n      const headers = {\n        \"Content-Type\": configJSON.getAllMembersApiContentType,\n        token: window.localStorage.getItem(\"auth\")\n      };\n      const attrs = {\n        fullname: values.firstName,\n        email: values.email,\n        full_phone_number: values.phone,\n        designation: values.designation,\n        role_ids: values.rolesGroup\n      };\n      let role_id = [];\n\n      for (let i = 0; i < (values === null || values === void 0 ? void 0 : values.rolesGroup.length); i++) {\n        role_id.push(values === null || values === void 0 ? void 0 : values.rolesGroup[i].value);\n      }\n\n      console.log(\"crate\", role_id);\n      this.setState({\n        firstName: values.firstName,\n        email: values.email,\n        phone: values.phone,\n        designation: values.designation,\n        role_ids: role_id || []\n      });\n      const data = {\n        type: \"email_account\",\n        attributes: attrs\n      };\n      const httpBody = {\n        data: data\n      }; // console.log('httpBody',httpBody)\n\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      this.inviteTeamMemberApiCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.InviteTeamMemberAPiEndPoint);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(httpBody));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.validationPostApiMethodType);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      this.openInviteTeamMemberModalHandler();\n      return true;\n    };\n\n    this.handleResentInviteTeamMember = () => {\n      const headers = {\n        \"Content-Type\": configJSON.getAllMembersApiContentType,\n        token: window.localStorage.getItem(\"auth\")\n      };\n      const attrs = {\n        fullname: this.state.firstName,\n        email: this.state.email,\n        full_phone_number: this.state.phone,\n        designation: this.state.designation\n      };\n      const data = {\n        type: \"email_account\",\n        attributes: attrs\n      };\n      const httpBody = {\n        data: data\n      }; // console.log('httpBody',httpBody)\n\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      this.resendinviteTeamMemberApiCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.ResendInviteTeamMemberAPiEndPoint);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(httpBody));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.validationPostApiMethodType);\n      runEngine.sendMessage(requestMessage.id, requestMessage); // this.openInviteTeamMemberModalHandler()\n\n      return true;\n    };\n\n    this.handleEditTeamMember = memberDetail => {\n      var _memberDetail$attribu, _memberDetail$attribu2, _memberDetail$attribu3, _memberDetail$attribu4, _memberDetail$attribu5, _memberDetail$attribu6, _memberDetail$attribu7, _memberDetail$attribu8, _memberDetail$attribu9, _memberDetail$attribu10, _memberDetail$attribu11, _memberDetail$attribu12;\n\n      // console.log(\"idx\", memberDetail.role_ids);\n      this.getRolesList();\n      this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n        currentId: memberDetail.id,\n        firstName: memberDetail === null || memberDetail === void 0 ? void 0 : (_memberDetail$attribu = memberDetail.attributes) === null || _memberDetail$attribu === void 0 ? void 0 : _memberDetail$attribu.fullname,\n        designation: memberDetail === null || memberDetail === void 0 ? void 0 : (_memberDetail$attribu2 = memberDetail.attributes) === null || _memberDetail$attribu2 === void 0 ? void 0 : _memberDetail$attribu2.designation,\n        phone: memberDetail === null || memberDetail === void 0 ? void 0 : (_memberDetail$attribu3 = memberDetail.attributes) === null || _memberDetail$attribu3 === void 0 ? void 0 : _memberDetail$attribu3.full_phone_number,\n        email: memberDetail === null || memberDetail === void 0 ? void 0 : (_memberDetail$attribu4 = memberDetail.attributes) === null || _memberDetail$attribu4 === void 0 ? void 0 : _memberDetail$attribu4.email,\n        rolesGroup: memberDetail === null || memberDetail === void 0 ? void 0 : (_memberDetail$attribu5 = memberDetail.attributes) === null || _memberDetail$attribu5 === void 0 ? void 0 : _memberDetail$attribu5.roles,\n        company_name: memberDetail === null || memberDetail === void 0 ? void 0 : (_memberDetail$attribu6 = memberDetail.attributes) === null || _memberDetail$attribu6 === void 0 ? void 0 : _memberDetail$attribu6.company_name,\n        address: memberDetail === null || memberDetail === void 0 ? void 0 : (_memberDetail$attribu7 = memberDetail.attributes) === null || _memberDetail$attribu7 === void 0 ? void 0 : _memberDetail$attribu7.address,\n        country: memberDetail === null || memberDetail === void 0 ? void 0 : (_memberDetail$attribu8 = memberDetail.attributes) === null || _memberDetail$attribu8 === void 0 ? void 0 : _memberDetail$attribu8.country,\n        teamMemberOkyd: memberDetail === null || memberDetail === void 0 ? void 0 : (_memberDetail$attribu9 = memberDetail.attributes) === null || _memberDetail$attribu9 === void 0 ? void 0 : _memberDetail$attribu9.teamMemberOkyd,\n        natureOfBussiness: memberDetail === null || memberDetail === void 0 ? void 0 : (_memberDetail$attribu10 = memberDetail.attributes) === null || _memberDetail$attribu10 === void 0 ? void 0 : _memberDetail$attribu10.natureOfBussiness,\n        clientTarget: memberDetail === null || memberDetail === void 0 ? void 0 : (_memberDetail$attribu11 = memberDetail.attributes) === null || _memberDetail$attribu11 === void 0 ? void 0 : _memberDetail$attribu11.clientTarget,\n        role_ids: memberDetail === null || memberDetail === void 0 ? void 0 : (_memberDetail$attribu12 = memberDetail.attributes) === null || _memberDetail$attribu12 === void 0 ? void 0 : _memberDetail$attribu12.roles,\n        memberDetailsModal: true\n      }));\n      return true;\n    };\n\n    this.receive = this.receive.bind(this); // Customizable Area Start\n\n    this.subScribedMessages = [getName(MessageEnum.AccoutLoginSuccess), getName(MessageEnum.RestAPIResponceMessage)];\n    let TeamMemberSchema = {\n      firstName: Yup.string().required(configJSON.errorNameEmpty),\n      designation: Yup.string().required(configJSON.errorDesignationEmpty),\n      phone: Yup.string().required(configJSON.errorPhoneEmpty).matches(configJSON.PHONE_REGULAR_EXPRESSION, configJSON.errorPhoneNotMatch),\n      email: Yup.string().email(configJSON.errorEmailValidation).required(configJSON.errorEmailEmpty),\n      rolesGroup: Yup.string().nullable().required(configJSON.errorUserGroupEmpty)\n    };\n    this.state = {\n      currentId: \"\",\n      txtInputValue: \"\",\n      txtSavedValue: \"A\",\n      enableField: false,\n      trailType: configJSON.allLogsText,\n      startDate: new Date(),\n      endDate: null,\n      showFilterCalendar: false,\n      userType: configJSON.subscriber,\n      menuCollapsed: false,\n      membersData: [],\n      getTeamMembetList: [],\n      trailsOfTeamMemberData: [],\n      memberDetailsModal: false,\n      showLogsFilter: true,\n      selectedEventTypeOption: null,\n      selectedResourceTypeOption: null,\n      searchText: \"\",\n      TeamMemberSchema: TeamMemberSchema,\n      firstName: \"\",\n      designation: \"\",\n      phone: \"\",\n      email: \"\",\n      rolesGroup: [],\n      rolesGroupName: [],\n      inviteMemberDetailModal: false,\n      rolesList: [],\n      company_name: \"\",\n      address: \"\",\n      country: \"\",\n      teamMemberOkyd: \"\",\n      natureOfBussiness: \"\",\n      clientTarget: \"\",\n      role_ids: [],\n      snackBar: {\n        show: false\n      }\n    }; // Customizable Area End\n\n    runEngine.attachBuildingBlock(this, this.subScribedMessages);\n  } // Handler for Get All Logs\n\n\n  componentDidMount() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _this.getTeamMember();\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  }\n\n  receive(from, message) {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var responseJson, apiRequestCallId, errorReponse, rolesList, errors, _this2$props;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            // Customizable Area Start\n            // runEngine.debugLog(\"Message Recived\", message);\n            if (getName(MessageEnum.RestAPIResponceMessage) === message.id) {\n              responseJson = message.getData(getName(MessageEnum.RestAPIResponceSuccessMessage));\n              apiRequestCallId = message.getData(getName(MessageEnum.RestAPIResponceDataMessage));\n              errorReponse = message.getData(getName(MessageEnum.RestAPIResponceErrorMessage));\n\n              if (responseJson && !responseJson.errors && responseJson.data) {\n                if (apiRequestCallId != null) {\n                  console.log(\"responseJson\", responseJson); // Store All Members data\n\n                  if (apiRequestCallId === _this2.getAllMembersApiCallId && responseJson !== undefined) {\n                    // this.openSnackBarHandler('success', configJSON.successCreateAccount);\n                    setTimeout(() => {\n                      _this2.setState({\n                        membersData: responseJson.data\n                      });\n                    }, 1000);\n                  } // Store All Logs data\n\n\n                  if (apiRequestCallId === _this2.getTeamMemberApiCallId && responseJson !== undefined) {\n                    _this2.setState({\n                      getTeamMembetList: responseJson.data\n                    });\n                  } // Store trails Of Team Member detaills\n\n\n                  if (apiRequestCallId === _this2.trailsOfTeamMemberApiCallId && responseJson !== undefined) {\n                    _this2.setState({\n                      trailsOfTeamMemberData: {\n                        data: responseJson.data,\n                        count: responseJson.meta.total_record,\n                        name: responseJson.data[0].attributes.account_detail.name\n                      }\n                    });\n                  }\n\n                  if (apiRequestCallId === _this2.deleteTeamMemberApiCallId) {\n                    console.log(\"deleteTeamMemberApiCallId\", responseJson);\n                  }\n\n                  if (apiRequestCallId === _this2.inviteTeamMemberApiCallId) {\n                    //  console.log('inviteTeamMemberApiCallId',responseJson)\n                    _this2.openInviteTeamMemberModalHandler();\n                  }\n\n                  if (apiRequestCallId === _this2.rolesListingApiCallId && responseJson !== undefined) {\n                    rolesList = [];\n                    responseJson.data.map(x => {\n                      rolesList.push({\n                        value: x.attributes.id,\n                        label: x.attributes.name\n                      });\n                    });\n\n                    _this2.setState({\n                      rolesList\n                    });\n                  }\n                }\n              } else {\n                errors = responseJson.errors;\n\n                _this2.parseApiCatchErrorResponse(errorReponse);\n\n                if (errors[0].token === 'Invalid token' || errors[0].token === 'Token has Expired') {\n                  localStorage.setItem(\"auth\", \"\"); //@ts-ignore\n\n                  (_this2$props = _this2.props) === null || _this2$props === void 0 ? void 0 : _this2$props.history.push(\"/login\");\n                } else if (errors[0].message) {\n                  _this2.openSnackBarHandler('error', errors[0].message);\n                }\n              }\n            } // Customizable Area End\n\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }))();\n  } // Customizable Area Start\n\n\n  doButtonPressed() {\n    let msg = new Message(getName(MessageEnum.AccoutLoginSuccess));\n    msg.addData(getName(MessageEnum.AuthTokenDataMessage), this.state.txtInputValue);\n    this.send(msg);\n  } // Customizable Area End\n\n\n}","map":{"version":3,"sources":["/home/lp-greenapex/gargi/okydpim-36944-react-native/src/packages/blocks/UserGroups/src/UserGroupsController.web.tsx"],"names":["Message","BlockComponent","MessageEnum","getName","runEngine","Yup","configJSON","require","UserGroupsController","constructor","props","getAllMembersApiCallId","getTeamMemberApiCallId","trailsOfTeamMemberApiCallId","deleteTeamMemberApiCallId","inviteTeamMemberApiCallId","updateTeamMemberApiCallId","rolesListingApiCallId","resendinviteTeamMemberApiCallId","getTeamMember","headers","getAllMembersApiContentType","token","window","localStorage","getItem","requestMessage","RestAPIRequestMessage","messageId","addData","RestAPIResponceEndPointMessage","TeamMemberAPiEndPoint","RestAPIRequestHeaderMessage","JSON","stringify","RestAPIRequestMethodMessage","validationGetApiMethodType","sendMessage","id","getRolesList","RolesListAPiEndPoint","openSnackBarHandler","type","message","setState","snackBar","show","closeSnackBarHandler","state","txtInputWebProps","onChangeText","text","txtInputValue","secureTextEntry","handleEventTypeChange","selectedOption","selectedEventTypeOption","handleResourceTypeChange","selectedResourceTypeOption","hanldeOnChangeDate","dates","start","end","startDate","endDate","showFilterCalendar","onCalendarOpen","logsFilterHandler","showLogsFilter","handleTrailType","trailType","onMenuToggle","menuCollapsed","openTrailViewDetailsModalHandler","memberDetailsModal","currentId","closeTrailViewDetailsModalHandler","firstName","designation","phone","email","rolesGroup","openInviteTeamMemberModalHandler","inviteMemberDetailModal","closeInviteTeamMemberModalHandler","openEditTeamMemberModalHandler","getTeamMemberbyId","accountId","updateTeamMemberbyId","values","role_id","i","length","push","value","console","log","attrs","fullname","company_name","address","country","teamMemberOkyd","natureOfBussiness","clientTarget","role_ids","full_phone_number","httpBody","user","RestAPIRequestBodyMessage","validationUpdateApiMethodType","deleteTeamMemberbyId","memberDetail","handleInviteTeamMember","data","attributes","InviteTeamMemberAPiEndPoint","validationPostApiMethodType","handleResentInviteTeamMember","ResendInviteTeamMemberAPiEndPoint","handleEditTeamMember","roles","receive","bind","subScribedMessages","AccoutLoginSuccess","RestAPIResponceMessage","TeamMemberSchema","string","required","errorNameEmpty","errorDesignationEmpty","errorPhoneEmpty","matches","PHONE_REGULAR_EXPRESSION","errorPhoneNotMatch","errorEmailValidation","errorEmailEmpty","nullable","errorUserGroupEmpty","txtSavedValue","enableField","allLogsText","Date","userType","subscriber","membersData","getTeamMembetList","trailsOfTeamMemberData","searchText","rolesGroupName","rolesList","attachBuildingBlock","componentDidMount","from","responseJson","getData","RestAPIResponceSuccessMessage","apiRequestCallId","RestAPIResponceDataMessage","errorReponse","RestAPIResponceErrorMessage","errors","undefined","setTimeout","count","meta","total_record","name","account_detail","map","x","label","parseApiCatchErrorResponse","setItem","history","doButtonPressed","msg","AuthTokenDataMessage","send"],"mappings":"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","sourcesContent":["import { IBlock } from \"../../../framework/src/IBlock\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport MessageEnum, {\n  getName,\n} from \"../../../framework/src/Messages/MessageEnum\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nimport * as Yup from \"yup\";\n\n// Customizable Area Start\n// Customizable Area End\n\nexport const configJSON = require(\"./config\");\n\nexport interface Props {\n  navigation: any;\n  id: string;\n  // Customizable Area Start\n  memberDetails: any;\n  // Customizable Area End\n}\n\ninterface S {\n  // Customizable Area Start\n  currentId: any;\n  txtInputValue: string;\n  txtSavedValue: string;\n  enableField: boolean;\n  trailType: string;\n  startDate: Date | null | undefined;\n  endDate: Date | null | undefined;\n  showFilterCalendar: boolean;\n  userType: string;\n  menuCollapsed: boolean;\n  membersData: object[];\n  getTeamMembetList: object[];\n  trailsOfTeamMemberData: any;\n  memberDetailsModal: boolean;\n  showLogsFilter: boolean;\n  selectedEventTypeOption: SelectOptions | null;\n  selectedResourceTypeOption: SelectOptions | null;\n  searchText: string | null | undefined;\n  TeamMemberSchema: any;\n  firstName: string;\n  designation: string;\n  phone: string;\n  email: string;\n  rolesGroup: any;\n  rolesGroupName: any;\n  inviteMemberDetailModal: boolean;\n  rolesList: any;\n  company_name: any;\n  address: any;\n  country: any;\n  teamMemberOkyd: any;\n  natureOfBussiness: any;\n  clientTarget: any;\n  role_ids:any;\n    snackBar: {\n    show: boolean,\n    message?: string,\n    type?: \"success\" | \"info\" | \"warning\" | \"error\" | undefined\n  };\n  // Customizable Area End\n}\n\ninterface SelectOptions {\n  value: string;\n  label: string;\n}\n\ninterface SS {\n  id: any;\n}\n\ninterface RoleListDataType {\n  value: string,\n  label: string\n}\n\n\nexport default class UserGroupsController extends BlockComponent<Props, S, SS> {\n  getAllMembersApiCallId: string = \"\";\n  getTeamMemberApiCallId: string = \"\";\n  trailsOfTeamMemberApiCallId: string = \"\";\n  deleteTeamMemberApiCallId: string = \"\";\n  inviteTeamMemberApiCallId: string = \"\";\n  updateTeamMemberApiCallId: string = \"\";\n  rolesListingApiCallId: string = \"\";\n  resendinviteTeamMemberApiCallId: string = \"\";\n\n\n  constructor(props: Props) {\n    super(props);\n    this.receive = this.receive.bind(this);\n\n    // Customizable Area Start\n    this.subScribedMessages = [\n      getName(MessageEnum.AccoutLoginSuccess),\n      getName(MessageEnum.RestAPIResponceMessage),\n    ];\n\n    let TeamMemberSchema = {\n      firstName: Yup.string().required(configJSON.errorNameEmpty),\n      designation: Yup.string().required(configJSON.errorDesignationEmpty),\n      phone: Yup.string()\n        .required(configJSON.errorPhoneEmpty)\n        .matches(\n          configJSON.PHONE_REGULAR_EXPRESSION,\n          configJSON.errorPhoneNotMatch\n        ),\n      email: Yup.string()\n        .email(configJSON.errorEmailValidation)\n        .required(configJSON.errorEmailEmpty),\n      rolesGroup: Yup.string()\n        .nullable()\n        .required(configJSON.errorUserGroupEmpty),\n    };\n\n    this.state = {\n      currentId: \"\",\n      txtInputValue: \"\",\n      txtSavedValue: \"A\",\n      enableField: false,\n      trailType: configJSON.allLogsText,\n      startDate: new Date(),\n      endDate: null,\n      showFilterCalendar: false,\n      userType: configJSON.subscriber,\n      menuCollapsed: false,\n      membersData: [],\n      getTeamMembetList: [],\n      trailsOfTeamMemberData: [],\n      memberDetailsModal: false,\n      showLogsFilter: true,\n      selectedEventTypeOption: null,\n      selectedResourceTypeOption: null,\n      searchText: \"\",\n      TeamMemberSchema: TeamMemberSchema,\n      firstName: \"\",\n      designation: \"\",\n      phone: \"\",\n      email: \"\",\n      rolesGroup: [],\n      rolesGroupName:[],\n      inviteMemberDetailModal: false,\n      rolesList:[],\n      company_name: \"\",\n      address: \"\",\n      country: \"\",\n      teamMemberOkyd: \"\",\n      natureOfBussiness: \"\",\n      clientTarget: \"\",\n      role_ids:[],\n         snackBar: {\n        show: false,\n      },\n    };\n    // Customizable Area End\n    runEngine.attachBuildingBlock(this as IBlock, this.subScribedMessages);\n\n  }\n\n  // Handler for Get All Logs\n  getTeamMember = (): boolean => {\n    const headers = {\n      \"Content-Type\": configJSON.getAllMembersApiContentType,\n      token: window.localStorage.getItem(\"auth\"),\n    };\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n    this.getTeamMemberApiCallId = requestMessage.messageId;\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.TeamMemberAPiEndPoint\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(headers)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.validationGetApiMethodType\n    );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n\n    return true;\n  };\n\n  getRolesList = (): boolean => {\n    const headers = {\n      \"Content-Type\": configJSON.getAllMembersApiContentType,\n      token: window.localStorage.getItem(\"auth\"),\n    };\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n    this.rolesListingApiCallId = requestMessage.messageId;\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.RolesListAPiEndPoint\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(headers)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.validationGetApiMethodType\n    );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n\n    return true;\n  };\n\n   // Open View Details Modal\n  openSnackBarHandler = (type: \"success\" | \"info\" | \"warning\" | \"error\" | undefined,  message: string): void => {\n    this.setState({ snackBar: {\n      show: true,\n      message: message,\n      type\n    } });\n  };\n\n  // Close View Details Modal\n  closeSnackBarHandler = () => {\n    this.setState({ snackBar: {\n      show: false,\n      message: this.state.snackBar.message,\n      type: this.state.snackBar.type\n    }});\n  };\n\n  async componentDidMount() {\n    this.getTeamMember();\n  }\n\n  async receive(from: string, message: Message) {\n    // Customizable Area Start\n    // runEngine.debugLog(\"Message Recived\", message);\n   \n    if (getName(MessageEnum.RestAPIResponceMessage) === message.id) {\n      var responseJson = message.getData(\n        getName(MessageEnum.RestAPIResponceSuccessMessage)\n      );\n      const apiRequestCallId = message.getData(\n        getName(MessageEnum.RestAPIResponceDataMessage)\n      );\n       var errorReponse = message.getData(\n          getName(MessageEnum.RestAPIResponceErrorMessage)\n        );\n      if (responseJson && !responseJson.errors && responseJson.data) {\n        if (apiRequestCallId != null) {\n         console.log(\"responseJson\",responseJson)\n\n          // Store All Members data\n          if (apiRequestCallId === this.getAllMembersApiCallId && responseJson !== undefined) {\n            // this.openSnackBarHandler('success', configJSON.successCreateAccount);\n            setTimeout(() => {\n              this.setState({\n                membersData: responseJson.data,\n              });\n            }, 1000);\n          }\n\n           // Store All Logs data\n          if (\n            apiRequestCallId === this.getTeamMemberApiCallId &&\n            responseJson !== undefined\n          ) {\n            this.setState({\n              getTeamMembetList: responseJson.data,\n            });\n          }\n\n          // Store trails Of Team Member detaills\n          if (\n            apiRequestCallId === this.trailsOfTeamMemberApiCallId &&\n            responseJson !== undefined\n          ) {\n            this.setState({\n              trailsOfTeamMemberData: {\n                data: responseJson.data,\n                count: responseJson.meta.total_record,\n                name: responseJson.data[0].attributes.account_detail.name,\n              },\n            });\n          }\n\n          if (apiRequestCallId === this.deleteTeamMemberApiCallId) {\n            console.log(\"deleteTeamMemberApiCallId\", responseJson);\n          }\n\n\n          if (apiRequestCallId === this.inviteTeamMemberApiCallId) {\n            //  console.log('inviteTeamMemberApiCallId',responseJson)\n            this.openInviteTeamMemberModalHandler();\n          }\n\n\n          if (\n            apiRequestCallId === this.rolesListingApiCallId &&\n            responseJson !== undefined\n          ) {\n            const rolesList: RoleListDataType[] = [];\n            responseJson.data.map((x: any) => {\n              rolesList.push({\n                value: x.attributes.id,\n                label: x.attributes.name,\n              });\n            });\n            this.setState({ rolesList });\n          }\n\n          \n        }\n      } else {\n        const errors = responseJson.errors;\n        this.parseApiCatchErrorResponse(errorReponse);\n        if(errors[0].token === 'Invalid token' ||errors[0].token ===  'Token has Expired') {\n          localStorage.setItem(\"auth\", \"\");\n          //@ts-ignore\n          this.props?.history.push(\"/login\");\n        } else if(errors[0].message) {\n          this.openSnackBarHandler('error', errors[0].message);\n        } \n      }\n    }\n    // Customizable Area End\n\n  \n  }\n\n  // Customizable Area Start\n  txtInputWebProps = {\n    onChangeText: (text: string) => {\n      this.setState({ txtInputValue: text });\n    },\n    secureTextEntry: false,\n  };\n\n  doButtonPressed() {\n    let msg = new Message(getName(MessageEnum.AccoutLoginSuccess));\n    msg.addData(\n      getName(MessageEnum.AuthTokenDataMessage),\n      this.state.txtInputValue\n    );\n    this.send(msg);\n  }\n  // Customizable Area End\n\n  handleEventTypeChange = (selectedOption: any) => {\n    // console.log(`Option selected:`, selectedOption);\n    this.setState({\n      selectedEventTypeOption: selectedOption,\n    });\n  };\n\n  handleResourceTypeChange = (selectedOption: any) => {\n    // console.log(`Option selected:`, selectedOption);\n    this.setState({\n      selectedResourceTypeOption: selectedOption,\n    });\n  };\n\n  hanldeOnChangeDate = (dates: any): any => {\n    // console.log(dates);\n    const [start, end] = dates;\n    this.setState({\n      startDate: start,\n      endDate: end,\n      showFilterCalendar: end === null || end === \"\",\n    });\n  };\n\n  // Open Calendar popper\n  onCalendarOpen = () => {\n    this.setState({\n      showFilterCalendar: true,\n    });\n  };\n\n  logsFilterHandler = () => {\n    this.setState({\n      showLogsFilter: !this.state.showLogsFilter,\n    });\n  };\n\n  // Trail Type useImperativeHandle(\n  handleTrailType = (type: string): void => {\n    this.setState({\n      trailType: type,\n    });\n  };\n\n  onMenuToggle = () => {\n    this.setState({\n      menuCollapsed: !this.state.menuCollapsed,\n    });\n  };\n\n  // Open View Details Modal\n  openTrailViewDetailsModalHandler = () => {\n    this.getRolesList()\n    this.setState({ \n      memberDetailsModal: true,\n      currentId:''    \n    });\n  };\n\n  // Close View Details Modal\n  closeTrailViewDetailsModalHandler = () => {\n    this.setState({ \n      memberDetailsModal: false,\n      firstName: \"\",\n      designation: \"\",\n      phone: \"\",\n      email: \"\",\n      rolesGroup: []\n     });\n  };\n\n  // open Team Member Modal\n  openInviteTeamMemberModalHandler = () => {\n    this.getRolesList()\n    this.setState({\n      memberDetailsModal: false,\n      inviteMemberDetailModal: true,\n    });\n  };\n\n  // Close Team Member Modal\n  closeInviteTeamMemberModalHandler = () => {\n    this.setState({\n      inviteMemberDetailModal: false,\n    });\n  };\n\n  openEditTeamMemberModalHandler = () => {\n    this.getRolesList()\n    this.setState({\n      memberDetailsModal: true,\n      inviteMemberDetailModal: false,\n    });\n  };\n\n  getTeamMemberbyId = (accountId: number): boolean => {\n    const headers = {\n      \"Content-Type\": configJSON.getAllMembersApiContentType,\n      token: window.localStorage.getItem(\"auth\"),\n    };\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n    this.getTeamMemberApiCallId = requestMessage.messageId;\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      `${configJSON.TeamMemberAPiEndPoint}/${accountId}`\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(headers)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.validationGetApiMethodType\n    );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n\n    return true;\n  };\n\n  updateTeamMemberbyId = ( values:any ): boolean => {\n      const headers = {\n      \"Content-Type\": configJSON.getAllMembersApiContentType,\n      token: window.localStorage.getItem(\"auth\"),\n    };\n    let role_id = []\n\n    for(let i=0;i<values?.rolesGroup.length;i++){\n      role_id.push(values?.rolesGroup[i].value)\n    }\n    console.log(\"crate\",role_id)\n\n    const attrs = {\n      fullname:values.firstName,\n      company_name: this.state.company_name,\n      address: this.state.address,\n      country: this.state.country,\n      teamMemberOkyd: this.state.teamMemberOkyd,\n      natureOfBussiness: this.state.natureOfBussiness,\n      clientTarget:this.state.clientTarget,\n      role_ids: role_id || [],\n      full_phone_number: values.phone\n    };\n\n    this.setState({\n      firstName: values.firstName,\n      email: values.email,\n      phone: values.phone,\n      designation: values.designation,\n      role_ids: values.rolesGroup,\n      rolesGroup: values.rolesGroup,\n    })\n\n      // const data = {\n      //   // type: \"email_account\",\n      //   user: attrs,\n      // };\n\n    const httpBody = {\n     user: attrs,\n    };\n\n    // console.log('httpBody',httpBody)\n\n   \n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n   \n    this.updateTeamMemberApiCallId = requestMessage.messageId;\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      `${configJSON.TeamMemberAPiEndPoint}/${this.state.currentId}`\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(headers)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestBodyMessage),\n      JSON.stringify(httpBody)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.validationUpdateApiMethodType\n    );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n    this.openInviteTeamMemberModalHandler()\n    return true;\n    \n  };\n\n  deleteTeamMemberbyId = (memberDetail: any): boolean => {\n    // const headers = {\n    //   \"Content-Type\": configJSON.getAllMembersApiContentType,\n    //   token: window.localStorage.getItem(\"auth\"),\n    // };\n\n    // const requestMessage = new Message(\n    //   getName(MessageEnum.RestAPIRequestMessage)\n    // );\n\n    // this.deleteTeamMemberApiCallId = requestMessage.messageId;\n\n    // requestMessage.addData(\n    //   getName(MessageEnum.RestAPIResponceEndPointMessage),\n    //   `${configJSON.TeamMemberAPiEndPoint}/${memberDetail.id}`\n    // );\n\n    // requestMessage.addData(\n    //   getName(MessageEnum.RestAPIRequestHeaderMessage),\n    //   JSON.stringify(headers)\n    // );\n\n    // requestMessage.addData(\n    //   getName(MessageEnum.RestAPIRequestMethodMessage),\n    //   configJSON.validationDeleteApiMethodType\n    // );\n\n    // runEngine.sendMessage(requestMessage.id, requestMessage);\n\n    return true;\n  };\n\n  handleInviteTeamMember = (values:any): boolean => {\n    const headers = {\n      \"Content-Type\": configJSON.getAllMembersApiContentType,\n      token: window.localStorage.getItem(\"auth\"),\n    };\n\n    const attrs = {\n      fullname: values.firstName,\n      email: values.email,\n      full_phone_number: values.phone,\n      designation: values.designation,\n      role_ids: values.rolesGroup\n    };\n    let role_id = []\n\n    for(let i=0;i<values?.rolesGroup.length;i++){\n      role_id.push(values?.rolesGroup[i].value)\n    }\n    console.log(\"crate\",role_id)\n    this.setState({\n      firstName: values.firstName,\n      email: values.email,\n      phone: values.phone,\n      designation: values.designation,\n      role_ids: role_id || [],\n    })\n\n    const data = {\n      type: \"email_account\",\n      attributes: attrs,\n    };\n\n    const httpBody = {\n      data: data,\n    };\n\n    // console.log('httpBody',httpBody)\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n    this.inviteTeamMemberApiCallId = requestMessage.messageId;\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.InviteTeamMemberAPiEndPoint\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(headers)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestBodyMessage),\n      JSON.stringify(httpBody)\n    );\n\n     requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.validationPostApiMethodType\n    );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n    this.openInviteTeamMemberModalHandler()\n    return true;\n  };\n\n  handleResentInviteTeamMember = (): boolean => {\n    const headers = {\n      \"Content-Type\": configJSON.getAllMembersApiContentType,\n      token: window.localStorage.getItem(\"auth\"),\n    };\n\n    const attrs = {\n      fullname: this.state.firstName,\n      email: this.state.email,\n      full_phone_number: this.state.phone,\n      designation: this.state.designation,\n    };\n\n    const data = {\n      type: \"email_account\",\n      attributes: attrs,\n    };\n\n    const httpBody = {\n      data: data,\n    };\n\n    // console.log('httpBody',httpBody)\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n    this.resendinviteTeamMemberApiCallId = requestMessage.messageId;\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.ResendInviteTeamMemberAPiEndPoint\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(headers)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestBodyMessage),\n      JSON.stringify(httpBody)\n    );\n\n     requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.validationPostApiMethodType\n    );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n// this.openInviteTeamMemberModalHandler()\n    return true;\n  };\n\n  handleEditTeamMember = (memberDetail: any): boolean => {\n    // console.log(\"idx\", memberDetail.role_ids);\n     this.getRolesList()\n    this.setState({\n      ...this.state,\n      currentId: memberDetail.id,\n      firstName: memberDetail?.attributes?.fullname,\n      designation:  memberDetail?.attributes?.designation,\n      phone: memberDetail?.attributes?.full_phone_number,\n      email: memberDetail?.attributes?.email,\n      rolesGroup: memberDetail?.attributes?.roles,\n      company_name: memberDetail?.attributes?.company_name,\n      address: memberDetail?.attributes?.address,\n      country: memberDetail?.attributes?.country,\n      teamMemberOkyd: memberDetail?.attributes?.teamMemberOkyd,\n      natureOfBussiness: memberDetail?.attributes?.natureOfBussiness,\n      clientTarget:memberDetail?.attributes?.clientTarget,\n      role_ids: memberDetail?.attributes?.roles,\n      memberDetailsModal: true\n    });\n    return true;\n  };\n\n}\n"]},"metadata":{},"sourceType":"module"}