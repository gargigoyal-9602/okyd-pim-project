{"ast":null,"code":"import _regeneratorRuntime from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nimport MessageEnum, { getName } from \"../../../framework/src/Messages/MessageEnum\";\nimport * as Yup from \"yup\"; // Customizable Area Start\n\nimport { imgPasswordInVisible, imgPasswordVisible } from \"./assets\"; // Customizable Area End\n\nexport const configJSON = require(\"./config\");\nexport default class EmailAccountRegistrationController extends BlockComponent {\n  // Customizable Area Start\n  // Customizable Area End\n  constructor(props) {\n    super(props);\n    this.arrayholder = void 0;\n    this.passwordReg = void 0;\n    this.emailReg = void 0;\n    this.stringReg = void 0;\n    this.phoneReg = void 0;\n    this.numberReg = void 0;\n    this.createAccountApiCallId = void 0;\n    this.createNewAccountApiCallId = void 0;\n    this.validationApiCallId = \"\";\n    this.domainAvailabilityApiCallId = \"\";\n    this.imgPasswordVisible = void 0;\n    this.imgPasswordInVisible = void 0;\n    this.labelHeader = void 0;\n    this.labelFirstName = void 0;\n    this.lastName = void 0;\n    this.labelEmail = void 0;\n    this.labelPassword = void 0;\n    this.labelRePassword = void 0;\n    this.labelLegalText = void 0;\n    this.labelLegalTermCondition = void 0;\n    this.labelLegalPrivacyPolicy = void 0;\n    this.btnTextSignUp = void 0;\n\n    this.createAccount = values => {\n      const header = {\n        \"Content-Type\": configJSON.contentTypeApiAddDetail\n      };\n      const attrs = {\n        email: values.email,\n        company_name: values.companyName,\n        domain: \"\".concat(values.domainName, \".okyd.com\"),\n        fullname: values.fullName,\n        full_phone_number: values.phoneNumber,\n        address: values.address,\n        country: values.country.name,\n        teamMemberOkyd: values.teamMemberOkyd.name,\n        natureOfBussiness: values.natureOfBussiness.name,\n        clientTarget: values.clientTarget.name,\n        user_type: values.user_type || localStorage.getItem('user_type') || this.state.userType,\n        activated: this.state.activated || true\n      };\n      const data = {\n        type: \"email_account\",\n        attributes: attrs\n      };\n      const httpBody = {\n        data: data //   token: this.state.otpAuthToken,\n\n      };\n      console.log('httpBody', httpBody);\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      this.createNewAccountApiCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.accountsAPiEndPoint);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(header));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(httpBody));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiMethodTypeAddDetail);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    };\n\n    this.domainAvailability = () => {\n      const header = {\n        \"Content-Type\": configJSON.contentTypeApiAddDetail\n      };\n      console.log(this.state.domainName);\n      const attrs = {\n        domainName: this.state.domainName\n      };\n      const data = {\n        attributes: attrs\n      };\n      const httpBody = {\n        data: data\n      }; //console.log(\"httpBody\", httpBody);\n\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage)); //console.log(\"requestMessage\", requestMessage);\n\n      this.domainAvailabilityApiCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.endPointApiDomainAvailability);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(header));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(httpBody));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiMethodTypeAddDetail);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    };\n\n    this.btnLegalPrivacyPolicyProps = {\n      onClick: () => this.goToPrivacyPolicy()\n    };\n    this.btnLegalTermsAndConditionProps = {\n      onClick: () => this.goToTermsAndCondition()\n    };\n    this.txtInputEmailWebPrpos = {\n      onChange: text => {\n        this.setState({\n          errorEmail: \"\",\n          email: text.target.value\n        }); //@ts-ignore\n\n        this.txtInputEmailPrpos.value = text.target.value;\n      }\n    };\n    this.txtInputEmailMobilePrpos = _objectSpread(_objectSpread({}, this.txtInputEmailWebPrpos), {}, {\n      keyboardType: \"email-address\"\n    });\n    this.txtInputEmailPrpos = this.isPlatformWeb() ? this.txtInputEmailWebPrpos : this.txtInputEmailMobilePrpos;\n    this.txtInputCompanyNameWebPrpos = {\n      onChange: text => {\n        this.setState({\n          errorCompanyName: \"\",\n          companyName: text.target.value\n        }); //@ts-ignore\n      }\n    };\n    this.txtInputDomainNameWebPrpos = {\n      onChange: text => {\n        this.setState({\n          errorDomainName: \"\",\n          domainName: text.target.value\n        }); //@ts-ignore\n      }\n    };\n    this.txtInputFullNameWebPrpos = {\n      onChange: text => {\n        this.setState({\n          errorFullName: \"\",\n          fullName: text.target.value\n        }); //@ts-ignore\n      }\n    };\n    this.txtInputPhoneNumberWebPrpos = {\n      onChange: text => {\n        //@ts-ignore\n        this.setState({\n          errorPhnNumber: \"\",\n          phoneNumber: text === null || text === void 0 ? void 0 : text.target.value\n        });\n      }\n    };\n    this.txtInputAddressWebPrpos = {\n      onChange: text => {\n        this.setState({\n          errorAddress: \"\",\n          address: text.target.value\n        }); //@ts-ignore\n      }\n    };\n    this.txtInputCountryWebPrpos = {\n      onChange: text => {\n        this.setState({\n          country: text.target.value\n        }); //@ts-ignore\n      }\n    };\n    this.txtInputTeamOkydWebPrpos = {\n      onChange: text => {\n        this.setState({\n          teamMemberOkyd: text.target.value\n        }); //@ts-ignore\n      }\n    };\n    this.txtInputNatureofBussinessWebPrpos = {\n      onChange: text => {\n        this.setState({\n          natureOfBussiness: text.target.value\n        }); //@ts-ignore\n      }\n    };\n    this.txtInputTargetClientWebPrpos = {\n      onChange: text => {\n        this.setState({\n          clientTarget: text.target.value\n        }); //@ts-ignore\n      }\n    };\n\n    this.handleDomainChange = e => {\n      //e.preventDefault()\n      this.setState({\n        changedDomain: e.target.value\n      });\n      console.log(this.state.changedDomain);\n    };\n\n    this.openSnackBarHandler = (type, message) => {\n      console.log(\"type,message\", type, message);\n      this.setState({\n        snackBar: {\n          show: true,\n          message: message,\n          type\n        }\n      });\n    };\n\n    this.closeSnackBarHandler = () => {\n      this.setState({\n        snackBar: {\n          show: false,\n          message: this.state.snackBar.message,\n          type: this.state.snackBar.type\n        }\n      });\n    };\n\n    this.subScribedMessages = [getName(MessageEnum.RestAPIResponceMessage), getName(MessageEnum.NavigationPayLoadMessage), getName(MessageEnum.CountryCodeMessage)];\n    this.receive = this.receive.bind(this);\n    this.isStringNullOrBlank = this.isStringNullOrBlank.bind(this);\n    runEngine.attachBuildingBlock(this, this.subScribedMessages);\n    this.arrayholder = [];\n    this.passwordReg = new RegExp(\"\\\\w+\");\n    this.emailReg = new RegExp(\"\\\\w+\");\n    this.stringReg = new RegExp(/^([\\w]{3,})+\\s+([\\w\\s]{3,})+$/i);\n    this.phoneReg = new RegExp(/^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/);\n    this.numberReg = new RegExp(/^[0-9]*$/);\n    let NewAccSchema = {\n      email: Yup.string().email(configJSON.errorEmailNotValid).required(configJSON.errorEmailRequired),\n      companyName: Yup.string().required(configJSON.errorCompanyNameEmpty),\n      domainName: Yup.string().required(configJSON.errorDomainRequire),\n      fullName: Yup.string().matches(configJSON.fullNamePattern, configJSON.errorStingOnly).required(configJSON.errorFullNameEmpty),\n      phoneNumber: Yup.string().matches(this.phoneReg, configJSON.errorPhoneNumberNotValid).min(5, configJSON.errorPhoneNumberMin).max(10, configJSON.errorPhoneNumberMax).required(configJSON.errorPhoneNumberReqired),\n      address: Yup.string().min(20, configJSON.errorAddressMin).max(250, configJSON.errorAddressMax).required(configJSON.errorAddressEmpty),\n      country: Yup.string().nullable(),\n      teamMemberOkyd: Yup.string().nullable(),\n      natureOfBussiness: Yup.string().nullable(),\n      clientTarget: Yup.string().nullable()\n    };\n    this.state = {\n      // Customizable Area Start\n      email: \"\",\n      companyName: \"\",\n      domainName: \"\",\n      fullName: \"\",\n      phoneNumber: \"\",\n      address: \"\",\n      country: \"\",\n      teamMemberOkyd: \"\",\n      natureOfBussiness: \"\",\n      clientTarget: \"\",\n      userType: \"subscriber\",\n      activated: true,\n      errorMandatory: \"\",\n      errorEmail: \"\",\n      errorCompanyName: \"\",\n      errorDomainName: \"\",\n      errorFullName: \"\",\n      errorPhnNumber: \"\",\n      errorAddress: \"\",\n      errorCountry: \"\",\n      NewAccSchema: NewAccSchema,\n      snackBar: {\n        show: false\n      },\n      changedDomain: \"\" // Customizable Area End\n\n    }; // Customizable Area Start\n\n    this.imgPasswordVisible = imgPasswordVisible;\n    this.imgPasswordInVisible = imgPasswordInVisible;\n    this.labelHeader = configJSON.labelHeader;\n    this.labelFirstName = configJSON.labelFirstName;\n    this.lastName = configJSON.lastName;\n    this.labelEmail = configJSON.labelEmail;\n    this.labelPassword = configJSON.labelPassword;\n    this.labelRePassword = configJSON.labelRePassword;\n    this.labelLegalText = configJSON.labelLegalText;\n    this.labelLegalTermCondition = configJSON.labelLegalTermCondition;\n    this.labelLegalPrivacyPolicy = configJSON.labelLegalPrivacyPolicy;\n    this.btnTextSignUp = configJSON.btnTextSignUp; // Customizable Area End\n  }\n\n  receive(from, message) {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var responseJson, errorReponse, apiRequestCallId, errors, _this$props;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            // Customizable Area Start\n            if (getName(MessageEnum.RestAPIResponceMessage) === message.id) {\n              responseJson = message.getData(getName(MessageEnum.RestAPIResponceSuccessMessage));\n              errorReponse = message.getData(getName(MessageEnum.RestAPIResponceErrorMessage));\n              apiRequestCallId = message.getData(getName(MessageEnum.RestAPIResponceDataMessage));\n\n              if (responseJson && !responseJson.errors) {\n                if (apiRequestCallId != null) {\n                  console.log(\"responseJson\", responseJson); // \n\n                  if (apiRequestCallId === _this.createNewAccountApiCallId && responseJson !== undefined) {\n                    _this.openSnackBarHandler('success', configJSON.successCreateAccount);\n\n                    setTimeout(() => {\n                      //@ts-ignore\n                      localStorage.setItem(\"email\", responseJson.data.attributes.email);\n                      localStorage.setItem(\"auth\", responseJson.meta.token);\n                      localStorage.setItem(\"fullname\", responseJson.data.attributes.fullname); // @ts-ignore\n\n                      _this.props.history.push(\"email-send-successfully\");\n                    }, 1000);\n                  }\n\n                  if (apiRequestCallId === _this.domainAvailabilityApiCallId && responseJson !== undefined) {\n                    console.log(responseJson, \"updated response\");\n                    console.log('hi here is your domain');\n\n                    _this.openSnackBarHandler('success', \"Domain is available \");\n                  }\n                }\n              } else {\n                errors = responseJson.errors;\n\n                _this.parseApiCatchErrorResponse(errorReponse);\n\n                if (errors[0].token === 'Invalid token' || errors[0].token === 'Token has Expired') {\n                  localStorage.setItem(\"auth\", \"\"); //@ts-ignore\n\n                  (_this$props = _this.props) === null || _this$props === void 0 ? void 0 : _this$props.history.push(\"/login\");\n                } else if (errors[0].message) {\n                  _this.openSnackBarHandler('error', errors[0].message);\n                } else if (errors[0].account) {\n                  _this.openSnackBarHandler('error', errors[0].account);\n                }\n              }\n            } // Customizable Area End\n\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  } // Customizable Area Start\n\n\n  goToPrivacyPolicy() {\n    const msg = new Message(getName(MessageEnum.NavigationPrivacyPolicyMessage));\n    msg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n    this.send(msg);\n  }\n\n  goToTermsAndCondition() {\n    const msg = new Message(getName(MessageEnum.NavigationTermAndConditionMessage));\n    msg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n    this.send(msg);\n  }\n\n  isStringNullOrBlank(str) {\n    return str === null || str.length === 0;\n  }\n\n  isValidEmail(email) {\n    return this.emailReg.test(email);\n  }\n\n  getValidations() {\n    const headers = {\n      \"Content-Type\": configJSON.validationApiContentType\n    };\n    const getValidationsMsg = new Message(getName(MessageEnum.RestAPIRequestMessage));\n    this.validationApiCallId = getValidationsMsg.messageId;\n    getValidationsMsg.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.urlGetValidations);\n    getValidationsMsg.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n    getValidationsMsg.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.validationApiMethodType);\n    runEngine.sendMessage(getValidationsMsg.id, getValidationsMsg);\n  } //// handle domain name availability\n\n\n  isNonNullAndEmpty(value) {\n    return value !== undefined && value !== null && value !== \"null\" && value.trim().length > 0;\n  }\n\n  validateCountryCodeAndPhoneNumber(countryCode, phoneNumber) {\n    let error = null;\n\n    if (this.isNonNullAndEmpty(phoneNumber)) {\n      if (!this.isNonNullAndEmpty(String(countryCode))) {\n        error = configJSON.errorCountryCodeNotSelected;\n      }\n    } else if (this.isNonNullAndEmpty(countryCode)) {\n      if (!this.isNonNullAndEmpty(phoneNumber)) {\n        error = \"Phone \" + configJSON.errorBlankField;\n      }\n    }\n\n    return error;\n  } // Customizable Area End\n\n\n}","map":{"version":3,"sources":["/home/lp-greenapex/gargi/okydpim-36944-react-native/src/packages/blocks/email-account-registration/src/EmailAccountRegistrationController.web.tsx"],"names":["Message","BlockComponent","runEngine","MessageEnum","getName","Yup","imgPasswordInVisible","imgPasswordVisible","configJSON","require","EmailAccountRegistrationController","constructor","props","arrayholder","passwordReg","emailReg","stringReg","phoneReg","numberReg","createAccountApiCallId","createNewAccountApiCallId","validationApiCallId","domainAvailabilityApiCallId","labelHeader","labelFirstName","lastName","labelEmail","labelPassword","labelRePassword","labelLegalText","labelLegalTermCondition","labelLegalPrivacyPolicy","btnTextSignUp","createAccount","values","header","contentTypeApiAddDetail","attrs","email","company_name","companyName","domain","domainName","fullname","fullName","full_phone_number","phoneNumber","address","country","name","teamMemberOkyd","natureOfBussiness","clientTarget","user_type","localStorage","getItem","state","userType","activated","data","type","attributes","httpBody","console","log","requestMessage","RestAPIRequestMessage","messageId","addData","RestAPIResponceEndPointMessage","accountsAPiEndPoint","RestAPIRequestHeaderMessage","JSON","stringify","RestAPIRequestBodyMessage","RestAPIRequestMethodMessage","apiMethodTypeAddDetail","sendMessage","id","domainAvailability","endPointApiDomainAvailability","btnLegalPrivacyPolicyProps","onClick","goToPrivacyPolicy","btnLegalTermsAndConditionProps","goToTermsAndCondition","txtInputEmailWebPrpos","onChange","text","setState","errorEmail","target","value","txtInputEmailPrpos","txtInputEmailMobilePrpos","keyboardType","isPlatformWeb","txtInputCompanyNameWebPrpos","errorCompanyName","txtInputDomainNameWebPrpos","errorDomainName","txtInputFullNameWebPrpos","errorFullName","txtInputPhoneNumberWebPrpos","errorPhnNumber","txtInputAddressWebPrpos","errorAddress","txtInputCountryWebPrpos","txtInputTeamOkydWebPrpos","txtInputNatureofBussinessWebPrpos","txtInputTargetClientWebPrpos","handleDomainChange","e","changedDomain","openSnackBarHandler","message","snackBar","show","closeSnackBarHandler","subScribedMessages","RestAPIResponceMessage","NavigationPayLoadMessage","CountryCodeMessage","receive","bind","isStringNullOrBlank","attachBuildingBlock","RegExp","NewAccSchema","string","errorEmailNotValid","required","errorEmailRequired","errorCompanyNameEmpty","errorDomainRequire","matches","fullNamePattern","errorStingOnly","errorFullNameEmpty","errorPhoneNumberNotValid","min","errorPhoneNumberMin","max","errorPhoneNumberMax","errorPhoneNumberReqired","errorAddressMin","errorAddressMax","errorAddressEmpty","nullable","errorMandatory","errorCountry","from","responseJson","getData","RestAPIResponceSuccessMessage","errorReponse","RestAPIResponceErrorMessage","apiRequestCallId","RestAPIResponceDataMessage","errors","undefined","successCreateAccount","setTimeout","setItem","meta","token","history","push","parseApiCatchErrorResponse","account","msg","NavigationPrivacyPolicyMessage","NavigationPropsMessage","send","NavigationTermAndConditionMessage","str","length","isValidEmail","test","getValidations","headers","validationApiContentType","getValidationsMsg","urlGetValidations","validationApiMethodType","isNonNullAndEmpty","trim","validateCountryCodeAndPhoneNumber","countryCode","error","String","errorCountryCodeNotSelected","errorBlankField"],"mappings":";;;AACA,SAASA,OAAT,QAAwB,gCAAxB;AACA,SAASC,cAAT,QAA+B,uCAA/B;AACA,SAASC,SAAT,QAA0B,kCAA1B;AACA,OAAOC,WAAP,IACEC,OADF,QAEO,6CAFP;AAIA,OAAO,KAAKC,GAAZ,MAAqB,KAArB,C,CAEA;;AACA,SAASC,oBAAT,EAA+BC,kBAA/B,QAAyD,UAAzD,C,CACA;;AAEA,OAAO,MAAMC,UAAU,GAAGC,OAAO,CAAC,UAAD,CAA1B;AA8CP,eAAe,MAAMC,kCAAN,SAAiDT,cAAjD,CAIX;AACF;AA2BA;AAEAU,EAAAA,WAAW,CAACC,KAAD,EAAe;AACxB,UAAMA,KAAN;AADwB,SA5B1BC,WA4B0B;AAAA,SA3B1BC,WA2B0B;AAAA,SA1B1BC,QA0B0B;AAAA,SAzB1BC,SAyB0B;AAAA,SAxB1BC,QAwB0B;AAAA,SAvB1BC,SAuB0B;AAAA,SAtB1BC,sBAsB0B;AAAA,SArB1BC,yBAqB0B;AAAA,SAnB1BC,mBAmB0B,GAnBI,EAmBJ;AAAA,SAlB1BC,2BAkB0B,GAlBY,EAkBZ;AAAA,SAjB1Bf,kBAiB0B;AAAA,SAhB1BD,oBAgB0B;AAAA,SAd1BiB,WAc0B;AAAA,SAb1BC,cAa0B;AAAA,SAZ1BC,QAY0B;AAAA,SAX1BC,UAW0B;AAAA,SAV1BC,aAU0B;AAAA,SAT1BC,eAS0B;AAAA,SAR1BC,cAQ0B;AAAA,SAP1BC,uBAO0B;AAAA,SAN1BC,uBAM0B;AAAA,SAL1BC,aAK0B;;AAAA,SA+K1BC,aA/K0B,GA+KTC,MAAD,IAA0B;AACxC,YAAMC,MAAM,GAAG;AACb,wBAAgB3B,UAAU,CAAC4B;AADd,OAAf;AAIA,YAAMC,KAAK,GAAG;AACZC,QAAAA,KAAK,EAAEJ,MAAM,CAACI,KADF;AAEZC,QAAAA,YAAY,EAAEL,MAAM,CAACM,WAFT;AAGZC,QAAAA,MAAM,YAAKP,MAAM,CAACQ,UAAZ,cAHM;AAIZC,QAAAA,QAAQ,EAAET,MAAM,CAACU,QAJL;AAKZC,QAAAA,iBAAiB,EAAEX,MAAM,CAACY,WALd;AAMZC,QAAAA,OAAO,EAAEb,MAAM,CAACa,OANJ;AAOZC,QAAAA,OAAO,EAAEd,MAAM,CAACc,OAAP,CAAeC,IAPZ;AAQZC,QAAAA,cAAc,EAAEhB,MAAM,CAACgB,cAAP,CAAsBD,IAR1B;AASZE,QAAAA,iBAAiB,EAAEjB,MAAM,CAACiB,iBAAP,CAAyBF,IAThC;AAUZG,QAAAA,YAAY,EAAElB,MAAM,CAACkB,YAAP,CAAoBH,IAVtB;AAWZI,QAAAA,SAAS,EAAEnB,MAAM,CAACmB,SAAP,IAAoBC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAApB,IAAyD,KAAKC,KAAL,CAAWC,QAXnE;AAYZC,QAAAA,SAAS,EAAE,KAAKF,KAAL,CAAWE,SAAX,IAAwB;AAZvB,OAAd;AAeA,YAAMC,IAAI,GAAG;AACXC,QAAAA,IAAI,EAAE,eADK;AAEXC,QAAAA,UAAU,EAAExB;AAFD,OAAb;AAKA,YAAMyB,QAAQ,GAAG;AACfH,QAAAA,IAAI,EAAEA,IADS,CAEf;;AAFe,OAAjB;AAKAI,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,QAAxB;AAEA,YAAMG,cAAc,GAAG,IAAIjE,OAAJ,CACrBI,OAAO,CAACD,WAAW,CAAC+D,qBAAb,CADc,CAAvB;AAIA,WAAK9C,yBAAL,GAAiC6C,cAAc,CAACE,SAAhD;AACAF,MAAAA,cAAc,CAACG,OAAf,CACEhE,OAAO,CAACD,WAAW,CAACkE,8BAAb,CADT,EAEE7D,UAAU,CAAC8D,mBAFb;AAKAL,MAAAA,cAAc,CAACG,OAAf,CACEhE,OAAO,CAACD,WAAW,CAACoE,2BAAb,CADT,EAEEC,IAAI,CAACC,SAAL,CAAetC,MAAf,CAFF;AAKA8B,MAAAA,cAAc,CAACG,OAAf,CACEhE,OAAO,CAACD,WAAW,CAACuE,yBAAb,CADT,EAEEF,IAAI,CAACC,SAAL,CAAeX,QAAf,CAFF;AAKAG,MAAAA,cAAc,CAACG,OAAf,CACEhE,OAAO,CAACD,WAAW,CAACwE,2BAAb,CADT,EAEEnE,UAAU,CAACoE,sBAFb;AAKA1E,MAAAA,SAAS,CAAC2E,WAAV,CAAsBZ,cAAc,CAACa,EAArC,EAAyCb,cAAzC;AACA,aAAO,IAAP;AACD,KA1OyB;;AAAA,SAyQ1Bc,kBAzQ0B,GAyQL,MAAe;AAClC,YAAM5C,MAAM,GAAG;AACb,wBAAgB3B,UAAU,CAAC4B;AADd,OAAf;AAIA2B,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKR,KAAL,CAAWd,UAAvB;AAEA,YAAML,KAAK,GAAG;AACZK,QAAAA,UAAU,EAAE,KAAKc,KAAL,CAAWd;AADX,OAAd;AAIA,YAAMiB,IAAI,GAAG;AACXE,QAAAA,UAAU,EAAExB;AADD,OAAb;AAIA,YAAMyB,QAAQ,GAAG;AACfH,QAAAA,IAAI,EAAEA;AADS,OAAjB,CAfkC,CAmBlC;;AAEA,YAAMM,cAAc,GAAG,IAAIjE,OAAJ,CACrBI,OAAO,CAACD,WAAW,CAAC+D,qBAAb,CADc,CAAvB,CArBkC,CAyBlC;;AACA,WAAK5C,2BAAL,GAAmC2C,cAAc,CAACE,SAAlD;AACAF,MAAAA,cAAc,CAACG,OAAf,CACEhE,OAAO,CAACD,WAAW,CAACkE,8BAAb,CADT,EAEE7D,UAAU,CAACwE,6BAFb;AAKAf,MAAAA,cAAc,CAACG,OAAf,CACEhE,OAAO,CAACD,WAAW,CAACoE,2BAAb,CADT,EAEEC,IAAI,CAACC,SAAL,CAAetC,MAAf,CAFF;AAKA8B,MAAAA,cAAc,CAACG,OAAf,CACEhE,OAAO,CAACD,WAAW,CAACuE,yBAAb,CADT,EAEEF,IAAI,CAACC,SAAL,CAAeX,QAAf,CAFF;AAKAG,MAAAA,cAAc,CAACG,OAAf,CACEhE,OAAO,CAACD,WAAW,CAACwE,2BAAb,CADT,EAEEnE,UAAU,CAACoE,sBAFb;AAKA1E,MAAAA,SAAS,CAAC2E,WAAV,CAAsBZ,cAAc,CAACa,EAArC,EAAyCb,cAAzC;AAEA,aAAO,IAAP;AACD,KA3TyB;;AAAA,SAwV1BgB,0BAxV0B,GAwVG;AAC3BC,MAAAA,OAAO,EAAE,MAAM,KAAKC,iBAAL;AADY,KAxVH;AAAA,SA4V1BC,8BA5V0B,GA4VO;AAC/BF,MAAAA,OAAO,EAAE,MAAM,KAAKG,qBAAL;AADgB,KA5VP;AAAA,SAgW1BC,qBAhW0B,GAgWF;AACtBC,MAAAA,QAAQ,EAAGC,IAAD,IAAe;AACvB,aAAKC,QAAL,CAAc;AACZC,UAAAA,UAAU,EAAE,EADA;AAEZpD,UAAAA,KAAK,EAAEkD,IAAI,CAACG,MAAL,CAAYC;AAFP,SAAd,EADuB,CAKvB;;AACA,aAAKC,kBAAL,CAAwBD,KAAxB,GAAgCJ,IAAI,CAACG,MAAL,CAAYC,KAA5C;AACD;AARqB,KAhWE;AAAA,SA2W1BE,wBA3W0B,mCA4WrB,KAAKR,qBA5WgB;AA6WxBS,MAAAA,YAAY,EAAE;AA7WU;AAAA,SAgX1BF,kBAhX0B,GAgXL,KAAKG,aAAL,KACjB,KAAKV,qBADY,GAEjB,KAAKQ,wBAlXiB;AAAA,SAoX1BG,2BApX0B,GAoXI;AAC5BV,MAAAA,QAAQ,EAAGC,IAAD,IAAe;AACvB,aAAKC,QAAL,CAAc;AACZS,UAAAA,gBAAgB,EAAE,EADN;AAEZ1D,UAAAA,WAAW,EAAEgD,IAAI,CAACG,MAAL,CAAYC;AAFb,SAAd,EADuB,CAKvB;AACD;AAP2B,KApXJ;AAAA,SA8X1BO,0BA9X0B,GA8XG;AAC3BZ,MAAAA,QAAQ,EAAGC,IAAD,IAAe;AACvB,aAAKC,QAAL,CAAc;AACZW,UAAAA,eAAe,EAAE,EADL;AAEZ1D,UAAAA,UAAU,EAAE8C,IAAI,CAACG,MAAL,CAAYC;AAFZ,SAAd,EADuB,CAKvB;AACD;AAP0B,KA9XH;AAAA,SAwY1BS,wBAxY0B,GAwYC;AACzBd,MAAAA,QAAQ,EAAGC,IAAD,IAAe;AACvB,aAAKC,QAAL,CAAc;AACZa,UAAAA,aAAa,EAAE,EADH;AAEZ1D,UAAAA,QAAQ,EAAE4C,IAAI,CAACG,MAAL,CAAYC;AAFV,SAAd,EADuB,CAKvB;AACD;AAPwB,KAxYD;AAAA,SAkZ1BW,2BAlZ0B,GAkZI;AAC5BhB,MAAAA,QAAQ,EAAGC,IAAD,IAAkB;AAC1B;AACA,aAAKC,QAAL,CAAc;AAAEe,UAAAA,cAAc,EAAE,EAAlB;AAAsB1D,UAAAA,WAAW,EAAE0C,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEG,MAAN,CAAaC;AAAhD,SAAd;AACD;AAJ2B,KAlZJ;AAAA,SAyZ1Ba,uBAzZ0B,GAyZA;AACxBlB,MAAAA,QAAQ,EAAGC,IAAD,IAAe;AACvB,aAAKC,QAAL,CAAc;AAAEiB,UAAAA,YAAY,EAAE,EAAhB;AAAoB3D,UAAAA,OAAO,EAAEyC,IAAI,CAACG,MAAL,CAAYC;AAAzC,SAAd,EADuB,CAEvB;AACD;AAJuB,KAzZA;AAAA,SAga1Be,uBAha0B,GAgaA;AACxBpB,MAAAA,QAAQ,EAAGC,IAAD,IAAe;AACvB,aAAKC,QAAL,CAAc;AAAEzC,UAAAA,OAAO,EAAEwC,IAAI,CAACG,MAAL,CAAYC;AAAvB,SAAd,EADuB,CAEvB;AACD;AAJuB,KAhaA;AAAA,SAua1BgB,wBAva0B,GAuaC;AACzBrB,MAAAA,QAAQ,EAAGC,IAAD,IAAe;AACvB,aAAKC,QAAL,CAAc;AAAEvC,UAAAA,cAAc,EAAEsC,IAAI,CAACG,MAAL,CAAYC;AAA9B,SAAd,EADuB,CAEvB;AACD;AAJwB,KAvaD;AAAA,SA8a1BiB,iCA9a0B,GA8aU;AAClCtB,MAAAA,QAAQ,EAAGC,IAAD,IAAe;AACvB,aAAKC,QAAL,CAAc;AAAEtC,UAAAA,iBAAiB,EAAEqC,IAAI,CAACG,MAAL,CAAYC;AAAjC,SAAd,EADuB,CAEvB;AACD;AAJiC,KA9aV;AAAA,SAqb1BkB,4BArb0B,GAqbK;AAC7BvB,MAAAA,QAAQ,EAAGC,IAAD,IAAe;AACvB,aAAKC,QAAL,CAAc;AAAErC,UAAAA,YAAY,EAAEoC,IAAI,CAACG,MAAL,CAAYC;AAA5B,SAAd,EADuB,CAEvB;AACD;AAJ4B,KArbL;;AAAA,SA6b1BmB,kBA7b0B,GA6bJC,CAAD,IAAY;AAC/B;AACA,WAAKvB,QAAL,CAAc;AACZwB,QAAAA,aAAa,EAAED,CAAC,CAACrB,MAAF,CAASC;AADZ,OAAd;AAIA7B,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKR,KAAL,CAAWyD,aAAvB;AACD,KApcyB;;AAAA,SAuc1BC,mBAvc0B,GAucJ,CAACtD,IAAD,EAA6DuD,OAA7D,KAAuF;AAC3GpD,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BJ,IAA5B,EAAkCuD,OAAlC;AACA,WAAK1B,QAAL,CAAc;AACZ2B,QAAAA,QAAQ,EAAE;AACRC,UAAAA,IAAI,EAAE,IADE;AAERF,UAAAA,OAAO,EAAEA,OAFD;AAGRvD,UAAAA;AAHQ;AADE,OAAd;AAOD,KAhdyB;;AAAA,SAmd1B0D,oBAnd0B,GAmdH,MAAM;AAC3B,WAAK7B,QAAL,CAAc;AACZ2B,QAAAA,QAAQ,EAAE;AACRC,UAAAA,IAAI,EAAE,KADE;AAERF,UAAAA,OAAO,EAAE,KAAK3D,KAAL,CAAW4D,QAAX,CAAoBD,OAFrB;AAGRvD,UAAAA,IAAI,EAAE,KAAKJ,KAAL,CAAW4D,QAAX,CAAoBxD;AAHlB;AADE,OAAd;AAOD,KA3dyB;;AAExB,SAAK2D,kBAAL,GAA0B,CACxBnH,OAAO,CAACD,WAAW,CAACqH,sBAAb,CADiB,EAExBpH,OAAO,CAACD,WAAW,CAACsH,wBAAb,CAFiB,EAGxBrH,OAAO,CAACD,WAAW,CAACuH,kBAAb,CAHiB,CAA1B;AAKA,SAAKC,OAAL,GAAe,KAAKA,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAf;AACA,SAAKC,mBAAL,GAA2B,KAAKA,mBAAL,CAAyBD,IAAzB,CAA8B,IAA9B,CAA3B;AAEA1H,IAAAA,SAAS,CAAC4H,mBAAV,CAA8B,IAA9B,EAAoC,KAAKP,kBAAzC;AAEA,SAAK1G,WAAL,GAAmB,EAAnB;AACA,SAAKC,WAAL,GAAmB,IAAIiH,MAAJ,CAAW,MAAX,CAAnB;AACA,SAAKhH,QAAL,GAAgB,IAAIgH,MAAJ,CAAW,MAAX,CAAhB;AACA,SAAK/G,SAAL,GAAiB,IAAI+G,MAAJ,CAAW,gCAAX,CAAjB;AACA,SAAK9G,QAAL,GAAgB,IAAI8G,MAAJ,CAAW,yGAAX,CAAhB;AACA,SAAK7G,SAAL,GAAiB,IAAI6G,MAAJ,CAAW,UAAX,CAAjB;AAGA,QAAIC,YAAY,GAAG;AACjB1F,MAAAA,KAAK,EAAEjC,GAAG,CAAC4H,MAAJ,GACJ3F,KADI,CACE9B,UAAU,CAAC0H,kBADb,EAEJC,QAFI,CAEK3H,UAAU,CAAC4H,kBAFhB,CADU;AAIjB5F,MAAAA,WAAW,EAAEnC,GAAG,CAAC4H,MAAJ,GAAaE,QAAb,CAAsB3H,UAAU,CAAC6H,qBAAjC,CAJI;AAKjB3F,MAAAA,UAAU,EAAErC,GAAG,CAAC4H,MAAJ,GAAaE,QAAb,CAAsB3H,UAAU,CAAC8H,kBAAjC,CALK;AAMjB1F,MAAAA,QAAQ,EAAEvC,GAAG,CAAC4H,MAAJ,GACPM,OADO,CACC/H,UAAU,CAACgI,eADZ,EAC6BhI,UAAU,CAACiI,cADxC,EAEPN,QAFO,CAEE3H,UAAU,CAACkI,kBAFb,CANO;AASjB5F,MAAAA,WAAW,EAAEzC,GAAG,CAAC4H,MAAJ,GACVM,OADU,CACF,KAAKtH,QADH,EACaT,UAAU,CAACmI,wBADxB,EAEVC,GAFU,CAEN,CAFM,EAEHpI,UAAU,CAACqI,mBAFR,EAGVC,GAHU,CAGN,EAHM,EAGFtI,UAAU,CAACuI,mBAHT,EAIVZ,QAJU,CAID3H,UAAU,CAACwI,uBAJV,CATI;AAcjBjG,MAAAA,OAAO,EAAE1C,GAAG,CAAC4H,MAAJ,GACNW,GADM,CACF,EADE,EACEpI,UAAU,CAACyI,eADb,EAENH,GAFM,CAEF,GAFE,EAEGtI,UAAU,CAAC0I,eAFd,EAGNf,QAHM,CAGG3H,UAAU,CAAC2I,iBAHd,CAdQ;AAkBjBnG,MAAAA,OAAO,EAAE3C,GAAG,CAAC4H,MAAJ,GAAamB,QAAb,EAlBQ;AAmBjBlG,MAAAA,cAAc,EAAE7C,GAAG,CAAC4H,MAAJ,GAAamB,QAAb,EAnBC;AAoBjBjG,MAAAA,iBAAiB,EAAE9C,GAAG,CAAC4H,MAAJ,GAAamB,QAAb,EApBF;AAqBjBhG,MAAAA,YAAY,EAAE/C,GAAG,CAAC4H,MAAJ,GAAamB,QAAb;AArBG,KAAnB;AAyBA,SAAK5F,KAAL,GAAa;AACX;AACAlB,MAAAA,KAAK,EAAE,EAFI;AAGXE,MAAAA,WAAW,EAAE,EAHF;AAIXE,MAAAA,UAAU,EAAE,EAJD;AAKXE,MAAAA,QAAQ,EAAE,EALC;AAMXE,MAAAA,WAAW,EAAE,EANF;AAOXC,MAAAA,OAAO,EAAE,EAPE;AAQXC,MAAAA,OAAO,EAAE,EARE;AASXE,MAAAA,cAAc,EAAE,EATL;AAUXC,MAAAA,iBAAiB,EAAE,EAVR;AAWXC,MAAAA,YAAY,EAAE,EAXH;AAYXK,MAAAA,QAAQ,EAAE,YAZC;AAaXC,MAAAA,SAAS,EAAE,IAbA;AAcX2F,MAAAA,cAAc,EAAE,EAdL;AAeX3D,MAAAA,UAAU,EAAE,EAfD;AAgBXQ,MAAAA,gBAAgB,EAAE,EAhBP;AAiBXE,MAAAA,eAAe,EAAE,EAjBN;AAkBXE,MAAAA,aAAa,EAAE,EAlBJ;AAmBXE,MAAAA,cAAc,EAAE,EAnBL;AAoBXE,MAAAA,YAAY,EAAE,EApBH;AAqBX4C,MAAAA,YAAY,EAAE,EArBH;AAsBXtB,MAAAA,YAAY,EAAEA,YAtBH;AAuBXZ,MAAAA,QAAQ,EAAE;AACRC,QAAAA,IAAI,EAAE;AADE,OAvBC;AA0BXJ,MAAAA,aAAa,EAAE,EA1BJ,CA2BX;;AA3BW,KAAb,CA7CwB,CA2ExB;;AAGA,SAAK1G,kBAAL,GAA0BA,kBAA1B;AACA,SAAKD,oBAAL,GAA4BA,oBAA5B;AAEA,SAAKiB,WAAL,GAAmBf,UAAU,CAACe,WAA9B;AACA,SAAKC,cAAL,GAAsBhB,UAAU,CAACgB,cAAjC;AACA,SAAKC,QAAL,GAAgBjB,UAAU,CAACiB,QAA3B;AACA,SAAKC,UAAL,GAAkBlB,UAAU,CAACkB,UAA7B;AACA,SAAKC,aAAL,GAAqBnB,UAAU,CAACmB,aAAhC;AACA,SAAKC,eAAL,GAAuBpB,UAAU,CAACoB,eAAlC;AACA,SAAKC,cAAL,GAAsBrB,UAAU,CAACqB,cAAjC;AACA,SAAKC,uBAAL,GAA+BtB,UAAU,CAACsB,uBAA1C;AACA,SAAKC,uBAAL,GAA+BvB,UAAU,CAACuB,uBAA1C;AACA,SAAKC,aAAL,GAAqBxB,UAAU,CAACwB,aAAhC,CA1FwB,CA2FxB;AACD;;AAIK2F,EAAAA,OAAN,CAAc4B,IAAd,EAA4BpC,OAA5B,EAA8C;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAC5C;AAEA,gBAAI/G,OAAO,CAACD,WAAW,CAACqH,sBAAb,CAAP,KAAgDL,OAAO,CAACrC,EAA5D,EAAgE;AAC1D0E,cAAAA,YAD0D,GAC3CrC,OAAO,CAACsC,OAAR,CACjBrJ,OAAO,CAACD,WAAW,CAACuJ,6BAAb,CADU,CAD2C;AAI1DC,cAAAA,YAJ0D,GAI3CxC,OAAO,CAACsC,OAAR,CACjBrJ,OAAO,CAACD,WAAW,CAACyJ,2BAAb,CADU,CAJ2C;AAOxDC,cAAAA,gBAPwD,GAOrC1C,OAAO,CAACsC,OAAR,CACvBrJ,OAAO,CAACD,WAAW,CAAC2J,0BAAb,CADgB,CAPqC;;AAU9D,kBAAIN,YAAY,IAAI,CAACA,YAAY,CAACO,MAAlC,EAA0C;AACxC,oBAAIF,gBAAgB,IAAI,IAAxB,EAA8B;AAC5B9F,kBAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BwF,YAA5B,EAD4B,CAE5B;;AACA,sBAAIK,gBAAgB,KAAK,KAAI,CAACzI,yBAA1B,IAAuDoI,YAAY,KAAKQ,SAA5E,EAAuF;AACrF,oBAAA,KAAI,CAAC9C,mBAAL,CAAyB,SAAzB,EAAoC1G,UAAU,CAACyJ,oBAA/C;;AACAC,oBAAAA,UAAU,CAAC,MAAM;AACf;AACA5G,sBAAAA,YAAY,CAAC6G,OAAb,CAAqB,OAArB,EAA8BX,YAAY,CAAC7F,IAAb,CAAkBE,UAAlB,CAA6BvB,KAA3D;AACAgB,sBAAAA,YAAY,CAAC6G,OAAb,CAAqB,MAArB,EAA6BX,YAAY,CAACY,IAAb,CAAkBC,KAA/C;AACA/G,sBAAAA,YAAY,CAAC6G,OAAb,CACE,UADF,EAEEX,YAAY,CAAC7F,IAAb,CAAkBE,UAAlB,CAA6BlB,QAF/B,EAJe,CAQf;;AACA,sBAAA,KAAI,CAAC/B,KAAL,CAAW0J,OAAX,CAAmBC,IAAnB,CAAwB,yBAAxB;AACD,qBAVS,EAUP,IAVO,CAAV;AAWD;;AACD,sBAAIV,gBAAgB,KAAK,KAAI,CAACvI,2BAA1B,IAAyDkI,YAAY,KAAKQ,SAA9E,EAAyF;AACvFjG,oBAAAA,OAAO,CAACC,GAAR,CAAYwF,YAAZ,EAA0B,kBAA1B;AACAzF,oBAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;;AACA,oBAAA,KAAI,CAACkD,mBAAL,CAAyB,SAAzB,EAAoC,sBAApC;AACD;AACF;AACF,eAxBD,MAwBO;AACC6C,gBAAAA,MADD,GACUP,YAAY,CAACO,MADvB;;AAEL,gBAAA,KAAI,CAACS,0BAAL,CAAgCb,YAAhC;;AACA,oBAAII,MAAM,CAAC,CAAD,CAAN,CAAUM,KAAV,KAAoB,eAApB,IAAuCN,MAAM,CAAC,CAAD,CAAN,CAAUM,KAAV,KAAoB,mBAA/D,EAAoF;AAClF/G,kBAAAA,YAAY,CAAC6G,OAAb,CAAqB,MAArB,EAA6B,EAA7B,EADkF,CAElF;;AACA,iCAAA,KAAI,CAACvJ,KAAL,4DAAY0J,OAAZ,CAAoBC,IAApB,CAAyB,QAAzB;AACD,iBAJD,MAIO,IAAIR,MAAM,CAAC,CAAD,CAAN,CAAU5C,OAAd,EAAuB;AAC5B,kBAAA,KAAI,CAACD,mBAAL,CAAyB,OAAzB,EAAkC6C,MAAM,CAAC,CAAD,CAAN,CAAU5C,OAA5C;AACD,iBAFM,MAEA,IAAI4C,MAAM,CAAC,CAAD,CAAN,CAAUU,OAAd,EAAuB;AAC5B,kBAAA,KAAI,CAACvD,mBAAL,CAAyB,OAAzB,EAAkC6C,MAAM,CAAC,CAAD,CAAN,CAAUU,OAA5C;AACD;AACF;AACF,aAlD2C,CAmD5C;;;AAnD4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAoD7C,GAlLC,CAoLF;;;AACAtF,EAAAA,iBAAiB,GAAG;AAClB,UAAMuF,GAAY,GAAG,IAAI1K,OAAJ,CACnBI,OAAO,CAACD,WAAW,CAACwK,8BAAb,CADY,CAArB;AAGAD,IAAAA,GAAG,CAACtG,OAAJ,CAAYhE,OAAO,CAACD,WAAW,CAACyK,sBAAb,CAAnB,EAAyD,KAAKhK,KAA9D;AACA,SAAKiK,IAAL,CAAUH,GAAV;AACD;;AAEDrF,EAAAA,qBAAqB,GAAG;AACtB,UAAMqF,GAAY,GAAG,IAAI1K,OAAJ,CACnBI,OAAO,CAACD,WAAW,CAAC2K,iCAAb,CADY,CAArB;AAGAJ,IAAAA,GAAG,CAACtG,OAAJ,CAAYhE,OAAO,CAACD,WAAW,CAACyK,sBAAb,CAAnB,EAAyD,KAAKhK,KAA9D;AACA,SAAKiK,IAAL,CAAUH,GAAV;AACD;;AAED7C,EAAAA,mBAAmB,CAACkD,GAAD,EAAc;AAC/B,WAAOA,GAAG,KAAK,IAAR,IAAgBA,GAAG,CAACC,MAAJ,KAAe,CAAtC;AACD;;AAEDC,EAAAA,YAAY,CAAC3I,KAAD,EAAgB;AAC1B,WAAO,KAAKvB,QAAL,CAAcmK,IAAd,CAAmB5I,KAAnB,CAAP;AACD;;AA+DD6I,EAAAA,cAAc,GAAG;AACf,UAAMC,OAAO,GAAG;AACd,sBAAgB5K,UAAU,CAAC6K;AADb,KAAhB;AAIA,UAAMC,iBAAiB,GAAG,IAAItL,OAAJ,CACxBI,OAAO,CAACD,WAAW,CAAC+D,qBAAb,CADiB,CAA1B;AAGA,SAAK7C,mBAAL,GAA2BiK,iBAAiB,CAACnH,SAA7C;AAEAmH,IAAAA,iBAAiB,CAAClH,OAAlB,CACEhE,OAAO,CAACD,WAAW,CAACkE,8BAAb,CADT,EAEE7D,UAAU,CAAC+K,iBAFb;AAKAD,IAAAA,iBAAiB,CAAClH,OAAlB,CACEhE,OAAO,CAACD,WAAW,CAACoE,2BAAb,CADT,EAEEC,IAAI,CAACC,SAAL,CAAe2G,OAAf,CAFF;AAIAE,IAAAA,iBAAiB,CAAClH,OAAlB,CACEhE,OAAO,CAACD,WAAW,CAACwE,2BAAb,CADT,EAEEnE,UAAU,CAACgL,uBAFb;AAIAtL,IAAAA,SAAS,CAAC2E,WAAV,CAAsByG,iBAAiB,CAACxG,EAAxC,EAA4CwG,iBAA5C;AACD,GAlSC,CAoSF;;;AAwDAG,EAAAA,iBAAiB,CAAC7F,KAAD,EAAgB;AAC/B,WACEA,KAAK,KAAKoE,SAAV,IACApE,KAAK,KAAK,IADV,IAEAA,KAAK,KAAK,MAFV,IAGAA,KAAK,CAAC8F,IAAN,GAAaV,MAAb,GAAsB,CAJxB;AAMD;;AAEDW,EAAAA,iCAAiC,CAACC,WAAD,EAAsB9I,WAAtB,EAA2C;AAC1E,QAAI+I,KAAK,GAAG,IAAZ;;AAEA,QAAI,KAAKJ,iBAAL,CAAuB3I,WAAvB,CAAJ,EAAyC;AACvC,UAAI,CAAC,KAAK2I,iBAAL,CAAuBK,MAAM,CAACF,WAAD,CAA7B,CAAL,EAAkD;AAChDC,QAAAA,KAAK,GAAGrL,UAAU,CAACuL,2BAAnB;AACD;AACF,KAJD,MAIO,IAAI,KAAKN,iBAAL,CAAuBG,WAAvB,CAAJ,EAAyC;AAC9C,UAAI,CAAC,KAAKH,iBAAL,CAAuB3I,WAAvB,CAAL,EAA0C;AACxC+I,QAAAA,KAAK,GAAG,WAAWrL,UAAU,CAACwL,eAA9B;AACD;AACF;;AAED,WAAOH,KAAP;AACD,GAnXC,CA4fF;;;AA5fE","sourcesContent":["import { IBlock } from \"../../../framework/src/IBlock\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nimport MessageEnum, {\n  getName,\n} from \"../../../framework/src/Messages/MessageEnum\";\nimport { isEmpty } from 'lodash'\nimport * as Yup from \"yup\";\n\n// Customizable Area Start\nimport { imgPasswordInVisible, imgPasswordVisible } from \"./assets\";\n// Customizable Area End\n\nexport const configJSON = require(\"./config\");\n\nexport interface Props {\n  navigation: any;\n  id: string;\n}\n\nexport interface S {\n  // Customizable Area Start\n  fullName: string;\n  companyName: string;\n  phoneNumber: string;\n  email: string;\n  userType: string;\n  domainName: string;\n  address: string;\n  country: string;\n  teamMemberOkyd: string;\n  natureOfBussiness: string;\n  clientTarget: string;\n  errorMandatory: string;\n  errorEmail: string;\n  errorCompanyName: string;\n  errorDomainName: string;\n  errorFullName: string;\n  errorPhnNumber: string;\n  errorAddress: string;\n  errorCountry: string;\n  activated: boolean;\n  NewAccSchema: any;\n  snackBar: {\n    show: boolean,\n    message?: string,\n    type?: \"success\" | \"info\" | \"warning\" | \"error\" | undefined\n  };\n  changedDomain: any\n  // Customizable Area End\n}\n\nexport interface SS {\n  // Customizable Area Start\n  id: any;\n  // Customizable Area End\n}\n\n\nexport default class EmailAccountRegistrationController extends BlockComponent<\n  Props,\n  S,\n  SS\n  > {\n  // Customizable Area Start\n  arrayholder: any[];\n  passwordReg: RegExp;\n  emailReg: RegExp;\n  stringReg: RegExp;\n  phoneReg: RegExp;\n  numberReg: RegExp;\n  createAccountApiCallId: any;\n  createNewAccountApiCallId: any;\n\n  validationApiCallId: string = \"\";\n  domainAvailabilityApiCallId: string = \"\";\n  imgPasswordVisible: any;\n  imgPasswordInVisible: any;\n\n  labelHeader: any;\n  labelFirstName: string;\n  lastName: string;\n  labelEmail: string;\n  labelPassword: string;\n  labelRePassword: string;\n  labelLegalText: string;\n  labelLegalTermCondition: string;\n  labelLegalPrivacyPolicy: string;\n  btnTextSignUp: string;\n\n\n  // Customizable Area End\n\n  constructor(props: Props) {\n    super(props);\n    this.subScribedMessages = [\n      getName(MessageEnum.RestAPIResponceMessage),\n      getName(MessageEnum.NavigationPayLoadMessage),\n      getName(MessageEnum.CountryCodeMessage),\n    ];\n    this.receive = this.receive.bind(this);\n    this.isStringNullOrBlank = this.isStringNullOrBlank.bind(this);\n\n    runEngine.attachBuildingBlock(this, this.subScribedMessages);\n\n    this.arrayholder = [];\n    this.passwordReg = new RegExp(\"\\\\w+\");\n    this.emailReg = new RegExp(\"\\\\w+\");\n    this.stringReg = new RegExp(/^([\\w]{3,})+\\s+([\\w\\s]{3,})+$/i);\n    this.phoneReg = new RegExp(/^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/);\n    this.numberReg = new RegExp(/^[0-9]*$/);\n\n\n    let NewAccSchema = {\n      email: Yup.string()\n        .email(configJSON.errorEmailNotValid)\n        .required(configJSON.errorEmailRequired),\n      companyName: Yup.string().required(configJSON.errorCompanyNameEmpty),\n      domainName: Yup.string().required(configJSON.errorDomainRequire),\n      fullName: Yup.string()\n        .matches(configJSON.fullNamePattern, configJSON.errorStingOnly)\n        .required(configJSON.errorFullNameEmpty),\n      phoneNumber: Yup.string()\n        .matches(this.phoneReg, configJSON.errorPhoneNumberNotValid)\n        .min(5, configJSON.errorPhoneNumberMin)\n        .max(10, configJSON.errorPhoneNumberMax)\n        .required(configJSON.errorPhoneNumberReqired),\n      address: Yup.string()\n        .min(20, configJSON.errorAddressMin)\n        .max(250, configJSON.errorAddressMax)\n        .required(configJSON.errorAddressEmpty),\n      country: Yup.string().nullable(),\n      teamMemberOkyd: Yup.string().nullable(),\n      natureOfBussiness: Yup.string().nullable(),\n      clientTarget: Yup.string().nullable()\n    };\n\n\n    this.state = {\n      // Customizable Area Start\n      email: \"\",\n      companyName: \"\",\n      domainName: \"\",\n      fullName: \"\",\n      phoneNumber: \"\",\n      address: \"\",\n      country: \"\",\n      teamMemberOkyd: \"\",\n      natureOfBussiness: \"\",\n      clientTarget: \"\",\n      userType: \"subscriber\",\n      activated: true,\n      errorMandatory: \"\",\n      errorEmail: \"\",\n      errorCompanyName: \"\",\n      errorDomainName: \"\",\n      errorFullName: \"\",\n      errorPhnNumber: \"\",\n      errorAddress: \"\",\n      errorCountry: \"\",\n      NewAccSchema: NewAccSchema,\n      snackBar: {\n        show: false,\n      },\n      changedDomain: \"\"\n      // Customizable Area End\n    };\n\n    // Customizable Area Start\n\n\n    this.imgPasswordVisible = imgPasswordVisible;\n    this.imgPasswordInVisible = imgPasswordInVisible;\n\n    this.labelHeader = configJSON.labelHeader;\n    this.labelFirstName = configJSON.labelFirstName;\n    this.lastName = configJSON.lastName;\n    this.labelEmail = configJSON.labelEmail;\n    this.labelPassword = configJSON.labelPassword;\n    this.labelRePassword = configJSON.labelRePassword;\n    this.labelLegalText = configJSON.labelLegalText;\n    this.labelLegalTermCondition = configJSON.labelLegalTermCondition;\n    this.labelLegalPrivacyPolicy = configJSON.labelLegalPrivacyPolicy;\n    this.btnTextSignUp = configJSON.btnTextSignUp;\n    // Customizable Area End\n  }\n\n\n\n  async receive(from: string, message: Message) {\n    // Customizable Area Start\n\n    if (getName(MessageEnum.RestAPIResponceMessage) === message.id) {\n      var responseJson = message.getData(\n        getName(MessageEnum.RestAPIResponceSuccessMessage)\n      );\n      var errorReponse = message.getData(\n        getName(MessageEnum.RestAPIResponceErrorMessage)\n      );\n      const apiRequestCallId = message.getData(\n        getName(MessageEnum.RestAPIResponceDataMessage)\n      );\n      if (responseJson && !responseJson.errors) {\n        if (apiRequestCallId != null) {\n          console.log(\"responseJson\", responseJson)\n          // \n          if (apiRequestCallId === this.createNewAccountApiCallId && responseJson !== undefined) {\n            this.openSnackBarHandler('success', configJSON.successCreateAccount);\n            setTimeout(() => {\n              //@ts-ignore\n              localStorage.setItem(\"email\", responseJson.data.attributes.email);\n              localStorage.setItem(\"auth\", responseJson.meta.token);\n              localStorage.setItem(\n                \"fullname\",\n                responseJson.data.attributes.fullname\n              );\n              // @ts-ignore\n              this.props.history.push(\"email-send-successfully\");\n            }, 1000);\n          }\n          if (apiRequestCallId === this.domainAvailabilityApiCallId && responseJson !== undefined) {\n            console.log(responseJson, \"updated response\");\n            console.log('hi here is your domain')\n            this.openSnackBarHandler('success', \"Domain is available \");\n          }\n        }\n      } else {\n        const errors = responseJson.errors;\n        this.parseApiCatchErrorResponse(errorReponse);\n        if (errors[0].token === 'Invalid token' || errors[0].token === 'Token has Expired') {\n          localStorage.setItem(\"auth\", \"\");\n          //@ts-ignore\n          this.props?.history.push(\"/login\");\n        } else if (errors[0].message) {\n          this.openSnackBarHandler('error', errors[0].message);\n        } else if (errors[0].account) {\n          this.openSnackBarHandler('error', errors[0].account);\n        }\n      }\n    }\n    // Customizable Area End\n  }\n\n  // Customizable Area Start\n  goToPrivacyPolicy() {\n    const msg: Message = new Message(\n      getName(MessageEnum.NavigationPrivacyPolicyMessage)\n    );\n    msg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n    this.send(msg);\n  }\n\n  goToTermsAndCondition() {\n    const msg: Message = new Message(\n      getName(MessageEnum.NavigationTermAndConditionMessage)\n    );\n    msg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n    this.send(msg);\n  }\n\n  isStringNullOrBlank(str: string) {\n    return str === null || str.length === 0;\n  }\n\n  isValidEmail(email: string) {\n    return this.emailReg.test(email);\n  }\n\n  createAccount = (values: any): boolean => {\n    const header = {\n      \"Content-Type\": configJSON.contentTypeApiAddDetail,\n    };\n\n    const attrs = {\n      email: values.email,\n      company_name: values.companyName,\n      domain: `${values.domainName}.okyd.com`,\n      fullname: values.fullName,\n      full_phone_number: values.phoneNumber,\n      address: values.address,\n      country: values.country.name,\n      teamMemberOkyd: values.teamMemberOkyd.name,\n      natureOfBussiness: values.natureOfBussiness.name,\n      clientTarget: values.clientTarget.name,\n      user_type: values.user_type || localStorage.getItem('user_type') || this.state.userType,\n      activated: this.state.activated || true,\n    };\n\n    const data = {\n      type: \"email_account\",\n      attributes: attrs,\n    };\n\n    const httpBody = {\n      data: data,\n      //   token: this.state.otpAuthToken,\n    };\n\n    console.log('httpBody', httpBody)\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n    this.createNewAccountApiCallId = requestMessage.messageId;\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.accountsAPiEndPoint\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(header)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestBodyMessage),\n      JSON.stringify(httpBody)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.apiMethodTypeAddDetail\n    );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n    return true;\n  }\n\n  getValidations() {\n    const headers = {\n      \"Content-Type\": configJSON.validationApiContentType,\n    };\n\n    const getValidationsMsg = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n    this.validationApiCallId = getValidationsMsg.messageId;\n\n    getValidationsMsg.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.urlGetValidations\n    );\n\n    getValidationsMsg.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(headers)\n    );\n    getValidationsMsg.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.validationApiMethodType\n    );\n    runEngine.sendMessage(getValidationsMsg.id, getValidationsMsg);\n  }\n\n  //// handle domain name availability\n\n\n  domainAvailability = (): boolean => {\n    const header = {\n      \"Content-Type\": configJSON.contentTypeApiAddDetail,\n    };\n\n    console.log(this.state.domainName);\n\n    const attrs = {\n      domainName: this.state.domainName\n    };\n\n    const data = {\n      attributes: attrs,\n    };\n\n    const httpBody = {\n      data: data,\n    };\n\n    //console.log(\"httpBody\", httpBody);\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n    //console.log(\"requestMessage\", requestMessage);\n    this.domainAvailabilityApiCallId = requestMessage.messageId;\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.endPointApiDomainAvailability\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(header)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestBodyMessage),\n      JSON.stringify(httpBody)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.apiMethodTypeAddDetail\n    );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n\n    return true;\n  };\n\n\n  isNonNullAndEmpty(value: String) {\n    return (\n      value !== undefined &&\n      value !== null &&\n      value !== \"null\" &&\n      value.trim().length > 0\n    );\n  }\n\n  validateCountryCodeAndPhoneNumber(countryCode: string, phoneNumber: string) {\n    let error = null;\n\n    if (this.isNonNullAndEmpty(phoneNumber)) {\n      if (!this.isNonNullAndEmpty(String(countryCode))) {\n        error = configJSON.errorCountryCodeNotSelected;\n      }\n    } else if (this.isNonNullAndEmpty(countryCode)) {\n      if (!this.isNonNullAndEmpty(phoneNumber)) {\n        error = \"Phone \" + configJSON.errorBlankField;\n      }\n    }\n\n    return error;\n  }\n\n\n  btnLegalPrivacyPolicyProps = {\n    onClick: () => this.goToPrivacyPolicy(),\n  };\n\n  btnLegalTermsAndConditionProps = {\n    onClick: () => this.goToTermsAndCondition(),\n  };\n\n  txtInputEmailWebPrpos = {\n    onChange: (text: any) => {\n      this.setState({\n        errorEmail: \"\",\n        email: text.target.value,\n      });\n      //@ts-ignore\n      this.txtInputEmailPrpos.value = text.target.value;\n    },\n  };\n\n  txtInputEmailMobilePrpos = {\n    ...this.txtInputEmailWebPrpos,\n    keyboardType: \"email-address\",\n  };\n\n  txtInputEmailPrpos = this.isPlatformWeb()\n    ? this.txtInputEmailWebPrpos\n    : this.txtInputEmailMobilePrpos;\n\n  txtInputCompanyNameWebPrpos = {\n    onChange: (text: any) => {\n      this.setState({\n        errorCompanyName: \"\",\n        companyName: text.target.value,\n      });\n      //@ts-ignore\n    },\n  };\n\n  txtInputDomainNameWebPrpos = {\n    onChange: (text: any) => {\n      this.setState({\n        errorDomainName: \"\",\n        domainName: text.target.value,\n      });\n      //@ts-ignore\n    },\n  };\n\n  txtInputFullNameWebPrpos = {\n    onChange: (text: any) => {\n      this.setState({\n        errorFullName: \"\",\n        fullName: text.target.value,\n      });\n      //@ts-ignore\n    },\n  };\n\n  txtInputPhoneNumberWebPrpos = {\n    onChange: (text: Number) => {\n      //@ts-ignore\n      this.setState({ errorPhnNumber: \"\", phoneNumber: text?.target.value });\n    },\n  };\n\n  txtInputAddressWebPrpos = {\n    onChange: (text: any) => {\n      this.setState({ errorAddress: \"\", address: text.target.value });\n      //@ts-ignore\n    },\n  };\n\n  txtInputCountryWebPrpos = {\n    onChange: (text: any) => {\n      this.setState({ country: text.target.value });\n      //@ts-ignore\n    },\n  };\n\n  txtInputTeamOkydWebPrpos = {\n    onChange: (text: any) => {\n      this.setState({ teamMemberOkyd: text.target.value });\n      //@ts-ignore\n    },\n  };\n\n  txtInputNatureofBussinessWebPrpos = {\n    onChange: (text: any) => {\n      this.setState({ natureOfBussiness: text.target.value });\n      //@ts-ignore\n    },\n  };\n\n  txtInputTargetClientWebPrpos = {\n    onChange: (text: any) => {\n      this.setState({ clientTarget: text.target.value });\n      //@ts-ignore\n    },\n  };\n\n  //handle domain change\n  handleDomainChange = (e: any) => {\n    //e.preventDefault()\n    this.setState({\n      changedDomain: e.target.value,\n\n    })\n    console.log(this.state.changedDomain)\n  }\n\n  // Open View Details Modal\n  openSnackBarHandler = (type: \"success\" | \"info\" | \"warning\" | \"error\" | undefined, message: string): void => {\n    console.log(\"type,message\", type, message)\n    this.setState({\n      snackBar: {\n        show: true,\n        message: message,\n        type\n      }\n    });\n  };\n\n  // Close View Details Modal\n  closeSnackBarHandler = () => {\n    this.setState({\n      snackBar: {\n        show: false,\n        message: this.state.snackBar.message,\n        type: this.state.snackBar.type\n      }\n    });\n  };\n\n\n  // Customizable Area End\n}\n"]},"metadata":{},"sourceType":"module"}