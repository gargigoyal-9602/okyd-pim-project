{"ast":null,"code":"import _regeneratorRuntime from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport MessageEnum, { getName } from \"../../../framework/src/Messages/MessageEnum\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nimport * as Yup from \"yup\";\n// Customizable Area Start\n// Customizable Area End\nexport const configJSON = require(\"./config\");\nexport default class UserProfileSettingController extends BlockComponent {\n  constructor(props) {\n    super(props);\n    this.auth = window.localStorage.getItem(\"auth\");\n    this.userProfileApiCallId = \"\";\n    this.userUpdateProfileApiCallId = \"\";\n    this.userUpdateChangePassword = \"\";\n\n    this.getUserProfileDetails = () => {\n      const headers = {\n        \"Content-Type\": configJSON.contentTypeApiGetUserProfile,\n        token: this.auth\n      };\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      this.userProfileApiCallId = requestMessage.messageId;\n      console.log(\"this.userProfileApiCallId\", this.userProfileApiCallId);\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.endPointApiGetUserProfileDetails);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.methodTypeApiGetUserProfile);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    };\n\n    this.handleUpdateProfileDetails = values => {\n      const header = {\n        \"Content-Type\": configJSON.contentTypeApiUpdateUser,\n        token: this.auth\n      }; //console.log(values);\n\n      const attrs = {\n        fullname: values.fullname,\n        designation: values.designation,\n        address: values.address,\n        country: values.country,\n        full_phone_number: values.full_phone_number\n      };\n      const data = {\n        attributes: attrs\n      };\n      const httpBody = {\n        data: data\n      }; //console.log(\"httpBody\", httpBody);\n\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage)); //console.log(\"requestMessage\", requestMessage);\n\n      this.userUpdateProfileApiCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.endPointApiPutUserProfileUpdatedDetails);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(header));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(httpBody));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.methodTypeApiPostUserProfileUpdated);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    };\n\n    this.handleUpdateChangePassword = values => {\n      const header = {\n        \"Content-Type\": configJSON.contentTypeApiUpdateUser,\n        token: this.auth\n      };\n      const attrs = values;\n      const data = {\n        type: this.state.email,\n        attributes: attrs\n      };\n      const httpBody = {\n        data: data\n      }; //console.log(\"httpBody\", httpBody);\n\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage)); //console.log(\"requestMessage\", requestMessage);\n\n      this.userUpdateChangePassword = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.endPointApiPostUserUpdateChangePassword);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(header));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(httpBody));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.callTypeApiValidateMobileNo);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    };\n\n    this.onMenuToggle = () => {\n      this.setState({\n        menuCollapsed: !this.state.menuCollapsed,\n        generalInformation: true,\n        changePassword: false\n      });\n    };\n\n    this.handleGeneralInformation = () => {\n      this.setState({\n        generalInformation: true,\n        changePassword: false,\n        old_password_visible: false,\n        new_password_visible: false,\n        confirm_new_password_visible: false\n      });\n    };\n\n    this.handleChangePassword = () => {\n      this.setState({\n        changePassword: true,\n        generalInformation: false\n      });\n    };\n\n    this.handleOldPasswordVisible = () => {\n      this.setState({\n        old_password_visible: !this.state.old_password_visible\n      });\n    };\n\n    this.handleNewPasswordVisible = () => {\n      this.setState({\n        new_password_visible: !this.state.new_password_visible\n      });\n    };\n\n    this.handleConfirmNewPasswordVisible = () => {\n      this.setState({\n        confirm_new_password_visible: !this.state.confirm_new_password_visible\n      });\n    };\n\n    this.handlePasswordUpdatedSuccess = () => {\n      this.state.successfulChangedPassword ? alert(\"Password Updated Successfully\") : alert(\"invalid credentials\");\n    };\n\n    this.openSnackBarHandler = (type, message) => {\n      console.log(\"type,message\", type, message);\n      this.setState({\n        snackBar: {\n          show: true,\n          message: message,\n          type\n        }\n      });\n    };\n\n    this.closeSnackBarHandler = () => {\n      this.setState({\n        snackBar: {\n          show: false,\n          message: this.state.snackBar.message,\n          type: this.state.snackBar.type\n        }\n      });\n    };\n\n    this.receive = this.receive.bind(this); // Customizable Area Start\n\n    this.subScribedMessages = [getName(MessageEnum.AccoutLoginSuccess), getName(MessageEnum.RestAPIResponceMessage)];\n    let GeneralInformationSchema = {\n      fullname: Yup.string().required(configJSON.errorNameEmpty),\n      designation: Yup.string().required(configJSON.errorDesignationEmpty),\n      full_phone_number: Yup.string().required(configJSON.errorPhoneEmpty).matches(configJSON.PHONE_REGULAR_EXPRESSION, configJSON.errorPhoneNotMatch),\n      email: Yup.string().email(configJSON.errorEmailValidation).required(configJSON.errorEmailEmpty),\n      address: Yup.string().required(configJSON.errorAddressEmpty),\n      companyName: Yup.string().required(configJSON.errorCompanyNameEmpty),\n      country: Yup.string().nullable().required(configJSON.errorCountryEmpty)\n    };\n    let ChangePasswordSchema = {\n      old_password: Yup.string().required(configJSON.errorPassword),\n      new_password: Yup.string().required(configJSON.errorNewPasswordEmpty).matches(configJSON.PASSWORD_REGULAR_EXPRESSION, configJSON.errorNewPasswordNotValid),\n      confirm_new_password: Yup.string().required(configJSON.errorConfirmNewPasswordEmpty).test('passwords-match', configJSON.errorConfirmNewPasswordNotMatch, function (value) {\n        return this.parent.new_password === value;\n      })\n    };\n    this.state = {\n      user_type: \"\",\n      menuCollapsed: false,\n      searchText: \"\",\n      GeneralInformationSchema: GeneralInformationSchema,\n      ChangePasswordSchema: ChangePasswordSchema,\n      fullname: \"\",\n      designation: \"\",\n      full_phone_number: \"\",\n      email: \"\",\n      address: \"\",\n      country: \"\",\n      companyName: \"\",\n      generalInformation: true,\n      changePassword: false,\n      old_password: \"\",\n      new_password: \"\",\n      confirm_new_password: \"\",\n      old_password_visible: false,\n      new_password_visible: false,\n      confirm_new_password_visible: false,\n      auth: \"\",\n      snackBar: {\n        show: false\n      },\n      successfulChangedPassword: \"\"\n    };\n    runEngine.attachBuildingBlock(this, this.subScribedMessages);\n  } // Customizable Area Start\n\n\n  componentDidMount() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _this.getUserProfileDetails();\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  }\n\n  receive(from, message) {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var responseJson, apiRequestCallId, errorReponse, errors, _this2$props;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            // Customizable Area Start\n            runEngine.debugLog(\"Message Recived\", message);\n\n            if (getName(MessageEnum.RestAPIResponceMessage) === message.id) {\n              responseJson = message.getData(getName(MessageEnum.RestAPIResponceSuccessMessage));\n\n              if (responseJson && !responseJson.errors && responseJson.data) {\n                apiRequestCallId = message.getData(getName(MessageEnum.RestAPIResponceDataMessage));\n\n                if (apiRequestCallId != null) {\n                  //console.log(responseJson.data)\n                  if (apiRequestCallId === _this2.userProfileApiCallId) {\n                    console.log(responseJson.data);\n\n                    _this2.setState({\n                      fullname: responseJson.data.attributes.fullname,\n                      email: responseJson.data.attributes.email,\n                      designation: responseJson.data.attributes.designation,\n                      full_phone_number: responseJson.data.attributes.full_phone_number,\n                      address: responseJson.data.attributes.address,\n                      companyName: responseJson.data.attributes.company_name,\n                      country: responseJson.data.attributes.country,\n                      user_type: responseJson.data.attributes.user_type\n                    });\n                  }\n\n                  if (apiRequestCallId === _this2.userUpdateProfileApiCallId) {\n                    console.log(responseJson, \"updated response\");\n\n                    _this2.setState({\n                      fullname: responseJson.data.attributes.fullname,\n                      email: responseJson.data.attributes.email,\n                      designation: responseJson.data.attributes.designation,\n                      full_phone_number: responseJson.data.attributes.full_phone_number,\n                      address: responseJson.data.attributes.address,\n                      companyName: responseJson.data.attributes.company_name,\n                      country: responseJson.data.attributes.country,\n                      user_type: responseJson.data.attributes.user_type\n                    });\n\n                    _this2.openSnackBarHandler('success', configJSON.SuccessfullyUpdatedProfile);\n                  }\n\n                  if (apiRequestCallId === _this2.userUpdateChangePassword) {\n                    console.log(responseJson, \"updated password\");\n\n                    _this2.setState({\n                      successfulChangedPassword: responseJson.success\n                    });\n\n                    _this2.openSnackBarHandler('success', configJSON.SuccessfullyUpdatedPassword); // this.handlePasswordUpdatedSuccess();\n\n                  }\n                }\n              } else {\n                errorReponse = message.getData(getName(MessageEnum.RestAPIResponceErrorMessage));\n                errors = responseJson.errors;\n                console.log(errors[0].meaasge);\n\n                _this2.parseApiCatchErrorResponse(errorReponse);\n\n                if (errors[0].token === 'Invalid token' || 'Token has Expired') {\n                  AsyncStorage.setItem(\"auth\", \"\"); //@ts-ignore\n\n                  (_this2$props = _this2.props) === null || _this2$props === void 0 ? void 0 : _this2$props.history.push(\"/login\");\n                } else if (errors[0].message) {\n                  //alert(\"Invalid credentials\")\n                  _this2.openSnackBarHandler('error', \"Invalid credentials\");\n                }\n              }\n            }\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }))();\n  } // Handler Profile Details\n\n\n}","map":{"version":3,"sources":["/home/lp-greenapex/gargi/okydpim-36944-react-native/src/packages/blocks/user-profile-basic/src/UserProfileSettingController.web.tsx"],"names":["Message","BlockComponent","MessageEnum","getName","runEngine","Yup","configJSON","require","UserProfileSettingController","constructor","props","auth","window","localStorage","getItem","userProfileApiCallId","userUpdateProfileApiCallId","userUpdateChangePassword","getUserProfileDetails","headers","contentTypeApiGetUserProfile","token","requestMessage","RestAPIRequestMessage","messageId","console","log","addData","RestAPIResponceEndPointMessage","endPointApiGetUserProfileDetails","RestAPIRequestHeaderMessage","JSON","stringify","RestAPIRequestMethodMessage","methodTypeApiGetUserProfile","sendMessage","id","handleUpdateProfileDetails","values","header","contentTypeApiUpdateUser","attrs","fullname","designation","address","country","full_phone_number","data","attributes","httpBody","endPointApiPutUserProfileUpdatedDetails","RestAPIRequestBodyMessage","methodTypeApiPostUserProfileUpdated","handleUpdateChangePassword","type","state","email","endPointApiPostUserUpdateChangePassword","callTypeApiValidateMobileNo","onMenuToggle","setState","menuCollapsed","generalInformation","changePassword","handleGeneralInformation","old_password_visible","new_password_visible","confirm_new_password_visible","handleChangePassword","handleOldPasswordVisible","handleNewPasswordVisible","handleConfirmNewPasswordVisible","handlePasswordUpdatedSuccess","successfulChangedPassword","alert","openSnackBarHandler","message","snackBar","show","closeSnackBarHandler","receive","bind","subScribedMessages","AccoutLoginSuccess","RestAPIResponceMessage","GeneralInformationSchema","string","required","errorNameEmpty","errorDesignationEmpty","errorPhoneEmpty","matches","PHONE_REGULAR_EXPRESSION","errorPhoneNotMatch","errorEmailValidation","errorEmailEmpty","errorAddressEmpty","companyName","errorCompanyNameEmpty","nullable","errorCountryEmpty","ChangePasswordSchema","old_password","errorPassword","new_password","errorNewPasswordEmpty","PASSWORD_REGULAR_EXPRESSION","errorNewPasswordNotValid","confirm_new_password","errorConfirmNewPasswordEmpty","test","errorConfirmNewPasswordNotMatch","value","parent","user_type","searchText","attachBuildingBlock","componentDidMount","from","debugLog","responseJson","getData","RestAPIResponceSuccessMessage","errors","apiRequestCallId","RestAPIResponceDataMessage","company_name","SuccessfullyUpdatedProfile","success","SuccessfullyUpdatedPassword","errorReponse","RestAPIResponceErrorMessage","meaasge","parseApiCatchErrorResponse","AsyncStorage","setItem","history","push"],"mappings":"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","sourcesContent":["import { AsyncStorage } from \"react-native\";\nimport { IBlock } from \"../../../framework/src/IBlock\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport MessageEnum, {\n  getName,\n} from \"../../../framework/src/Messages/MessageEnum\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nimport * as Yup from \"yup\";\nimport { values } from \"lodash\";\nimport Alert from \"@material-ui/lab/Alert\";\n\n// Customizable Area Start\n// Customizable Area End\n\nexport const configJSON = require(\"./config\");\n\nexport interface Props {\n  navigation: any;\n  id: string;\n  // Customizable Area Start\n  memberDetails: any;\n  // Customizable Area End\n}\n\ninterface S {\n  // Customizable Area Start\n  user_type: string;\n  menuCollapsed: boolean;\n  searchText: string | null | undefined;\n  GeneralInformationSchema: any;\n  ChangePasswordSchema: any;\n  generalInformation: boolean;\n  changePassword: boolean;\n  fullname: string;\n  designation: string;\n  full_phone_number: string;\n  email: string;\n  address: string;\n  country: string;\n  companyName: string;\n  old_password: string;\n  new_password: string;\n  confirm_new_password: string;\n  old_password_visible: boolean;\n  new_password_visible: boolean;\n  confirm_new_password_visible: boolean;\n  snackBar: {\n    show: boolean,\n    message?: string,\n    type?: \"success\" | \"info\" | \"warning\" | \"error\" | undefined\n  };\n  auth: string | null | undefined;\n  successfulChangedPassword: any\n\n\n  // Customizable Area End\n}\n\ninterface SelectOptions {\n  value: string;\n  label: string;\n}\n\ninterface SS {\n  id: any;\n}\n\nexport default class UserProfileSettingController extends BlockComponent<\n  Props,\n  S,\n  SS\n  > {\n  auth: string | null | undefined = window.localStorage.getItem(\"auth\");\n  userProfileApiCallId: string = \"\";\n  userUpdateProfileApiCallId: string = \"\";\n  userUpdateChangePassword: string = \"\";\n\n  constructor(props: Props) {\n    super(props);\n    this.receive = this.receive.bind(this);\n\n    // Customizable Area Start\n    this.subScribedMessages = [\n      getName(MessageEnum.AccoutLoginSuccess),\n      getName(MessageEnum.RestAPIResponceMessage),\n    ];\n\n    let GeneralInformationSchema = {\n      fullname: Yup.string().required(configJSON.errorNameEmpty),\n      designation: Yup.string().required(configJSON.errorDesignationEmpty),\n      full_phone_number: Yup.string()\n        .required(configJSON.errorPhoneEmpty)\n        .matches(\n          configJSON.PHONE_REGULAR_EXPRESSION,\n          configJSON.errorPhoneNotMatch\n        ),\n      email: Yup.string()\n        .email(configJSON.errorEmailValidation)\n        .required(configJSON.errorEmailEmpty),\n      address: Yup.string().required(configJSON.errorAddressEmpty),\n      companyName: Yup.string().required(configJSON.errorCompanyNameEmpty),\n      country: Yup.string()\n        .nullable()\n        .required(configJSON.errorCountryEmpty),\n    };\n\n    let ChangePasswordSchema = {\n      old_password: Yup.string().required(configJSON.errorPassword),\n      new_password: Yup.string()\n        .required(configJSON.errorNewPasswordEmpty)\n        .matches(\n          configJSON.PASSWORD_REGULAR_EXPRESSION,\n          configJSON.errorNewPasswordNotValid\n        ),\n      confirm_new_password: Yup.string()\n        .required(configJSON.errorConfirmNewPasswordEmpty)\n        .test('passwords-match', configJSON.errorConfirmNewPasswordNotMatch, function (value) {\n          return this.parent.new_password === value;\n        }),\n\n    };\n\n    this.state = {\n      user_type: \"\",\n      menuCollapsed: false,\n      searchText: \"\",\n      GeneralInformationSchema: GeneralInformationSchema,\n      ChangePasswordSchema: ChangePasswordSchema,\n      fullname: \"\",\n      designation: \"\",\n      full_phone_number: \"\",\n      email: \"\",\n      address: \"\",\n      country: \"\",\n      companyName: \"\",\n      generalInformation: true,\n      changePassword: false,\n      old_password: \"\",\n      new_password: \"\",\n      confirm_new_password: \"\",\n      old_password_visible: false,\n      new_password_visible: false,\n      confirm_new_password_visible: false,\n      auth: \"\",\n      snackBar: {\n        show: false,\n      },\n      successfulChangedPassword: \"\",\n\n    };\n\n    runEngine.attachBuildingBlock(this as IBlock, this.subScribedMessages);\n  }\n\n  // Customizable Area Start\n\n  async componentDidMount() {\n    this.getUserProfileDetails();\n  }\n\n  async receive(from: string, message: Message) {\n    // Customizable Area Start\n    runEngine.debugLog(\"Message Recived\", message);\n\n    if (getName(MessageEnum.RestAPIResponceMessage) === message.id) {\n      var responseJson = message.getData(\n        getName(MessageEnum.RestAPIResponceSuccessMessage)\n      );\n      if (responseJson && !responseJson.errors && responseJson.data) {\n        const apiRequestCallId = message.getData(\n          getName(MessageEnum.RestAPIResponceDataMessage)\n        );\n        if (apiRequestCallId != null) {\n          //console.log(responseJson.data)\n          if (apiRequestCallId === this.userProfileApiCallId) {\n            console.log(responseJson.data);\n            this.setState({\n              fullname: responseJson.data.attributes.fullname,\n              email: responseJson.data.attributes.email,\n              designation: responseJson.data.attributes.designation,\n              full_phone_number: responseJson.data.attributes.full_phone_number,\n              address: responseJson.data.attributes.address,\n              companyName: responseJson.data.attributes.company_name,\n              country: responseJson.data.attributes.country,\n              user_type: responseJson.data.attributes.user_type,\n            });\n          }\n\n          if (apiRequestCallId === this.userUpdateProfileApiCallId) {\n            console.log(responseJson, \"updated response\");\n            this.setState({\n              fullname: responseJson.data.attributes.fullname,\n              email: responseJson.data.attributes.email,\n              designation: responseJson.data.attributes.designation,\n              full_phone_number: responseJson.data.attributes.full_phone_number,\n              address: responseJson.data.attributes.address,\n              companyName: responseJson.data.attributes.company_name,\n              country: responseJson.data.attributes.country,\n              user_type: responseJson.data.attributes.user_type,\n            });\n            this.openSnackBarHandler('success', configJSON.SuccessfullyUpdatedProfile);\n          }\n\n          if (apiRequestCallId === this.userUpdateChangePassword) {\n            console.log(responseJson, \"updated password\");\n            this.setState({\n              successfulChangedPassword: responseJson.success\n            })\n            this.openSnackBarHandler('success', configJSON.SuccessfullyUpdatedPassword);\n\n            // this.handlePasswordUpdatedSuccess();\n          }\n        }\n      } else {\n        var errorReponse = message.getData(\n          getName(MessageEnum.RestAPIResponceErrorMessage)\n        );\n        const errors = responseJson.errors;\n        console.log(errors[0].meaasge)\n        this.parseApiCatchErrorResponse(errorReponse);\n        if (errors[0].token === 'Invalid token' || 'Token has Expired') {\n          AsyncStorage.setItem(\"auth\", \"\");\n          //@ts-ignore\n          this.props?.history.push(\"/login\");\n        }\n        else if (errors[0].message) {\n          //alert(\"Invalid credentials\")\n          this.openSnackBarHandler('error', \"Invalid credentials\");\n        }\n      }\n    }\n  }\n\n  // Handler Profile Details\n  getUserProfileDetails = (): boolean => {\n    const headers = {\n      \"Content-Type\": configJSON.contentTypeApiGetUserProfile,\n      token: this.auth,\n    };\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n    this.userProfileApiCallId = requestMessage.messageId;\n    console.log(\"this.userProfileApiCallId\", this.userProfileApiCallId);\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.endPointApiGetUserProfileDetails\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(headers)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.methodTypeApiGetUserProfile\n    );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n\n    return true;\n  };\n\n  //// handle api for update profile details\n\n  handleUpdateProfileDetails = (values: any): boolean => {\n    const header = {\n      \"Content-Type\": configJSON.contentTypeApiUpdateUser,\n      token: this.auth,\n    };\n\n    //console.log(values);\n\n    const attrs = {\n      fullname: values.fullname,\n      designation: values.designation,\n      address: values.address,\n      country: values.country,\n      full_phone_number: values.full_phone_number,\n    };\n\n    const data = {\n      attributes: attrs,\n    };\n\n    const httpBody = {\n      data: data,\n    };\n\n    //console.log(\"httpBody\", httpBody);\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n    //console.log(\"requestMessage\", requestMessage);\n    this.userUpdateProfileApiCallId = requestMessage.messageId;\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.endPointApiPutUserProfileUpdatedDetails\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(header)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestBodyMessage),\n      JSON.stringify(httpBody)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.methodTypeApiPostUserProfileUpdated\n    );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n\n    return true;\n  };\n\n  //// handle api for change password\n  handleUpdateChangePassword = (values: any): boolean => {\n\n    const header = {\n      \"Content-Type\": configJSON.contentTypeApiUpdateUser,\n      token: this.auth,\n    };\n\n    const attrs = values;\n\n    const data = {\n      type: this.state.email,\n      attributes: attrs,\n    };\n\n    const httpBody = {\n      data: data,\n    };\n\n    //console.log(\"httpBody\", httpBody);\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n    //console.log(\"requestMessage\", requestMessage);\n    this.userUpdateChangePassword = requestMessage.messageId;\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.endPointApiPostUserUpdateChangePassword\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(header)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestBodyMessage),\n      JSON.stringify(httpBody)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.callTypeApiValidateMobileNo\n    );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n\n    return true;\n  };\n\n\n\n  onMenuToggle = () => {\n    this.setState({\n      menuCollapsed: !this.state.menuCollapsed,\n      generalInformation: true,\n      changePassword: false,\n    });\n  };\n\n  handleGeneralInformation = () => {\n    this.setState({\n      generalInformation: true,\n      changePassword: false,\n      old_password_visible: false,\n      new_password_visible: false,\n      confirm_new_password_visible: false,\n    });\n  };\n\n  handleChangePassword = () => {\n    this.setState({\n      changePassword: true,\n      generalInformation: false,\n    });\n  };\n\n  handleOldPasswordVisible = () => {\n    this.setState({\n      old_password_visible: !this.state.old_password_visible,\n    });\n  };\n  handleNewPasswordVisible = () => {\n    this.setState({\n      new_password_visible: !this.state.new_password_visible,\n    });\n  };\n  handleConfirmNewPasswordVisible = () => {\n    this.setState({\n      confirm_new_password_visible: !this.state.confirm_new_password_visible,\n    });\n  };\n  handlePasswordUpdatedSuccess = () => {\n    this.state.successfulChangedPassword\n      ? alert(\"Password Updated Successfully\")\n      : alert(\"invalid credentials\");\n  }\n\n  // Open View Details Modal\n  openSnackBarHandler = (type: \"success\" | \"info\" | \"warning\" | \"error\" | undefined, message: string): void => {\n    console.log(\"type,message\", type, message)\n    this.setState({\n      snackBar: {\n        show: true,\n        message: message,\n        type\n      }\n    });\n  };\n\n  // Close View Details Modal\n  closeSnackBarHandler = () => {\n    this.setState({\n      snackBar: {\n        show: false,\n        message: this.state.snackBar.message,\n        type: this.state.snackBar.type\n      }\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}