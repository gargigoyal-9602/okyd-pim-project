{"ast":null,"code":"import _regeneratorRuntime from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport MessageEnum, { getName } from \"../../../framework/src/Messages/MessageEnum\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nimport * as Yup from \"yup\";\n// Customizable Area Start\n// Customizable Area End\nexport const configJSON = require(\"./config\");\nexport default class UserProfileSettingController extends BlockComponent {\n  constructor(props) {\n    super(props);\n    this.auth = window.localStorage.getItem(\"auth\");\n    this.userProfileApiCallId = \"\";\n    this.userUpdateProfileApiCallId = \"\";\n    this.userUpdateChangePassword = \"\";\n\n    this.getUserProfileDetails = () => {\n      const headers = {\n        \"Content-Type\": configJSON.contentTypeApiGetUserProfile,\n        token: this.auth\n      };\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      this.userProfileApiCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.endPointApiGetUserProfileDetails);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.methodTypeApiGetUserProfile);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    };\n\n    this.handleUpdateProfileDetails = values => {\n      const header = {\n        \"Content-Type\": configJSON.contentTypeApiUpdateUser,\n        token: window.localStorage.getItem(\"auth\")\n      }; //console.log(values);\n\n      const attrs = {\n        fullname: values.fullname,\n        designation: values.designation,\n        address: values.address,\n        country: values.country,\n        full_phone_number: values.full_phone_number\n      };\n      const data = {\n        attributes: attrs\n      };\n      const httpBody = {\n        data: data\n      }; //console.log(\"httpBody\", httpBody);\n\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage)); //console.log(\"requestMessage\", requestMessage);\n\n      this.userUpdateProfileApiCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.endPointApiPutUserProfileUpdatedDetails);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(header));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(httpBody));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.methodTypeApiPostUserProfileUpdated);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    };\n\n    this.handleUpdateChangePassword = values => {\n      const header = {\n        \"Content-Type\": configJSON.contentTypeApiUpdateUser,\n        token: window.localStorage.getItem(\"auth\")\n      };\n      const attrs = values;\n      const data = {\n        type: this.state.email,\n        attributes: attrs\n      };\n      const httpBody = {\n        data: data\n      }; //console.log(\"httpBody\", httpBody);\n\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage)); //console.log(\"requestMessage\", requestMessage);\n\n      this.userUpdateChangePassword = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.endPointApiPostUserUpdateChangePassword);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(header));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(httpBody));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.callTypeApiValidateMobileNo);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    };\n\n    this.openSnackBarHandler = (type, message) => {\n      this.setState({\n        snackBar: {\n          show: true,\n          message: message,\n          type\n        }\n      });\n    };\n\n    this.onMenuToggle = () => {\n      this.setState({\n        menuCollapsed: !this.state.menuCollapsed,\n        generalInformation: true,\n        changePassword: false\n      });\n    };\n\n    this.handleGeneralInformation = () => {\n      this.setState({\n        generalInformation: true,\n        changePassword: false,\n        old_password_visible: false,\n        new_password_visible: false,\n        confirm_new_password_visible: false\n      });\n    };\n\n    this.handleChangePassword = () => {\n      this.setState({\n        changePassword: true,\n        generalInformation: false\n      });\n    };\n\n    this.handleOldPasswordVisible = () => {\n      this.setState({\n        old_password_visible: !this.state.old_password_visible\n      });\n    };\n\n    this.handleNewPasswordVisible = () => {\n      this.setState({\n        new_password_visible: !this.state.new_password_visible\n      });\n    };\n\n    this.handleConfirmNewPasswordVisible = () => {\n      this.setState({\n        confirm_new_password_visible: !this.state.confirm_new_password_visible\n      });\n    };\n\n    this.receive = this.receive.bind(this); // Customizable Area Start\n\n    this.subScribedMessages = [getName(MessageEnum.AccoutLoginSuccess), getName(MessageEnum.RestAPIResponceMessage)];\n    let GeneralInformationSchema = {\n      fullname: Yup.string().required(configJSON.errorNameEmpty),\n      designation: Yup.string().required(configJSON.errorDesignationEmpty),\n      full_phone_number: Yup.string().required(configJSON.errorPhoneEmpty).matches(configJSON.PHONE_REGULAR_EXPRESSION, configJSON.errorPhoneNotMatch),\n      email: Yup.string().email(configJSON.errorEmailValidation).required(configJSON.errorEmailEmpty),\n      address: Yup.string().required(configJSON.errorAddressEmpty),\n      companyName: Yup.string().required(configJSON.errorCompanyNameEmpty),\n      country: Yup.string().nullable().required(configJSON.errorCountryEmpty)\n    };\n    let ChangePasswordSchema = {\n      old_password: Yup.string().required(configJSON.errorPassword),\n      new_password: Yup.string().required(configJSON.errorNewPasswordEmpty).matches(configJSON.PASSWORD_REGULAR_EXPRESSION, configJSON.errorNewPasswordNotValid),\n      confirm_new_password: Yup.string().required(configJSON.errorConfirmNewPasswordEmpty).when(\"newPassword\", {\n        is: val => val && val.length > 0 ? true : false,\n        then: Yup.string().oneOf([Yup.ref(\"newPassword\")], configJSON.errorConfirmNewPasswordNotMatch)\n      })\n    };\n    this.state = {\n      auth: \"\",\n      user_type: \"\",\n      menuCollapsed: false,\n      searchText: \"\",\n      GeneralInformationSchema: GeneralInformationSchema,\n      ChangePasswordSchema: ChangePasswordSchema,\n      fullname: \"\",\n      designation: \"\",\n      full_phone_number: \"\",\n      email: \"\",\n      address: \"\",\n      country: \"\",\n      companyName: \"\",\n      generalInformation: true,\n      changePassword: false,\n      old_password: \"\",\n      new_password: \"\",\n      confirm_new_password: \"\",\n      old_password_visible: false,\n      new_password_visible: false,\n      confirm_new_password_visible: false,\n      snackBar: {\n        show: false\n      }\n    };\n    runEngine.attachBuildingBlock(this, this.subScribedMessages);\n  } // Customizable Area Start\n\n\n  componentDidMount() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _this.getUserProfileDetails();\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  }\n\n  receive(from, message) {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var responseJson, errorReponse, apiRequestCallId;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            // Customizable Area Start\n            runEngine.debugLog(\"Message Recived\", message);\n\n            if (getName(MessageEnum.RestAPIResponceMessage) === message.id) {\n              responseJson = message.getData(getName(MessageEnum.RestAPIResponceSuccessMessage));\n              errorReponse = message.getData(getName(MessageEnum.RestAPIResponceErrorMessage));\n              apiRequestCallId = message.getData(getName(MessageEnum.RestAPIResponceDataMessage));\n\n              if (responseJson && !responseJson.errors && responseJson.data) {\n                if (apiRequestCallId != null) {\n                  //console.log(responseJson.data)\n                  if (apiRequestCallId === _this2.userProfileApiCallId && responseJson !== undefined) {\n                    console.log(responseJson.data);\n\n                    _this2.setState({\n                      fullname: responseJson.data.attributes.fullname,\n                      email: responseJson.data.attributes.email,\n                      designation: responseJson.data.attributes.designation,\n                      full_phone_number: responseJson.data.attributes.full_phone_number,\n                      address: responseJson.data.attributes.address,\n                      companyName: responseJson.data.attributes.company_name,\n                      country: responseJson.data.attributes.country,\n                      user_type: responseJson.data.attributes.user_type\n                    });\n                  }\n\n                  if (apiRequestCallId === _this2.userUpdateProfileApiCallId) {\n                    console.log(responseJson, \"updated response\");\n\n                    _this2.setState({\n                      fullname: responseJson.data.attributes.fullname,\n                      email: responseJson.data.attributes.email,\n                      designation: responseJson.data.attributes.designation,\n                      full_phone_number: responseJson.data.attributes.full_phone_number,\n                      address: responseJson.data.attributes.address,\n                      companyName: responseJson.data.attributes.company_name,\n                      country: responseJson.data.attributes.country,\n                      user_type: responseJson.data.attributes.user_type\n                    });\n                  }\n\n                  if (apiRequestCallId === _this2.userUpdateChangePassword) {\n                    console.log(responseJson, \"updated password\");\n                  }\n                }\n              } else {// const errors = responseJson.errors;\n                // this.parseApiCatchErrorResponse(errorReponse);\n                // if (errors[0].token === \"Invalid token\" || \"Token has Expired\") {\n                //   //@ts-ignore\n                //   localStorage.setItem(\"auth\", \"\");\n                //   //@ts-ignore\n                //   // this.props?.history.push(\"/login\");\n                // } else errors[0].message;\n                // this.openSnackBarHandler(\"error\", errors[0].message);\n              }\n            }\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }))();\n  } // Handler Profile Details\n\n\n}","map":{"version":3,"sources":["/home/lp-greenapex/gargi/okydpim-36944-react-native/src/packages/blocks/user-profile-basic/src/UserProfileSettingController.web.tsx"],"names":["Message","BlockComponent","MessageEnum","getName","runEngine","Yup","configJSON","require","UserProfileSettingController","constructor","props","auth","window","localStorage","getItem","userProfileApiCallId","userUpdateProfileApiCallId","userUpdateChangePassword","getUserProfileDetails","headers","contentTypeApiGetUserProfile","token","requestMessage","RestAPIRequestMessage","messageId","addData","RestAPIResponceEndPointMessage","endPointApiGetUserProfileDetails","RestAPIRequestHeaderMessage","JSON","stringify","RestAPIRequestMethodMessage","methodTypeApiGetUserProfile","sendMessage","id","handleUpdateProfileDetails","values","header","contentTypeApiUpdateUser","attrs","fullname","designation","address","country","full_phone_number","data","attributes","httpBody","endPointApiPutUserProfileUpdatedDetails","RestAPIRequestBodyMessage","methodTypeApiPostUserProfileUpdated","handleUpdateChangePassword","type","state","email","endPointApiPostUserUpdateChangePassword","callTypeApiValidateMobileNo","openSnackBarHandler","message","setState","snackBar","show","onMenuToggle","menuCollapsed","generalInformation","changePassword","handleGeneralInformation","old_password_visible","new_password_visible","confirm_new_password_visible","handleChangePassword","handleOldPasswordVisible","handleNewPasswordVisible","handleConfirmNewPasswordVisible","receive","bind","subScribedMessages","AccoutLoginSuccess","RestAPIResponceMessage","GeneralInformationSchema","string","required","errorNameEmpty","errorDesignationEmpty","errorPhoneEmpty","matches","PHONE_REGULAR_EXPRESSION","errorPhoneNotMatch","errorEmailValidation","errorEmailEmpty","errorAddressEmpty","companyName","errorCompanyNameEmpty","nullable","errorCountryEmpty","ChangePasswordSchema","old_password","errorPassword","new_password","errorNewPasswordEmpty","PASSWORD_REGULAR_EXPRESSION","errorNewPasswordNotValid","confirm_new_password","errorConfirmNewPasswordEmpty","when","is","val","length","then","oneOf","ref","errorConfirmNewPasswordNotMatch","user_type","searchText","attachBuildingBlock","componentDidMount","from","debugLog","responseJson","getData","RestAPIResponceSuccessMessage","errorReponse","RestAPIResponceErrorMessage","apiRequestCallId","RestAPIResponceDataMessage","errors","undefined","console","log","company_name"],"mappings":"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","sourcesContent":["import { IBlock } from \"../../../framework/src/IBlock\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport MessageEnum, {\n  getName,\n} from \"../../../framework/src/Messages/MessageEnum\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nimport * as Yup from \"yup\";\nimport { values } from \"lodash\";\n\n// Customizable Area Start\n// Customizable Area End\n\nexport const configJSON = require(\"./config\");\n\nexport interface Props {\n  navigation: any;\n  id: string;\n  // Customizable Area Start\n  memberDetails: any;\n  // Customizable Area End\n}\n\ninterface S {\n  // Customizable Area Start\n  auth: string | null | undefined;\n  user_type: string;\n  menuCollapsed: boolean;\n  searchText: string | null | undefined;\n  GeneralInformationSchema: any;\n  ChangePasswordSchema: any;\n  generalInformation: boolean;\n  changePassword: boolean;\n  fullname: string;\n  designation: string;\n  full_phone_number: string;\n  email: string;\n  address: string;\n  country: string;\n  companyName: string;\n  old_password: string;\n  new_password: string;\n  confirm_new_password: string;\n  old_password_visible: boolean;\n  new_password_visible: boolean;\n  confirm_new_password_visible: boolean;\n  snackBar: {\n    show: boolean;\n    message?: string;\n    type?: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\n  };\n\n  // Customizable Area End\n}\n\ninterface SelectOptions {\n  value: string;\n  label: string;\n}\n\ninterface SS {\n  id: any;\n}\n\nexport default class UserProfileSettingController extends BlockComponent<\n  Props,\n  S,\n  SS\n> {\n  auth: string | null | undefined = window.localStorage.getItem(\"auth\");\n  userProfileApiCallId: string = \"\";\n  userUpdateProfileApiCallId: string = \"\";\n  userUpdateChangePassword: string = \"\";\n\n  constructor(props: Props) {\n    super(props);\n    this.receive = this.receive.bind(this);\n\n    // Customizable Area Start\n    this.subScribedMessages = [\n      getName(MessageEnum.AccoutLoginSuccess),\n      getName(MessageEnum.RestAPIResponceMessage),\n    ];\n\n    let GeneralInformationSchema = {\n      fullname: Yup.string().required(configJSON.errorNameEmpty),\n      designation: Yup.string().required(configJSON.errorDesignationEmpty),\n      full_phone_number: Yup.string()\n        .required(configJSON.errorPhoneEmpty)\n        .matches(\n          configJSON.PHONE_REGULAR_EXPRESSION,\n          configJSON.errorPhoneNotMatch\n        ),\n      email: Yup.string()\n        .email(configJSON.errorEmailValidation)\n        .required(configJSON.errorEmailEmpty),\n      address: Yup.string().required(configJSON.errorAddressEmpty),\n      companyName: Yup.string().required(configJSON.errorCompanyNameEmpty),\n      country: Yup.string()\n        .nullable()\n        .required(configJSON.errorCountryEmpty),\n    };\n\n    let ChangePasswordSchema = {\n      old_password: Yup.string().required(configJSON.errorPassword),\n      new_password: Yup.string()\n        .required(configJSON.errorNewPasswordEmpty)\n        .matches(\n          configJSON.PASSWORD_REGULAR_EXPRESSION,\n          configJSON.errorNewPasswordNotValid\n        ),\n      confirm_new_password: Yup.string()\n        .required(configJSON.errorConfirmNewPasswordEmpty)\n        .when(\"newPassword\", {\n          is: (val) => (val && val.length > 0 ? true : false),\n          then: Yup.string().oneOf(\n            [Yup.ref(\"newPassword\")],\n            configJSON.errorConfirmNewPasswordNotMatch\n          ),\n        }),\n    };\n\n    this.state = {\n      auth: \"\",\n      user_type: \"\",\n      menuCollapsed: false,\n      searchText: \"\",\n      GeneralInformationSchema: GeneralInformationSchema,\n      ChangePasswordSchema: ChangePasswordSchema,\n      fullname: \"\",\n      designation: \"\",\n      full_phone_number: \"\",\n      email: \"\",\n      address: \"\",\n      country: \"\",\n      companyName: \"\",\n      generalInformation: true,\n      changePassword: false,\n      old_password: \"\",\n      new_password: \"\",\n      confirm_new_password: \"\",\n      old_password_visible: false,\n      new_password_visible: false,\n      confirm_new_password_visible: false,\n      snackBar: {\n        show: false,\n      },\n    };\n\n    runEngine.attachBuildingBlock(this as IBlock, this.subScribedMessages);\n  }\n\n  // Customizable Area Start\n\n  async componentDidMount() {\n    this.getUserProfileDetails();\n  }\n\n  async receive(from: string, message: Message) {\n    // Customizable Area Start\n    runEngine.debugLog(\"Message Recived\", message);\n\n    if (getName(MessageEnum.RestAPIResponceMessage) === message.id) {\n      var responseJson = message.getData(\n        getName(MessageEnum.RestAPIResponceSuccessMessage)\n      );\n      var errorReponse = message.getData(\n        getName(MessageEnum.RestAPIResponceErrorMessage)\n      );\n      const apiRequestCallId = message.getData(\n        getName(MessageEnum.RestAPIResponceDataMessage)\n      );\n      if (responseJson && !responseJson.errors && responseJson.data) {\n        if (apiRequestCallId != null) {\n          //console.log(responseJson.data)\n          if (\n            apiRequestCallId === this.userProfileApiCallId &&\n            responseJson !== undefined\n          ) {\n            console.log(responseJson.data);\n            this.setState({\n              fullname: responseJson.data.attributes.fullname,\n              email: responseJson.data.attributes.email,\n              designation: responseJson.data.attributes.designation,\n              full_phone_number: responseJson.data.attributes.full_phone_number,\n              address: responseJson.data.attributes.address,\n              companyName: responseJson.data.attributes.company_name,\n              country: responseJson.data.attributes.country,\n              user_type: responseJson.data.attributes.user_type,\n            });\n          }\n\n          if (apiRequestCallId === this.userUpdateProfileApiCallId) {\n            console.log(responseJson, \"updated response\");\n            this.setState({\n              fullname: responseJson.data.attributes.fullname,\n              email: responseJson.data.attributes.email,\n              designation: responseJson.data.attributes.designation,\n              full_phone_number: responseJson.data.attributes.full_phone_number,\n              address: responseJson.data.attributes.address,\n              companyName: responseJson.data.attributes.company_name,\n              country: responseJson.data.attributes.country,\n              user_type: responseJson.data.attributes.user_type,\n            });\n          }\n\n          if (apiRequestCallId === this.userUpdateChangePassword) {\n            console.log(responseJson, \"updated password\");\n          }\n        }\n      } else {\n        // const errors = responseJson.errors;\n        // this.parseApiCatchErrorResponse(errorReponse);\n        // if (errors[0].token === \"Invalid token\" || \"Token has Expired\") {\n        //   //@ts-ignore\n        //   localStorage.setItem(\"auth\", \"\");\n        //   //@ts-ignore\n        //   // this.props?.history.push(\"/login\");\n        // } else errors[0].message;\n        // this.openSnackBarHandler(\"error\", errors[0].message);\n      }\n    }\n  }\n\n  // Handler Profile Details\n  getUserProfileDetails = (): boolean => {\n    const headers = {\n      \"Content-Type\": configJSON.contentTypeApiGetUserProfile,\n      token: this.auth,\n    };\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n    this.userProfileApiCallId = requestMessage.messageId;\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.endPointApiGetUserProfileDetails\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(headers)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.methodTypeApiGetUserProfile\n    );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n\n    return true;\n  };\n\n  //// handle api for update profile details\n\n  handleUpdateProfileDetails = (values: any): boolean => {\n    const header = {\n      \"Content-Type\": configJSON.contentTypeApiUpdateUser,\n      token: window.localStorage.getItem(\"auth\"),\n    };\n\n    //console.log(values);\n\n    const attrs = {\n      fullname: values.fullname,\n      designation: values.designation,\n      address: values.address,\n      country: values.country,\n      full_phone_number: values.full_phone_number,\n    };\n\n    const data = {\n      attributes: attrs,\n    };\n\n    const httpBody = {\n      data: data,\n    };\n\n    //console.log(\"httpBody\", httpBody);\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n    //console.log(\"requestMessage\", requestMessage);\n    this.userUpdateProfileApiCallId = requestMessage.messageId;\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.endPointApiPutUserProfileUpdatedDetails\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(header)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestBodyMessage),\n      JSON.stringify(httpBody)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.methodTypeApiPostUserProfileUpdated\n    );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n\n    return true;\n  };\n\n  //// handle api for change password\n  handleUpdateChangePassword = (values: any): boolean => {\n    const header = {\n      \"Content-Type\": configJSON.contentTypeApiUpdateUser,\n      token: window.localStorage.getItem(\"auth\"),\n    };\n\n    const attrs = values;\n\n    const data = {\n      type: this.state.email,\n      attributes: attrs,\n    };\n\n    const httpBody = {\n      data: data,\n    };\n\n    //console.log(\"httpBody\", httpBody);\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n    //console.log(\"requestMessage\", requestMessage);\n    this.userUpdateChangePassword = requestMessage.messageId;\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.endPointApiPostUserUpdateChangePassword\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(header)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestBodyMessage),\n      JSON.stringify(httpBody)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.callTypeApiValidateMobileNo\n    );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n\n    return true;\n  };\n\n  // Open View Details Modal\n  openSnackBarHandler = (\n    type: \"success\" | \"info\" | \"warning\" | \"error\" | undefined,\n    message: string\n  ): void => {\n    this.setState({\n      snackBar: {\n        show: true,\n        message: message,\n        type,\n      },\n    });\n  };\n\n  onMenuToggle = () => {\n    this.setState({\n      menuCollapsed: !this.state.menuCollapsed,\n      generalInformation: true,\n      changePassword: false,\n    });\n  };\n\n  handleGeneralInformation = () => {\n    this.setState({\n      generalInformation: true,\n      changePassword: false,\n      old_password_visible: false,\n      new_password_visible: false,\n      confirm_new_password_visible: false,\n    });\n  };\n\n  handleChangePassword = () => {\n    this.setState({\n      changePassword: true,\n      generalInformation: false,\n    });\n  };\n\n  handleOldPasswordVisible = () => {\n    this.setState({\n      old_password_visible: !this.state.old_password_visible,\n    });\n  };\n  handleNewPasswordVisible = () => {\n    this.setState({\n      new_password_visible: !this.state.new_password_visible,\n    });\n  };\n  handleConfirmNewPasswordVisible = () => {\n    this.setState({\n      confirm_new_password_visible: !this.state.confirm_new_password_visible,\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}