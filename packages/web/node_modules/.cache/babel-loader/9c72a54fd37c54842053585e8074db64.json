{"ast":null,"code":"import _objectSpread from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/react-native-elements/src/tooltip/Tooltip.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport { ViewPropTypes, withTheme } from '../config';\nimport { ScreenWidth, ScreenHeight, isIOS } from '../helpers';\nimport Triangle from './Triangle';\nimport getTooltipCoordinate, { getElementVisibleWidth } from './getTooltipCoordinate';\n\nclass Tooltip extends React.PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isVisible: false,\n      yOffset: 0,\n      xOffset: 0,\n      elementWidth: 0,\n      elementHeight: 0\n    };\n\n    this.toggleTooltip = () => {\n      const onClose = this.props.onClose;\n      this.getElementPosition();\n      this.setState(prevState => {\n        if (prevState.isVisible && !isIOS) {\n          onClose && onClose();\n        }\n\n        return {\n          isVisible: !prevState.isVisible\n        };\n      });\n    };\n\n    this.wrapWithPress = (toggleOnPress, children) => {\n      if (toggleOnPress) {\n        return /*#__PURE__*/React.createElement(TouchableOpacity, {\n          onPress: this.toggleTooltip,\n          activeOpacity: 1,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 9\n          }\n        }, children);\n      }\n\n      return children;\n    };\n\n    this.getTooltipStyle = () => {\n      const _this$state = this.state,\n            yOffset = _this$state.yOffset,\n            xOffset = _this$state.xOffset,\n            elementHeight = _this$state.elementHeight,\n            elementWidth = _this$state.elementWidth;\n      const _this$props = this.props,\n            height = _this$props.height,\n            backgroundColor = _this$props.backgroundColor,\n            width = _this$props.width,\n            withPointer = _this$props.withPointer,\n            containerStyle = _this$props.containerStyle;\n\n      const _getTooltipCoordinate = getTooltipCoordinate(xOffset, yOffset, elementWidth, elementHeight, ScreenWidth, ScreenHeight, width, height, withPointer),\n            x = _getTooltipCoordinate.x,\n            y = _getTooltipCoordinate.y;\n\n      return _objectSpread({\n        position: 'absolute',\n        left: x,\n        top: y,\n        width,\n        height,\n        backgroundColor,\n        // default styles\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        flex: 1,\n        borderRadius: 10,\n        padding: 10\n      }, containerStyle);\n    };\n\n    this.renderPointer = tooltipY => {\n      const _this$state2 = this.state,\n            yOffset = _this$state2.yOffset,\n            xOffset = _this$state2.xOffset,\n            elementHeight = _this$state2.elementHeight,\n            elementWidth = _this$state2.elementWidth;\n      const _this$props2 = this.props,\n            backgroundColor = _this$props2.backgroundColor,\n            pointerColor = _this$props2.pointerColor;\n      const pastMiddleLine = yOffset > tooltipY;\n      return /*#__PURE__*/React.createElement(View, {\n        style: {\n          position: 'absolute',\n          top: pastMiddleLine ? yOffset - 13 : yOffset + elementHeight - 2,\n          left: xOffset + getElementVisibleWidth(elementWidth, xOffset, ScreenWidth) / 2 - 7.5\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Triangle, {\n        style: {\n          borderBottomColor: pointerColor || backgroundColor\n        },\n        isDown: pastMiddleLine,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 9\n        }\n      }));\n    };\n\n    this.renderContent = withTooltip => {\n      const _this$props3 = this.props,\n            popover = _this$props3.popover,\n            withPointer = _this$props3.withPointer,\n            toggleOnPress = _this$props3.toggleOnPress,\n            highlightColor = _this$props3.highlightColor;\n\n      if (!withTooltip) {\n        return this.wrapWithPress(toggleOnPress, this.props.children);\n      }\n\n      const _this$state3 = this.state,\n            yOffset = _this$state3.yOffset,\n            xOffset = _this$state3.xOffset,\n            elementWidth = _this$state3.elementWidth,\n            elementHeight = _this$state3.elementHeight;\n      const tooltipStyle = this.getTooltipStyle();\n      return /*#__PURE__*/React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(View, {\n        style: {\n          position: 'absolute',\n          top: yOffset,\n          left: xOffset,\n          backgroundColor: highlightColor,\n          overflow: 'visible',\n          width: elementWidth,\n          height: elementHeight\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 9\n        }\n      }, this.props.children), withPointer && this.renderPointer(tooltipStyle.top), /*#__PURE__*/React.createElement(View, {\n        style: tooltipStyle,\n        testID: \"tooltipPopoverContainer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 9\n        }\n      }, popover));\n    };\n\n    this.getElementPosition = () => {\n      this.renderedElement && this.renderedElement.measure((frameOffsetX, frameOffsetY, width, height, pageOffsetX, pageOffsetY) => {\n        this.setState({\n          xOffset: pageOffsetX,\n          yOffset: isIOS ? pageOffsetY : pageOffsetY - StatusBar.currentHeight,\n          elementWidth: width,\n          elementHeight: height\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    // wait to compute onLayout values.\n    setTimeout(this.getElementPosition, 500);\n  }\n\n  render() {\n    const isVisible = this.state.isVisible;\n    const _this$props4 = this.props,\n          onClose = _this$props4.onClose,\n          withOverlay = _this$props4.withOverlay,\n          overlayColor = _this$props4.overlayColor,\n          onOpen = _this$props4.onOpen;\n    return /*#__PURE__*/React.createElement(View, {\n      collapsable: false,\n      ref: e => {\n        this.renderedElement = e;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 7\n      }\n    }, this.renderContent(false), /*#__PURE__*/React.createElement(Modal, {\n      animationType: \"fade\",\n      visible: isVisible,\n      transparent: true,\n      onDismiss: onClose,\n      onShow: onOpen,\n      onRequestClose: onClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(TouchableOpacity, {\n      style: styles.container(withOverlay, overlayColor),\n      onPress: this.toggleTooltip,\n      activeOpacity: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 11\n      }\n    }, this.renderContent(true))));\n  }\n\n}\n\nTooltip.propTypes = {\n  children: PropTypes.element,\n  withPointer: PropTypes.bool,\n  popover: PropTypes.element,\n  toggleOnPress: PropTypes.bool,\n  height: PropTypes.number,\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  containerStyle: ViewPropTypes.style,\n  pointerColor: PropTypes.string,\n  onClose: PropTypes.func,\n  onOpen: PropTypes.func,\n  overlayColor: PropTypes.string,\n  withOverlay: PropTypes.bool,\n  backgroundColor: PropTypes.string,\n  highlightColor: PropTypes.string\n};\nTooltip.defaultProps = {\n  withOverlay: true,\n  overlayColor: 'rgba(250, 250, 250, 0.70)',\n  highlightColor: 'transparent',\n  withPointer: true,\n  toggleOnPress: true,\n  height: 40,\n  width: 150,\n  containerStyle: {},\n  backgroundColor: '#617080',\n  onClose: () => {},\n  onOpen: () => {}\n};\nconst styles = {\n  container: (withOverlay, overlayColor) => ({\n    backgroundColor: withOverlay ? overlayColor : 'transparent',\n    flex: 1\n  })\n};\nexport { Tooltip };\nexport default withTheme(Tooltip, 'Tooltip');","map":{"version":3,"sources":["/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/react-native-elements/src/tooltip/Tooltip.js"],"names":["React","PropTypes","ViewPropTypes","withTheme","ScreenWidth","ScreenHeight","isIOS","Triangle","getTooltipCoordinate","getElementVisibleWidth","Tooltip","PureComponent","state","isVisible","yOffset","xOffset","elementWidth","elementHeight","toggleTooltip","onClose","props","getElementPosition","setState","prevState","wrapWithPress","toggleOnPress","children","getTooltipStyle","height","backgroundColor","width","withPointer","containerStyle","x","y","position","left","top","display","alignItems","justifyContent","flex","borderRadius","padding","renderPointer","tooltipY","pointerColor","pastMiddleLine","borderBottomColor","renderContent","withTooltip","popover","highlightColor","tooltipStyle","overflow","renderedElement","measure","frameOffsetX","frameOffsetY","pageOffsetX","pageOffsetY","StatusBar","currentHeight","componentDidMount","setTimeout","render","withOverlay","overlayColor","onOpen","e","styles","container","propTypes","element","bool","number","oneOfType","string","style","func","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TouchableOpacity, Modal, View, StatusBar } from 'react-native';\n\nimport { ViewPropTypes, withTheme } from '../config';\nimport { ScreenWidth, ScreenHeight, isIOS } from '../helpers';\n\nimport Triangle from './Triangle';\nimport getTooltipCoordinate, {\n  getElementVisibleWidth,\n} from './getTooltipCoordinate';\n\nclass Tooltip extends React.PureComponent {\n  state = {\n    isVisible: false,\n    yOffset: 0,\n    xOffset: 0,\n    elementWidth: 0,\n    elementHeight: 0,\n  };\n\n  renderedElement;\n\n  toggleTooltip = () => {\n    const { onClose } = this.props;\n    this.getElementPosition();\n    this.setState(prevState => {\n      if (prevState.isVisible && !isIOS) {\n        onClose && onClose();\n      }\n\n      return { isVisible: !prevState.isVisible };\n    });\n  };\n\n  wrapWithPress = (toggleOnPress, children) => {\n    if (toggleOnPress) {\n      return (\n        <TouchableOpacity onPress={this.toggleTooltip} activeOpacity={1}>\n          {children}\n        </TouchableOpacity>\n      );\n    }\n\n    return children;\n  };\n\n  getTooltipStyle = () => {\n    const { yOffset, xOffset, elementHeight, elementWidth } = this.state;\n    const {\n      height,\n      backgroundColor,\n      width,\n      withPointer,\n      containerStyle,\n    } = this.props;\n\n    const { x, y } = getTooltipCoordinate(\n      xOffset,\n      yOffset,\n      elementWidth,\n      elementHeight,\n      ScreenWidth,\n      ScreenHeight,\n      width,\n      height,\n      withPointer\n    );\n\n    return {\n      position: 'absolute',\n      left: x,\n      top: y,\n      width,\n      height,\n      backgroundColor,\n      // default styles\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      flex: 1,\n      borderRadius: 10,\n      padding: 10,\n      ...containerStyle,\n    };\n  };\n\n  renderPointer = tooltipY => {\n    const { yOffset, xOffset, elementHeight, elementWidth } = this.state;\n    const { backgroundColor, pointerColor } = this.props;\n    const pastMiddleLine = yOffset > tooltipY;\n\n    return (\n      <View\n        style={{\n          position: 'absolute',\n          top: pastMiddleLine ? yOffset - 13 : yOffset + elementHeight - 2,\n          left:\n            xOffset +\n            getElementVisibleWidth(elementWidth, xOffset, ScreenWidth) / 2 -\n            7.5,\n        }}\n      >\n        <Triangle\n          style={{ borderBottomColor: pointerColor || backgroundColor }}\n          isDown={pastMiddleLine}\n        />\n      </View>\n    );\n  };\n\n  renderContent = withTooltip => {\n    const { popover, withPointer, toggleOnPress, highlightColor } = this.props;\n\n    if (!withTooltip) {\n      return this.wrapWithPress(toggleOnPress, this.props.children);\n    }\n\n    const { yOffset, xOffset, elementWidth, elementHeight } = this.state;\n    const tooltipStyle = this.getTooltipStyle();\n    return (\n      <View>\n        <View\n          style={{\n            position: 'absolute',\n            top: yOffset,\n            left: xOffset,\n            backgroundColor: highlightColor,\n            overflow: 'visible',\n            width: elementWidth,\n            height: elementHeight,\n          }}\n        >\n          {this.props.children}\n        </View>\n        {withPointer && this.renderPointer(tooltipStyle.top)}\n        <View style={tooltipStyle} testID=\"tooltipPopoverContainer\">\n          {popover}\n        </View>\n      </View>\n    );\n  };\n\n  componentDidMount() {\n    // wait to compute onLayout values.\n    setTimeout(this.getElementPosition, 500);\n  }\n\n  getElementPosition = () => {\n    this.renderedElement &&\n      this.renderedElement.measure(\n        (\n          frameOffsetX,\n          frameOffsetY,\n          width,\n          height,\n          pageOffsetX,\n          pageOffsetY\n        ) => {\n          this.setState({\n            xOffset: pageOffsetX,\n            yOffset: isIOS\n              ? pageOffsetY\n              : pageOffsetY - StatusBar.currentHeight,\n            elementWidth: width,\n            elementHeight: height,\n          });\n        }\n      );\n  };\n\n  render() {\n    const { isVisible } = this.state;\n    const { onClose, withOverlay, overlayColor, onOpen } = this.props;\n\n    return (\n      <View\n        collapsable={false}\n        ref={e => {\n          this.renderedElement = e;\n        }}\n      >\n        {this.renderContent(false)}\n        <Modal\n          animationType=\"fade\"\n          visible={isVisible}\n          transparent\n          onDismiss={onClose}\n          onShow={onOpen}\n          onRequestClose={onClose}\n        >\n          <TouchableOpacity\n            style={styles.container(withOverlay, overlayColor)}\n            onPress={this.toggleTooltip}\n            activeOpacity={1}\n          >\n            {this.renderContent(true)}\n          </TouchableOpacity>\n        </Modal>\n      </View>\n    );\n  }\n}\n\nTooltip.propTypes = {\n  children: PropTypes.element,\n  withPointer: PropTypes.bool,\n  popover: PropTypes.element,\n  toggleOnPress: PropTypes.bool,\n  height: PropTypes.number,\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  containerStyle: ViewPropTypes.style,\n  pointerColor: PropTypes.string,\n  onClose: PropTypes.func,\n  onOpen: PropTypes.func,\n  overlayColor: PropTypes.string,\n  withOverlay: PropTypes.bool,\n  backgroundColor: PropTypes.string,\n  highlightColor: PropTypes.string,\n};\n\nTooltip.defaultProps = {\n  withOverlay: true,\n  overlayColor: 'rgba(250, 250, 250, 0.70)',\n  highlightColor: 'transparent',\n  withPointer: true,\n  toggleOnPress: true,\n  height: 40,\n  width: 150,\n  containerStyle: {},\n  backgroundColor: '#617080',\n  onClose: () => {},\n  onOpen: () => {},\n};\n\nconst styles = {\n  container: (withOverlay, overlayColor) => ({\n    backgroundColor: withOverlay ? overlayColor : 'transparent',\n    flex: 1,\n  }),\n};\n\nexport { Tooltip };\nexport default withTheme(Tooltip, 'Tooltip');\n"]},"metadata":{},"sourceType":"module"}