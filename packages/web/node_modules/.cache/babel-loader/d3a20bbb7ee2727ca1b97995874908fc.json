{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict-local\n * @format\n */\n\"use strict\";\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] !== null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nconst inject = _ref => {\n  let _ref$module = _slicedToArray(_ref.module, 2),\n      id = _ref$module[0],\n      code = _ref$module[1],\n      sourceURL = _ref.sourceURL; // Some engines do not support `sourceURL` as a comment. We expose a\n  // `globalEvalWithSourceUrl` function to handle updates in that case.\n\n\n  if (global.globalEvalWithSourceUrl) {\n    global.globalEvalWithSourceUrl(code, sourceURL);\n  } else {\n    // eslint-disable-next-line no-eval\n    eval(code);\n  }\n};\n\nfunction injectUpdate(update) {\n  update.added.forEach(inject);\n  update.modified.forEach(inject);\n}\n\nmodule.exports = injectUpdate;","map":{"version":3,"sources":["/home/lp-greenapex/gargi/okydpim-36944-react-native/src/packages/components/src/injectUpdate.js"],"names":["_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","TypeError","_arr","_n","_d","_e","undefined","_i","Symbol","iterator","_s","next","done","push","value","length","err","Array","isArray","inject","_ref","_ref$module","module","id","code","sourceURL","global","globalEvalWithSourceUrl","eval","injectUpdate","update","added","forEach","modified","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,cAAT,CAAwBC,GAAxB,EAA6BC,CAA7B,EAAgC;AAC9B,SACEC,eAAe,CAACF,GAAD,CAAf,IAAwBG,qBAAqB,CAACH,GAAD,EAAMC,CAAN,CAA7C,IAAyDG,gBAAgB,EAD3E;AAGD;;AAED,SAASA,gBAAT,GAA4B;AAC1B,QAAM,IAAIC,SAAJ,CAAc,sDAAd,CAAN;AACD;;AAED,SAASF,qBAAT,CAA+BH,GAA/B,EAAoCC,CAApC,EAAuC;AACrC,MAAIK,IAAI,GAAG,EAAX;AACA,MAAIC,EAAE,GAAG,IAAT;AACA,MAAIC,EAAE,GAAG,KAAT;AACA,MAAIC,EAAE,GAAGC,SAAT;;AACA,MAAI;AACF,SACE,IAAIC,EAAE,GAAGX,GAAG,CAACY,MAAM,CAACC,QAAR,CAAH,EAAT,EAAiCC,EADnC,EAEE,EAAEP,EAAE,GAAG,CAACO,EAAE,GAAGH,EAAE,CAACI,IAAH,EAAN,EAAiBC,IAAxB,CAFF,EAGET,EAAE,GAAG,IAHP,EAIE;AACAD,MAAAA,IAAI,CAACW,IAAL,CAAUH,EAAE,CAACI,KAAb;;AACA,UAAIjB,CAAC,IAAIK,IAAI,CAACa,MAAL,KAAgBlB,CAAzB,EAA4B;AAC7B;AACF,GATD,CASE,OAAOmB,GAAP,EAAY;AACZZ,IAAAA,EAAE,GAAG,IAAL;AACAC,IAAAA,EAAE,GAAGW,GAAL;AACD,GAZD,SAYU;AACR,QAAI;AACF,UAAI,CAACb,EAAD,IAAOI,EAAE,CAAC,QAAD,CAAF,KAAiB,IAA5B,EAAkCA,EAAE,CAAC,QAAD,CAAF;AACnC,KAFD,SAEU;AACR,UAAIH,EAAJ,EAAQ,MAAMC,EAAN;AACT;AACF;;AACD,SAAOH,IAAP;AACD;;AAED,SAASJ,eAAT,CAAyBF,GAAzB,EAA8B;AAC5B,MAAIqB,KAAK,CAACC,OAAN,CAActB,GAAd,CAAJ,EAAwB,OAAOA,GAAP;AACzB;;AAED,MAAMuB,MAAM,GAAGC,IAAI,IAAI;AACrB,MAAIC,WAAW,GAAG1B,cAAc,CAACyB,IAAI,CAACE,MAAN,EAAc,CAAd,CAAhC;AAAA,MACEC,EAAE,GAAGF,WAAW,CAAC,CAAD,CADlB;AAAA,MAEEG,IAAI,GAAGH,WAAW,CAAC,CAAD,CAFpB;AAAA,MAGEI,SAAS,GAAGL,IAAI,CAACK,SAHnB,CADqB,CAMrB;AACA;;;AACA,MAAIC,MAAM,CAACC,uBAAX,EAAoC;AAClCD,IAAAA,MAAM,CAACC,uBAAP,CAA+BH,IAA/B,EAAqCC,SAArC;AACD,GAFD,MAEO;AACL;AACAG,IAAAA,IAAI,CAACJ,IAAD,CAAJ;AACD;AACF,CAdD;;AAgBA,SAASK,YAAT,CAAsBC,MAAtB,EAA8B;AAC5BA,EAAAA,MAAM,CAACC,KAAP,CAAaC,OAAb,CAAqBb,MAArB;AACAW,EAAAA,MAAM,CAACG,QAAP,CAAgBD,OAAhB,CAAwBb,MAAxB;AACD;;AAEDG,MAAM,CAACY,OAAP,GAAiBL,YAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict-local\n * @format\n */\n\"use strict\";\n\nfunction _slicedToArray(arr, i) {\n  return (\n    _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest()\n  );\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n  try {\n    for (\n      var _i = arr[Symbol.iterator](), _s;\n      !(_n = (_s = _i.next()).done);\n      _n = true\n    ) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] !== null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nconst inject = _ref => {\n  let _ref$module = _slicedToArray(_ref.module, 2),\n    id = _ref$module[0],\n    code = _ref$module[1],\n    sourceURL = _ref.sourceURL;\n\n  // Some engines do not support `sourceURL` as a comment. We expose a\n  // `globalEvalWithSourceUrl` function to handle updates in that case.\n  if (global.globalEvalWithSourceUrl) {\n    global.globalEvalWithSourceUrl(code, sourceURL);\n  } else {\n    // eslint-disable-next-line no-eval\n    eval(code);\n  }\n};\n\nfunction injectUpdate(update) {\n  update.added.forEach(inject);\n  update.modified.forEach(inject);\n}\n\nmodule.exports = injectUpdate;\n"]},"metadata":{},"sourceType":"module"}