{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _app = require('firebase/app');\n\nvar _app2 = _interopRequireDefault(_app);\n\nrequire('firebase/database');\n\nvar _shallowequal = require('shallowequal');\n\nvar _shallowequal2 = _interopRequireDefault(_shallowequal);\n\nvar _utils = require('./utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar defaultMergeProps = function defaultMergeProps(ownProps, firebaseProps) {\n  return _extends({}, ownProps, firebaseProps);\n};\n\nvar mapSubscriptionsToQueries = function mapSubscriptionsToQueries(subscriptions) {\n  return (0, _utils.mapValues)(subscriptions, function (value) {\n    return typeof value === 'string' ? {\n      path: value\n    } : value;\n  });\n};\n\nvar defaultMapFirebaseToProps = function defaultMapFirebaseToProps(props, ref, firebaseApp) {\n  return {\n    firebaseApp: firebaseApp\n  };\n};\n\nexports.default = function () {\n  var mapFirebaseToProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultMapFirebaseToProps;\n  var mergeProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultMergeProps;\n\n  var mapFirebase = function mapFirebase() {\n    if (typeof mapFirebaseToProps !== 'function') {\n      return mapFirebaseToProps;\n    }\n\n    var firebaseProps = mapFirebaseToProps.apply(undefined, arguments);\n\n    if (firebaseProps === null || (typeof firebaseProps === 'undefined' ? 'undefined' : _typeof(firebaseProps)) !== 'object') {\n      throw new Error('react-firebase: mapFirebaseToProps must return an object. Instead received ' + firebaseProps + '.');\n    }\n\n    return firebaseProps;\n  };\n\n  var computeSubscriptions = function computeSubscriptions(props, ref, firebaseApp) {\n    var firebaseProps = mapFirebase(props, ref, firebaseApp);\n    return (0, _utils.pickBy)(firebaseProps, function (prop) {\n      return typeof prop === 'string' || prop && prop.path;\n    });\n  };\n\n  return function (WrappedComponent) {\n    var FirebaseConnect = function (_Component) {\n      _inherits(FirebaseConnect, _Component);\n\n      function FirebaseConnect(props, context) {\n        _classCallCheck(this, FirebaseConnect);\n\n        var _this = _possibleConstructorReturn(this, (FirebaseConnect.__proto__ || Object.getPrototypeOf(FirebaseConnect)).call(this, props, context));\n\n        _this.firebaseApp = props.firebaseApp || context.firebaseApp || _app2.default.app();\n\n        _this.ref = function (path) {\n          return _this.firebaseApp.database().ref(path);\n        };\n\n        _this.state = {\n          subscriptionsState: null\n        };\n        return _this;\n      }\n\n      _createClass(FirebaseConnect, [{\n        key: 'componentDidMount',\n        value: function componentDidMount() {\n          var subscriptions = computeSubscriptions(this.props, this.ref, this.firebaseApp);\n          this.mounted = true;\n          this.subscribe(subscriptions);\n        }\n      }, {\n        key: 'componentWillReceiveProps',\n        value: function componentWillReceiveProps(nextProps) {\n          var subscriptions = computeSubscriptions(this.props, this.ref, this.firebaseApp);\n          var nextSubscriptions = computeSubscriptions(nextProps, this.ref, this.firebaseApp);\n          var addedSubscriptions = (0, _utils.pickBy)(nextSubscriptions, function (path, key) {\n            return !subscriptions[key];\n          });\n          var removedSubscriptions = (0, _utils.pickBy)(subscriptions, function (path, key) {\n            return !nextSubscriptions[key];\n          });\n          var changedSubscriptions = (0, _utils.pickBy)(nextSubscriptions, function (path, key) {\n            return subscriptions[key] && !(0, _shallowequal2.default)(subscriptions[key], path);\n          });\n          this.unsubscribe(_extends({}, removedSubscriptions, changedSubscriptions));\n          this.subscribe(_extends({}, addedSubscriptions, changedSubscriptions));\n        }\n      }, {\n        key: 'componentWillUnmount',\n        value: function componentWillUnmount() {\n          this.mounted = false;\n\n          if (this.listeners) {\n            this.unsubscribe(this.listeners);\n          }\n        }\n      }, {\n        key: 'subscribe',\n        value: function subscribe(subscriptions) {\n          var _this2 = this;\n\n          if (Object.keys(subscriptions).length < 1) {\n            return;\n          }\n\n          var queries = mapSubscriptionsToQueries(subscriptions);\n          var nextListeners = (0, _utils.mapValues)(queries, function (_ref, key) {\n            var path = _ref.path,\n                query = _objectWithoutProperties(_ref, ['path']);\n\n            var containsOrderBy = Object.keys(query).some(function (queryKey) {\n              return queryKey.startsWith('orderBy');\n            });\n            var subscriptionRef = (0, _utils.createQueryRef)(_this2.ref(path), query);\n\n            var update = function update(snapshot) {\n              if (_this2.mounted) {\n                var value = containsOrderBy ? (0, _utils.mapSnapshotToValue)(snapshot) : snapshot.val();\n\n                _this2.setState(function (prevState) {\n                  return {\n                    subscriptionsState: _extends({}, prevState.subscriptionsState, _defineProperty({}, key, value))\n                  };\n                });\n              }\n            };\n\n            subscriptionRef.on('value', update);\n            return {\n              path: path,\n              unsubscribe: function unsubscribe() {\n                return subscriptionRef.off('value', update);\n              }\n            };\n          });\n          this.listeners = _extends({}, this.listeners, nextListeners);\n        }\n      }, {\n        key: 'unsubscribe',\n        value: function unsubscribe(subscriptions) {\n          var _this3 = this;\n\n          if (Object.keys(subscriptions).length < 1) {\n            return;\n          }\n\n          var nextListeners = _extends({}, this.listeners);\n\n          var nextSubscriptionsState = _extends({}, this.state.subscriptionsState);\n\n          Object.keys(subscriptions).forEach(function (key) {\n            var subscription = _this3.listeners[key];\n            subscription.unsubscribe();\n            delete nextListeners[key];\n            delete nextSubscriptionsState[key];\n          });\n          this.listeners = nextListeners;\n          this.setState({\n            subscriptionsState: nextSubscriptionsState\n          });\n        }\n      }, {\n        key: 'render',\n        value: function render() {\n          var firebaseProps = mapFirebase(this.props, this.ref, this.firebaseApp);\n          var actionProps = (0, _utils.pickBy)(firebaseProps, function (prop) {\n            return typeof prop === 'function';\n          });\n          var subscriptionProps = this.state.subscriptionsState;\n          var props = mergeProps(this.props, _extends({}, actionProps, subscriptionProps));\n          return (0, _react.createElement)(WrappedComponent, props);\n        }\n      }]);\n\n      return FirebaseConnect;\n    }(_react.Component);\n\n    FirebaseConnect.WrappedComponent = WrappedComponent;\n    FirebaseConnect.defaultProps = _react.Component.defaultProps;\n    FirebaseConnect.displayName = 'FirebaseConnect(' + (0, _utils.getDisplayName)(WrappedComponent) + ')';\n    FirebaseConnect.contextTypes = FirebaseConnect.propTypes = {\n      firebaseApp: _propTypes2.default.shape({\n        database: _propTypes2.default.func.isRequired // eslint-disable-line react/no-unused-prop-types\n\n      })\n    };\n    return FirebaseConnect;\n  };\n};\n\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}