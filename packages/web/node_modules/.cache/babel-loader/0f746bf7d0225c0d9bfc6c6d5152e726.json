{"ast":null,"code":"import _regeneratorRuntime from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nimport { Message } from \"../../../framework/src/Message\";\nimport MessageEnum, { getName } from \"../../../framework/src/Messages/MessageEnum\"; // Customizable Area Start\n\nimport * as Yup from \"yup\"; // Customizable Area End\n\nexport const configJSON = require(\"./config\");\n// Customizable Area Start\nconst phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\n\nconst passwordInvisibleImage = require(\"../assets/ic_password_invisible.png\");\n\nconst passwordVisibleImage = require(\"../assets/ic_password_visible.png\"); // Customizable Area End\n\n\nexport default class ForgotPasswordController extends BlockComponent {\n  // Customizable Area Start\n  //Properties from config\n  // Customizable Area End\n  constructor(props) {\n    super(props);\n    this.validationAPICallId = void 0;\n    this.requestEmailOtpCallId = void 0;\n    this.requestPhoneOtpCallId = void 0;\n    this.requestChangePasswordCallId = void 0;\n    this.requestGoToConfirmationCallId = void 0;\n    this.otpToken = void 0;\n    this.isChangePassword = void 0;\n    this.labelTextIsAccountRecovery = configJSON.labelTextIsAccountRecovery;\n    this.secondLabelText = configJSON.secondLabelText;\n    this.thirdLabelText = configJSON.thirdLabelText;\n    this.forthLabelText = configJSON.forthLabelText;\n    this.fifthLabelText = configJSON.fifthLabelText;\n    this.sixthLabelText = configJSON.sixthLabelText;\n    this.firstInputAutoCompleteType = configJSON.firstInputAutoCompleteType;\n    this.firstInputKeyboardStyle = configJSON.firstInputKeyboardStyle;\n    this.firstInputPlaceholder = configJSON.firstInputPlaceholder;\n    this.firstInputErrorColor = configJSON.firstInputErrorColor;\n    this.buttonTextIsNext = configJSON.buttonTextIsNext;\n    this.buttonColorForNextButton = configJSON.buttonColorForNextButton;\n    this.secondInputAutoCompleteType = configJSON.secondInputAutoCompleteType;\n    this.secondInputKeyboardType = configJSON.secondInputKeyboardType;\n    this.secondInputPlaceholder = configJSON.secondInputPlaceholder;\n    this.secondInputErrorColor = configJSON.secondInputErrorColor;\n    this.thirdInputPlaceholder = configJSON.thirdInputPlaceholder;\n    this.thirdInputErrorColor = configJSON.thirdInputErrorColor;\n    this.buttonTitleIsSMSPhoneAccount = configJSON.buttonTitleIsSMSPhoneAccount;\n    this.buttonTitleIsEmailAccount = configJSON.buttonTitleIsEmailAccount;\n    this.labelTextIsPleaseEnterYourNewPassword = configJSON.labelTextIsPleaseEnterYourNewPassword;\n    this.labelTextIsYourPasswordHasBeenSuccessfullyChanged = configJSON.labelTextIsYourPasswordHasBeenSuccessfullyChanged;\n    this.placeholderIsPassword = configJSON.placeholderIsPassword;\n    this.passwordVisibleImage = passwordVisibleImage;\n    this.passwordInvisibleImage = passwordInvisibleImage;\n    this.placeholderIsReTypePassword = configJSON.placeholderIsReTypePassword;\n    this.buttonTitleIsOk = configJSON.buttonTitleIsOk;\n    this.buttonColorForOkButton = configJSON.buttonColorForOkButton;\n    this.countryCodeSelectorPlaceholder = configJSON.countryCodeSelectorPlaceholder;\n\n    this.validationRulesRequest = () => {\n      const header = {\n        \"Content-Type\": configJSON.forgotPasswordAPiContentType\n      };\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      this.validationAPICallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.profileValidationSettingsAPiEndPoint);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(header));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.httpGetMethod);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n    };\n\n    this.subScribedMessages = [// Customizable Area Start\n    getName(MessageEnum.RestAPIResponceMessage), getName(MessageEnum.NavigationPayLoadMessage), getName(MessageEnum.CountryCodeMessage) // Customizable Area End\n    ];\n    this.receive = this.receive.bind(this);\n    runEngine.attachBuildingBlock(this, this.subScribedMessages); // Customizable Area Start\n    //email schema\n\n    let emailSchema = {\n      email: Yup.string().email(configJSON.pleaseEnterAValidEmail).required(configJSON.emailIsRequired)\n    }; //phone schema\n\n    let phoneSchema = {\n      // countryCode: Yup.number()\n      // .required(\"Country code is required\"),\n      phone: Yup.string().matches(phoneRegExp, configJSON.phoneNumberIsNotValid).required(configJSON.phoneNumberIsRequired)\n    }; //otpSchema\n\n    let otpSchema = {\n      otpCode: Yup.number().min(4).required(configJSON.otpCodeIsRequired)\n    }; //passwordSchema\n\n    let passwordSchema = {\n      password: Yup.string().required(configJSON.pleaseEnterAPassword).min(2, configJSON.passwordMustBeAtLeast2Characters),\n      confirmPassword: Yup.string().required(configJSON.pleaseConfirmYourPassword).when(\"password\", {\n        is: val => val && val.length > 0 ? true : false,\n        then: Yup.string().oneOf([Yup.ref(\"password\")], configJSON.passwordsMustMatch)\n      })\n    };\n    this.state = {\n      accountType: \"sms\",\n      accountStatus: \"ChooseAccountType\",\n      emailValue: \"\",\n      phoneValue: \"\",\n      countryCodeSelected: \"\",\n      passwordRules: \"\",\n      emailSchema: emailSchema,\n      phoneSchema: phoneSchema,\n      otpSchema: otpSchema,\n      passwordSchema: passwordSchema,\n      token: \"\",\n      enablePasswordField: true,\n      btnConfirmPasswordShowHide: true\n    }; // Customizable Area End\n  }\n\n  componentDidMount() {\n    var _superprop_getComponentDidMount = () => super.componentDidMount,\n        _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _superprop_getComponentDidMount().call(_this); // this.validationRulesRequest();\n\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  }\n\n  receive(from, message) {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var otpAuthTkn, accountType, responseJson, passRegex, emailRegex, passwordRulesFromValidation, msg, errorReponse, selectedCode;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(getName(MessageEnum.NavigationPayLoadMessage) === message.id)) {\n              _context2.next = 5;\n              break;\n            }\n\n            otpAuthTkn = message.getData(getName(MessageEnum.AuthTokenDataMessage));\n\n            if (otpAuthTkn && otpAuthTkn.length > 0) {\n              _this2.setState({\n                token: otpAuthTkn\n              });\n\n              if (_this2.isChangePassword) {\n                _this2.setState({\n                  accountStatus: \"ChangePassword\"\n                });\n              }\n\n              _this2.otpToken = _this2.state.token; // runEngine.debugLog(\"otpAuthTkn\", this.state.token);\n            } else {\n              accountType = message.getData(getName(MessageEnum.NavigationForgotPasswordPageInfo));\n\n              if (accountType) {\n                _this2.startForgotPassword(accountType);\n              }\n            }\n\n            _context2.next = 13;\n            break;\n\n          case 5:\n            if (!(getName(MessageEnum.RestAPIResponceMessage) === message.id && _this2.validationAPICallId && _this2.validationAPICallId === message.getData(getName(MessageEnum.RestAPIResponceDataMessage)))) {\n              _context2.next = 12;\n              break;\n            }\n\n            responseJson = message.getData(getName(MessageEnum.RestAPIResponceSuccessMessage));\n\n            if (!(responseJson === undefined)) {\n              _context2.next = 9;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 9:\n            if (responseJson && responseJson.data[0]) {\n              passRegex = RegExp(responseJson.data[0].password_validation_regexp);\n              emailRegex = RegExp(responseJson.data[0].email_validation_regexp);\n              passwordRulesFromValidation = responseJson.data[0].password_validation_rules;\n\n              _this2.setState({\n                //email schema\n                emailSchema: {\n                  email: Yup.string().email(configJSON.pleaseEnterAValidEmail).required(configJSON.emailIsRequired).matches(emailRegex, configJSON.invalidEmailAddress)\n                },\n                //password schema\n                passwordSchema: {\n                  password: Yup.string().required(configJSON.pleaseEnterAPassword).matches(passRegex, configJSON.invalidPassword),\n                  confirmPassword: Yup.string().required(configJSON.pleaseConfirmYourPassword).when(\"password\", {\n                    is: val => val && val.length > 0 ? true : false,\n                    then: Yup.string().oneOf([Yup.ref(\"password\")], configJSON.passwordsMustMatch)\n                  })\n                },\n                passwordRules: passwordRulesFromValidation\n              });\n            }\n\n            _context2.next = 13;\n            break;\n\n          case 12:\n            if (getName(MessageEnum.RestAPIResponceMessage) === message.id && _this2.requestEmailOtpCallId !== null && _this2.requestEmailOtpCallId === message.getData(getName(MessageEnum.RestAPIResponceDataMessage))) {\n              // console.log(\"entered email!!!!\");\n              responseJson = message.getData(getName(MessageEnum.RestAPIResponceSuccessMessage));\n\n              if (responseJson !== undefined && responseJson.meta && responseJson.meta.token) {\n                _this2.otpToken = responseJson.meta.token;\n\n                _this2.setState({\n                  token: _this2.otpToken\n                }); //navigate to OTP page\n\n\n                msg = new Message(getName(MessageEnum.NavigationMobilePhoneOTPMessage));\n                msg.addData(getName(MessageEnum.AuthTokenDataMessage), _this2.state.token);\n                msg.addData(getName(MessageEnum.NavigationPropsMessage), _this2.props);\n                msg.addData(getName(MessageEnum.AuthTokenEmailMessage), _this2.state.emailValue);\n                msg.addData(getName(MessageEnum.EnterOTPAsForgotPasswordMessage), true);\n\n                _this2.send(msg);\n              } //error handling\n              else if (responseJson && responseJson.errors) {\n                  _this2.parseApiErrorResponse(responseJson);\n                } else {\n                  errorReponse = message.getData(getName(MessageEnum.RestAPIResponceErrorMessage));\n\n                  _this2.parseApiCatchErrorResponse(errorReponse);\n                }\n            } else if (getName(MessageEnum.RestAPIResponceMessage) === message.id && _this2.requestPhoneOtpCallId !== null && _this2.requestPhoneOtpCallId === message.getData(getName(MessageEnum.RestAPIResponceDataMessage))) {\n              // console.log(\"entered phone!!!!\");\n              responseJson = message.getData(getName(MessageEnum.RestAPIResponceSuccessMessage));\n\n              if (responseJson !== undefined && responseJson.meta && responseJson.meta.token) {\n                _this2.otpToken = responseJson.meta.token;\n\n                _this2.setState({\n                  token: _this2.otpToken\n                });\n\n                msg = new Message(getName(MessageEnum.NavigationMobilePhoneOTPMessage));\n                msg.addData(getName(MessageEnum.AuthTokenDataMessage), _this2.state.token);\n                msg.addData(getName(MessageEnum.NavigationPropsMessage), _this2.props);\n                msg.addData(getName(MessageEnum.AuthTokenPhoneNumberMessage), _this2.state.phoneValue);\n                msg.addData(getName(MessageEnum.EnterOTPAsForgotPasswordMessage), true);\n\n                _this2.send(msg);\n              } //error handling\n              else if (responseJson && responseJson.errors) {\n                  _this2.parseApiErrorResponse(responseJson);\n                } else {\n                  errorReponse = message.getData(getName(MessageEnum.RestAPIResponceErrorMessage));\n\n                  _this2.parseApiCatchErrorResponse(errorReponse);\n                }\n            } else if (getName(MessageEnum.RestAPIResponceMessage) === message.id && _this2.requestGoToConfirmationCallId !== null && _this2.requestGoToConfirmationCallId === message.getData(getName(MessageEnum.RestAPIResponceDataMessage))) {\n              // console.log(\"entered 3\");\n              responseJson = message.getData(getName(MessageEnum.RestAPIResponceSuccessMessage));\n\n              if (responseJson !== undefined && responseJson.data) {\n                _this2.setState({\n                  accountStatus: \"Confirmation\"\n                });\n              } else if (responseJson !== undefined && responseJson.errors) {\n                _this2.parseApiErrorResponse(responseJson);\n              } else {\n                errorReponse = message.getData(getName(MessageEnum.RestAPIResponceErrorMessage));\n\n                _this2.parseApiCatchErrorResponse(errorReponse);\n              }\n            } else if (getName(MessageEnum.CountryCodeMessage) === message.id) {\n              selectedCode = message.getData(getName(MessageEnum.CountyCodeDataMessage));\n\n              if (selectedCode !== undefined) {\n                _this2.setState({\n                  countryCodeSelected: selectedCode.indexOf(\"+\") > 0 ? selectedCode.split(\"+\")[1] : selectedCode\n                });\n              }\n            }\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }))();\n  }\n\n  startForgotPassword(accountType) {\n    this.setState({\n      accountStatus: accountType === \"sms\" ? \"EnterPhone\" : \"EnterEmail\"\n    });\n  }\n\n  goToOtpAfterEmailValidation(values) {\n    //change status to OTP\n    const header = {\n      \"Content-Type\": configJSON.forgotPasswordAPiContentType\n    };\n    const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage)); //GO TO REQUEST STATE\n\n    this.requestEmailOtpCallId = requestMessage.messageId;\n    requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.passwordRecoveryStartOtpAPiEndPoint);\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(header));\n    this.setState({\n      emailValue: values.email ? values.email : \"\"\n    });\n    const data = {\n      type: values.accountType ? values.accountType : \"email_account\",\n      attributes: {\n        email: values.email ? values.email : \"\"\n      }\n    };\n    const httpBody = {\n      data: data\n    };\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.httpPostMethod);\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(httpBody));\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n  }\n\n  goToOtpAfterPhoneValidation(values) {\n    // console.log(\"entered phone validation code\");\n    if (!this.state.countryCodeSelected || this.state.countryCodeSelected.length === 0) {\n      this.showAlert(configJSON.goToOtpAfterPhoneValidationErrorTitle, configJSON.goToOtpAfterPhoneValidationErrorBody);\n      return;\n    }\n\n    console.log(this.state.countryCodeSelected); //change status to OTP\n\n    const header = {\n      \"Content-Type\": configJSON.forgotPasswordAPiContentType\n    };\n    const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage)); //GO TO REQUEST STATE\n\n    this.requestPhoneOtpCallId = requestMessage.messageId;\n    requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.passwordRecoveryStartOtpAPiEndPoint);\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(header));\n    this.setState({\n      phoneValue: this.state.countryCodeSelected && values.phone ? this.state.countryCodeSelected + values.phone : \"\"\n    });\n    const data = {\n      type: \"sms_account\",\n      attributes: {\n        full_phone_number: this.state.phoneValue\n      }\n    };\n    const httpBody = {\n      data: data\n    };\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.httpPostMethod);\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(httpBody));\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n  }\n\n  goToChangePasswordAfterOtp(values) {\n    //change status to change password\n    //change status to OTP\n    const header = {\n      \"Content-Type\": configJSON.forgotPasswordAPiContentType\n    };\n    const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage)); //GO TO REQUEST STATE\n\n    this.requestChangePasswordCallId = requestMessage.messageId;\n    requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.passwordRecoveryConfirmOtpAPiEndPoint);\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(header));\n    const data = {\n      token: this.otpToken ? this.otpToken : \"\",\n      otp_code: values.otpCode ? values.otpCode : \"\"\n    };\n    const httpBody = {\n      data: data\n    };\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.httpPostMethod);\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(httpBody));\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n  }\n\n  goToConfirmationAfterPasswordChange(values) {\n    const header = {\n      \"Content-Type\": configJSON.forgotPasswordAPiContentType\n    };\n    const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage)); //GO TO REQUEST STATE\n\n    this.requestGoToConfirmationCallId = requestMessage.messageId;\n    requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.passwordRecoveryChangePasswordAPiEndPoint);\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(header));\n    const data = {\n      token: this.otpToken ? this.otpToken : \"\",\n      new_password: values.password\n    };\n    const httpBody = {\n      data: data\n    };\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.httpPostMethod);\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(httpBody));\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n  }\n\n  goToHome() {\n    const msg = new Message(getName(MessageEnum.NavigationHomeScreenMessage));\n    msg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n    this.send(msg);\n  }\n\n  goToLogin() {\n    const msg = new Message(getName(MessageEnum.NavigationEmailLogInMessage));\n    msg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n    this.send(msg);\n  }\n\n}","map":{"version":3,"sources":["/home/lp-greenapex/gargi/okydpim-36944-react-native/src/packages/blocks/forgot-password/src/ForgotPasswordController.tsx"],"names":["BlockComponent","runEngine","Message","MessageEnum","getName","Yup","configJSON","require","phoneRegExp","passwordInvisibleImage","passwordVisibleImage","ForgotPasswordController","constructor","props","validationAPICallId","requestEmailOtpCallId","requestPhoneOtpCallId","requestChangePasswordCallId","requestGoToConfirmationCallId","otpToken","isChangePassword","labelTextIsAccountRecovery","secondLabelText","thirdLabelText","forthLabelText","fifthLabelText","sixthLabelText","firstInputAutoCompleteType","firstInputKeyboardStyle","firstInputPlaceholder","firstInputErrorColor","buttonTextIsNext","buttonColorForNextButton","secondInputAutoCompleteType","secondInputKeyboardType","secondInputPlaceholder","secondInputErrorColor","thirdInputPlaceholder","thirdInputErrorColor","buttonTitleIsSMSPhoneAccount","buttonTitleIsEmailAccount","labelTextIsPleaseEnterYourNewPassword","labelTextIsYourPasswordHasBeenSuccessfullyChanged","placeholderIsPassword","placeholderIsReTypePassword","buttonTitleIsOk","buttonColorForOkButton","countryCodeSelectorPlaceholder","validationRulesRequest","header","forgotPasswordAPiContentType","requestMessage","RestAPIRequestMessage","messageId","addData","RestAPIResponceEndPointMessage","profileValidationSettingsAPiEndPoint","RestAPIRequestHeaderMessage","JSON","stringify","RestAPIRequestMethodMessage","httpGetMethod","sendMessage","id","subScribedMessages","RestAPIResponceMessage","NavigationPayLoadMessage","CountryCodeMessage","receive","bind","attachBuildingBlock","emailSchema","email","string","pleaseEnterAValidEmail","required","emailIsRequired","phoneSchema","phone","matches","phoneNumberIsNotValid","phoneNumberIsRequired","otpSchema","otpCode","number","min","otpCodeIsRequired","passwordSchema","password","pleaseEnterAPassword","passwordMustBeAtLeast2Characters","confirmPassword","pleaseConfirmYourPassword","when","is","val","length","then","oneOf","ref","passwordsMustMatch","state","accountType","accountStatus","emailValue","phoneValue","countryCodeSelected","passwordRules","token","enablePasswordField","btnConfirmPasswordShowHide","componentDidMount","from","message","otpAuthTkn","getData","AuthTokenDataMessage","setState","NavigationForgotPasswordPageInfo","startForgotPassword","RestAPIResponceDataMessage","responseJson","RestAPIResponceSuccessMessage","undefined","data","passRegex","RegExp","password_validation_regexp","emailRegex","email_validation_regexp","passwordRulesFromValidation","password_validation_rules","invalidEmailAddress","invalidPassword","meta","msg","NavigationMobilePhoneOTPMessage","NavigationPropsMessage","AuthTokenEmailMessage","EnterOTPAsForgotPasswordMessage","send","errors","parseApiErrorResponse","errorReponse","RestAPIResponceErrorMessage","parseApiCatchErrorResponse","AuthTokenPhoneNumberMessage","selectedCode","CountyCodeDataMessage","indexOf","split","goToOtpAfterEmailValidation","values","passwordRecoveryStartOtpAPiEndPoint","type","attributes","httpBody","httpPostMethod","RestAPIRequestBodyMessage","goToOtpAfterPhoneValidation","showAlert","goToOtpAfterPhoneValidationErrorTitle","goToOtpAfterPhoneValidationErrorBody","console","log","full_phone_number","goToChangePasswordAfterOtp","passwordRecoveryConfirmOtpAPiEndPoint","otp_code","goToConfirmationAfterPasswordChange","passwordRecoveryChangePasswordAPiEndPoint","new_password","goToHome","NavigationHomeScreenMessage","goToLogin","NavigationEmailLogInMessage"],"mappings":";;AAAA,SAASA,cAAT,QAA+B,uCAA/B;AAEA,SAASC,SAAT,QAA0B,kCAA1B;AACA,SAASC,OAAT,QAAwB,gCAAxB;AACA,OAAOC,WAAP,IACEC,OADF,QAEO,6CAFP,C,CAIA;;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB,C,CACA;;AAEA,OAAO,MAAMC,UAAU,GAAGC,OAAO,CAAC,UAAD,CAA1B;AAgCP;AACA,MAAMC,WAAW,GAAG,yGAApB;;AACA,MAAMC,sBAAsB,GAAGF,OAAO,CAAC,qCAAD,CAAtC;;AACA,MAAMG,oBAAoB,GAAGH,OAAO,CAAC,mCAAD,CAApC,C,CACA;;;AAEA,eAAe,MAAMI,wBAAN,SAAuCX,cAAvC,CAIb;AACA;AASA;AAkCA;AAEAY,EAAAA,WAAW,CAACC,KAAD,EAAe;AACxB,UAAMA,KAAN;AADwB,SA5C1BC,mBA4C0B;AAAA,SA3C1BC,qBA2C0B;AAAA,SA1C1BC,qBA0C0B;AAAA,SAzC1BC,2BAyC0B;AAAA,SAxC1BC,6BAwC0B;AAAA,SAvC1BC,QAuC0B;AAAA,SAtC1BC,gBAsC0B;AAAA,SAnC1BC,0BAmC0B,GAnCWf,UAAU,CAACe,0BAmCtB;AAAA,SAlC1BC,eAkC0B,GAlCAhB,UAAU,CAACgB,eAkCX;AAAA,SAjC1BC,cAiC0B,GAjCDjB,UAAU,CAACiB,cAiCV;AAAA,SAhC1BC,cAgC0B,GAhCDlB,UAAU,CAACkB,cAgCV;AAAA,SA/B1BC,cA+B0B,GA/BDnB,UAAU,CAACmB,cA+BV;AAAA,SA9B1BC,cA8B0B,GA9BDpB,UAAU,CAACoB,cA8BV;AAAA,SA7B1BC,0BA6B0B,GA7BQrB,UAAU,CAACqB,0BA6BnB;AAAA,SA5B1BC,uBA4B0B,GA5BKtB,UAAU,CAACsB,uBA4BhB;AAAA,SA3B1BC,qBA2B0B,GA3BMvB,UAAU,CAACuB,qBA2BjB;AAAA,SA1B1BC,oBA0B0B,GA1BExB,UAAU,CAACwB,oBA0Bb;AAAA,SAzB1BC,gBAyB0B,GAzBCzB,UAAU,CAACyB,gBAyBZ;AAAA,SAxB1BC,wBAwB0B,GAxBM1B,UAAU,CAAC0B,wBAwBjB;AAAA,SAvB1BC,2BAuB0B,GAvBS3B,UAAU,CAAC2B,2BAuBpB;AAAA,SAtB1BC,uBAsB0B,GAtBK5B,UAAU,CAAC4B,uBAsBhB;AAAA,SArB1BC,sBAqB0B,GArBO7B,UAAU,CAAC6B,sBAqBlB;AAAA,SApB1BC,qBAoB0B,GApBG9B,UAAU,CAAC8B,qBAoBd;AAAA,SAnB1BC,qBAmB0B,GAnBM/B,UAAU,CAAC+B,qBAmBjB;AAAA,SAlB1BC,oBAkB0B,GAlBEhC,UAAU,CAACgC,oBAkBb;AAAA,SAjB1BC,4BAiB0B,GAhBxBjC,UAAU,CAACiC,4BAgBa;AAAA,SAf1BC,yBAe0B,GAfUlC,UAAU,CAACkC,yBAerB;AAAA,SAd1BC,qCAc0B,GAbxBnC,UAAU,CAACmC,qCAaa;AAAA,SAZ1BC,iDAY0B,GAXxBpC,UAAU,CAACoC,iDAWa;AAAA,SAV1BC,qBAU0B,GAVMrC,UAAU,CAACqC,qBAUjB;AAAA,SAT1BjC,oBAS0B,GATEA,oBASF;AAAA,SAR1BD,sBAQ0B,GARIA,sBAQJ;AAAA,SAP1BmC,2BAO0B,GAPYtC,UAAU,CAACsC,2BAOvB;AAAA,SAN1BC,eAM0B,GANAvC,UAAU,CAACuC,eAMX;AAAA,SAL1BC,sBAK0B,GALIxC,UAAU,CAACwC,sBAKf;AAAA,SAJ1BC,8BAI0B,GAHxBzC,UAAU,CAACyC,8BAGa;;AAAA,SA8E1BC,sBA9E0B,GA8ED,MAAM;AAC7B,YAAMC,MAAM,GAAG;AACb,wBAAgB3C,UAAU,CAAC4C;AADd,OAAf;AAGA,YAAMC,cAAc,GAAG,IAAIjD,OAAJ,CACrBE,OAAO,CAACD,WAAW,CAACiD,qBAAb,CADc,CAAvB;AAGA,WAAKtC,mBAAL,GAA2BqC,cAAc,CAACE,SAA1C;AACAF,MAAAA,cAAc,CAACG,OAAf,CACElD,OAAO,CAACD,WAAW,CAACoD,8BAAb,CADT,EAEEjD,UAAU,CAACkD,oCAFb;AAIAL,MAAAA,cAAc,CAACG,OAAf,CACElD,OAAO,CAACD,WAAW,CAACsD,2BAAb,CADT,EAEEC,IAAI,CAACC,SAAL,CAAeV,MAAf,CAFF;AAKAE,MAAAA,cAAc,CAACG,OAAf,CACElD,OAAO,CAACD,WAAW,CAACyD,2BAAb,CADT,EAEEtD,UAAU,CAACuD,aAFb;AAKA5D,MAAAA,SAAS,CAAC6D,WAAV,CAAsBX,cAAc,CAACY,EAArC,EAAyCZ,cAAzC;AACD,KArGyB;;AAExB,SAAKa,kBAAL,GAA0B,CACxB;AACA5D,IAAAA,OAAO,CAACD,WAAW,CAAC8D,sBAAb,CAFiB,EAGxB7D,OAAO,CAACD,WAAW,CAAC+D,wBAAb,CAHiB,EAIxB9D,OAAO,CAACD,WAAW,CAACgE,kBAAb,CAJiB,CAKxB;AALwB,KAA1B;AAQA,SAAKC,OAAL,GAAe,KAAKA,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAf;AAEApE,IAAAA,SAAS,CAACqE,mBAAV,CAA8B,IAA9B,EAA8C,KAAKN,kBAAnD,EAZwB,CAcxB;AACA;;AACA,QAAIO,WAAW,GAAG;AAChBC,MAAAA,KAAK,EAAEnE,GAAG,CAACoE,MAAJ,GACJD,KADI,CACElE,UAAU,CAACoE,sBADb,EAEJC,QAFI,CAEKrE,UAAU,CAACsE,eAFhB;AADS,KAAlB,CAhBwB,CAsBxB;;AACA,QAAIC,WAAW,GAAG;AAChB;AACA;AAEAC,MAAAA,KAAK,EAAEzE,GAAG,CAACoE,MAAJ,GACJM,OADI,CACIvE,WADJ,EACiBF,UAAU,CAAC0E,qBAD5B,EAEJL,QAFI,CAEKrE,UAAU,CAAC2E,qBAFhB;AAJS,KAAlB,CAvBwB,CAgCxB;;AACA,QAAIC,SAAS,GAAG;AACdC,MAAAA,OAAO,EAAE9E,GAAG,CAAC+E,MAAJ,GACNC,GADM,CACF,CADE,EAENV,QAFM,CAEGrE,UAAU,CAACgF,iBAFd;AADK,KAAhB,CAjCwB,CAuCxB;;AACA,QAAIC,cAAc,GAAG;AACnBC,MAAAA,QAAQ,EAAEnF,GAAG,CAACoE,MAAJ,GACPE,QADO,CACErE,UAAU,CAACmF,oBADb,EAEPJ,GAFO,CAEH,CAFG,EAEA/E,UAAU,CAACoF,gCAFX,CADS;AAInBC,MAAAA,eAAe,EAAEtF,GAAG,CAACoE,MAAJ,GACdE,QADc,CACLrE,UAAU,CAACsF,yBADN,EAEdC,IAFc,CAET,UAFS,EAEG;AAChBC,QAAAA,EAAE,EAAGC,GAAD,IAAUA,GAAG,IAAIA,GAAG,CAACC,MAAJ,GAAa,CAApB,GAAwB,IAAxB,GAA+B,KAD7B;AAEhBC,QAAAA,IAAI,EAAE5F,GAAG,CAACoE,MAAJ,GAAayB,KAAb,CACJ,CAAC7F,GAAG,CAAC8F,GAAJ,CAAQ,UAAR,CAAD,CADI,EAEJ7F,UAAU,CAAC8F,kBAFP;AAFU,OAFH;AAJE,KAArB;AAeA,SAAKC,KAAL,GAAa;AACXC,MAAAA,WAAW,EAAE,KADF;AAEXC,MAAAA,aAAa,EAAE,mBAFJ;AAGXC,MAAAA,UAAU,EAAE,EAHD;AAIXC,MAAAA,UAAU,EAAE,EAJD;AAKXC,MAAAA,mBAAmB,EAAE,EALV;AAMXC,MAAAA,aAAa,EAAE,EANJ;AAOXpC,MAAAA,WAAW,EAAEA,WAPF;AAQXM,MAAAA,WAAW,EAAEA,WARF;AASXK,MAAAA,SAAS,EAAEA,SATA;AAUXK,MAAAA,cAAc,EAAEA,cAVL;AAWXqB,MAAAA,KAAK,EAAE,EAXI;AAYXC,MAAAA,mBAAmB,EAAE,IAZV;AAaXC,MAAAA,0BAA0B,EAAE;AAbjB,KAAb,CAvDwB,CAsExB;AACD;;AAEKC,EAAAA,iBAAN,GAA0B;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACxB,0DADwB,CAExB;;;AAFwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAGzB;;AA2BK3C,EAAAA,OAAN,CAAc4C,IAAd,EAA4BC,OAA5B,EAA8C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACxC7G,OAAO,CAACD,WAAW,CAAC+D,wBAAb,CAAP,KAAkD+C,OAAO,CAAClD,EADlB;AAAA;AAAA;AAAA;;AAEpCmD,YAAAA,UAFoC,GAEvBD,OAAO,CAACE,OAAR,CACjB/G,OAAO,CAACD,WAAW,CAACiH,oBAAb,CADU,CAFuB;;AAM1C,gBAAIF,UAAU,IAAIA,UAAU,CAAClB,MAAX,GAAoB,CAAtC,EAAyC;AACvC,cAAA,MAAI,CAACqB,QAAL,CAAc;AAAET,gBAAAA,KAAK,EAAEM;AAAT,eAAd;;AACA,kBAAI,MAAI,CAAC9F,gBAAT,EAA2B;AACzB,gBAAA,MAAI,CAACiG,QAAL,CAAc;AAAEd,kBAAAA,aAAa,EAAE;AAAjB,iBAAd;AACD;;AACD,cAAA,MAAI,CAACpF,QAAL,GAAgB,MAAI,CAACkF,KAAL,CAAWO,KAA3B,CALuC,CAMvC;AACD,aAPD,MAOO;AACCN,cAAAA,WADD,GACeW,OAAO,CAACE,OAAR,CAClB/G,OAAO,CAACD,WAAW,CAACmH,gCAAb,CADW,CADf;;AAIL,kBAAIhB,WAAJ,EAAiB;AACf,gBAAA,MAAI,CAACiB,mBAAL,CAAyBjB,WAAzB;AACD;AACF;;AApByC;AAAA;;AAAA;AAAA,kBAsB1ClG,OAAO,CAACD,WAAW,CAAC8D,sBAAb,CAAP,KAAgDgD,OAAO,CAAClD,EAAxD,IACA,MAAI,CAACjD,mBADL,IAEA,MAAI,CAACA,mBAAL,KACEmG,OAAO,CAACE,OAAR,CAAgB/G,OAAO,CAACD,WAAW,CAACqH,0BAAb,CAAvB,CAzBwC;AAAA;AAAA;AAAA;;AA2BtCC,YAAAA,YA3BsC,GA2BvBR,OAAO,CAACE,OAAR,CACjB/G,OAAO,CAACD,WAAW,CAACuH,6BAAb,CADU,CA3BuB;;AAAA,kBA+BtCD,YAAY,KAAKE,SA/BqB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAmC1C,gBAAIF,YAAY,IAAIA,YAAY,CAACG,IAAb,CAAkB,CAAlB,CAApB,EAA0C;AAClCC,cAAAA,SADkC,GACtBC,MAAM,CACtBL,YAAY,CAACG,IAAb,CAAkB,CAAlB,EAAqBG,0BADC,CADgB;AAIlCC,cAAAA,UAJkC,GAIrBF,MAAM,CAACL,YAAY,CAACG,IAAb,CAAkB,CAAlB,EAAqBK,uBAAtB,CAJe;AAKlCC,cAAAA,2BALkC,GAMtCT,YAAY,CAACG,IAAb,CAAkB,CAAlB,EAAqBO,yBANiB;;AAQxC,cAAA,MAAI,CAACd,QAAL,CAAc;AACZ;AACA9C,gBAAAA,WAAW,EAAE;AACXC,kBAAAA,KAAK,EAAEnE,GAAG,CAACoE,MAAJ,GACJD,KADI,CACElE,UAAU,CAACoE,sBADb,EAEJC,QAFI,CAEKrE,UAAU,CAACsE,eAFhB,EAGJG,OAHI,CAGIiD,UAHJ,EAGgB1H,UAAU,CAAC8H,mBAH3B;AADI,iBAFD;AAQZ;AACA7C,gBAAAA,cAAc,EAAE;AACdC,kBAAAA,QAAQ,EAAEnF,GAAG,CAACoE,MAAJ,GACPE,QADO,CACErE,UAAU,CAACmF,oBADb,EAEPV,OAFO,CAEC8C,SAFD,EAEYvH,UAAU,CAAC+H,eAFvB,CADI;AAKd1C,kBAAAA,eAAe,EAAEtF,GAAG,CAACoE,MAAJ,GACdE,QADc,CACLrE,UAAU,CAACsF,yBADN,EAEdC,IAFc,CAET,UAFS,EAEG;AAChBC,oBAAAA,EAAE,EAAGC,GAAD,IAAUA,GAAG,IAAIA,GAAG,CAACC,MAAJ,GAAa,CAApB,GAAwB,IAAxB,GAA+B,KAD7B;AAEhBC,oBAAAA,IAAI,EAAE5F,GAAG,CAACoE,MAAJ,GAAayB,KAAb,CACJ,CAAC7F,GAAG,CAAC8F,GAAJ,CAAQ,UAAR,CAAD,CADI,EAEJ7F,UAAU,CAAC8F,kBAFP;AAFU,mBAFH;AALH,iBATJ;AAwBZO,gBAAAA,aAAa,EAAEuB;AAxBH,eAAd;AA0BD;;AArEyC;AAAA;;AAAA;AAsErC,gBACL9H,OAAO,CAACD,WAAW,CAAC8D,sBAAb,CAAP,KAAgDgD,OAAO,CAAClD,EAAxD,IACA,MAAI,CAAChD,qBAAL,KAA+B,IAD/B,IAEA,MAAI,CAACA,qBAAL,KACEkG,OAAO,CAACE,OAAR,CAAgB/G,OAAO,CAACD,WAAW,CAACqH,0BAAb,CAAvB,CAJG,EAKL;AACA;AACIC,cAAAA,YAFJ,GAEmBR,OAAO,CAACE,OAAR,CACjB/G,OAAO,CAACD,WAAW,CAACuH,6BAAb,CADU,CAFnB;;AAMA,kBACED,YAAY,KAAKE,SAAjB,IACAF,YAAY,CAACa,IADb,IAEAb,YAAY,CAACa,IAAb,CAAkB1B,KAHpB,EAIE;AACA,gBAAA,MAAI,CAACzF,QAAL,GAAgBsG,YAAY,CAACa,IAAb,CAAkB1B,KAAlC;;AAEA,gBAAA,MAAI,CAACS,QAAL,CAAc;AAAET,kBAAAA,KAAK,EAAE,MAAI,CAACzF;AAAd,iBAAd,EAHA,CAKA;;;AACMoH,gBAAAA,GANN,GAMqB,IAAIrI,OAAJ,CACnBE,OAAO,CAACD,WAAW,CAACqI,+BAAb,CADY,CANrB;AAUAD,gBAAAA,GAAG,CAACjF,OAAJ,CACElD,OAAO,CAACD,WAAW,CAACiH,oBAAb,CADT,EAEE,MAAI,CAACf,KAAL,CAAWO,KAFb;AAKA2B,gBAAAA,GAAG,CAACjF,OAAJ,CAAYlD,OAAO,CAACD,WAAW,CAACsI,sBAAb,CAAnB,EAAyD,MAAI,CAAC5H,KAA9D;AAEA0H,gBAAAA,GAAG,CAACjF,OAAJ,CACElD,OAAO,CAACD,WAAW,CAACuI,qBAAb,CADT,EAEE,MAAI,CAACrC,KAAL,CAAWG,UAFb;AAKA+B,gBAAAA,GAAG,CAACjF,OAAJ,CAAYlD,OAAO,CAACD,WAAW,CAACwI,+BAAb,CAAnB,EAAkE,IAAlE;;AAEA,gBAAA,MAAI,CAACC,IAAL,CAAUL,GAAV;AACD,eA7BD,CA8BA;AA9BA,mBA+BK,IAAId,YAAY,IAAIA,YAAY,CAACoB,MAAjC,EAAyC;AAC5C,kBAAA,MAAI,CAACC,qBAAL,CAA2BrB,YAA3B;AACD,iBAFI,MAEE;AACDsB,kBAAAA,YADC,GACc9B,OAAO,CAACE,OAAR,CACjB/G,OAAO,CAACD,WAAW,CAAC6I,2BAAb,CADU,CADd;;AAKL,kBAAA,MAAI,CAACC,0BAAL,CAAgCF,YAAhC;AACD;AACF,aAnDM,MAmDA,IACL3I,OAAO,CAACD,WAAW,CAAC8D,sBAAb,CAAP,KAAgDgD,OAAO,CAAClD,EAAxD,IACA,MAAI,CAAC/C,qBAAL,KAA+B,IAD/B,IAEA,MAAI,CAACA,qBAAL,KACEiG,OAAO,CAACE,OAAR,CAAgB/G,OAAO,CAACD,WAAW,CAACqH,0BAAb,CAAvB,CAJG,EAKL;AACA;AACIC,cAAAA,YAFJ,GAEmBR,OAAO,CAACE,OAAR,CACjB/G,OAAO,CAACD,WAAW,CAACuH,6BAAb,CADU,CAFnB;;AAMA,kBACED,YAAY,KAAKE,SAAjB,IACAF,YAAY,CAACa,IADb,IAEAb,YAAY,CAACa,IAAb,CAAkB1B,KAHpB,EAIE;AACA,gBAAA,MAAI,CAACzF,QAAL,GAAgBsG,YAAY,CAACa,IAAb,CAAkB1B,KAAlC;;AACA,gBAAA,MAAI,CAACS,QAAL,CAAc;AAAET,kBAAAA,KAAK,EAAE,MAAI,CAACzF;AAAd,iBAAd;;AAEMoH,gBAAAA,GAJN,GAIqB,IAAIrI,OAAJ,CACnBE,OAAO,CAACD,WAAW,CAACqI,+BAAb,CADY,CAJrB;AAOAD,gBAAAA,GAAG,CAACjF,OAAJ,CACElD,OAAO,CAACD,WAAW,CAACiH,oBAAb,CADT,EAEE,MAAI,CAACf,KAAL,CAAWO,KAFb;AAKA2B,gBAAAA,GAAG,CAACjF,OAAJ,CAAYlD,OAAO,CAACD,WAAW,CAACsI,sBAAb,CAAnB,EAAyD,MAAI,CAAC5H,KAA9D;AAEA0H,gBAAAA,GAAG,CAACjF,OAAJ,CACElD,OAAO,CAACD,WAAW,CAAC+I,2BAAb,CADT,EAEE,MAAI,CAAC7C,KAAL,CAAWI,UAFb;AAKA8B,gBAAAA,GAAG,CAACjF,OAAJ,CAAYlD,OAAO,CAACD,WAAW,CAACwI,+BAAb,CAAnB,EAAkE,IAAlE;;AAEA,gBAAA,MAAI,CAACC,IAAL,CAAUL,GAAV;AACD,eA1BD,CA2BA;AA3BA,mBA4BK,IAAId,YAAY,IAAIA,YAAY,CAACoB,MAAjC,EAAyC;AAC5C,kBAAA,MAAI,CAACC,qBAAL,CAA2BrB,YAA3B;AACD,iBAFI,MAEE;AACDsB,kBAAAA,YADC,GACc9B,OAAO,CAACE,OAAR,CACjB/G,OAAO,CAACD,WAAW,CAAC6I,2BAAb,CADU,CADd;;AAKL,kBAAA,MAAI,CAACC,0BAAL,CAAgCF,YAAhC;AACD;AACF,aAhDM,MAgDA,IACL3I,OAAO,CAACD,WAAW,CAAC8D,sBAAb,CAAP,KAAgDgD,OAAO,CAAClD,EAAxD,IACA,MAAI,CAAC7C,6BAAL,KAAuC,IADvC,IAEA,MAAI,CAACA,6BAAL,KACE+F,OAAO,CAACE,OAAR,CAAgB/G,OAAO,CAACD,WAAW,CAACqH,0BAAb,CAAvB,CAJG,EAKL;AACA;AACIC,cAAAA,YAFJ,GAEmBR,OAAO,CAACE,OAAR,CACjB/G,OAAO,CAACD,WAAW,CAACuH,6BAAb,CADU,CAFnB;;AAKA,kBAAID,YAAY,KAAKE,SAAjB,IAA8BF,YAAY,CAACG,IAA/C,EAAqD;AACnD,gBAAA,MAAI,CAACP,QAAL,CAAc;AACZd,kBAAAA,aAAa,EAAE;AADH,iBAAd;AAGD,eAJD,MAIO,IAAIkB,YAAY,KAAKE,SAAjB,IAA8BF,YAAY,CAACoB,MAA/C,EAAuD;AAC5D,gBAAA,MAAI,CAACC,qBAAL,CAA2BrB,YAA3B;AACD,eAFM,MAEA;AACDsB,gBAAAA,YADC,GACc9B,OAAO,CAACE,OAAR,CACjB/G,OAAO,CAACD,WAAW,CAAC6I,2BAAb,CADU,CADd;;AAKL,gBAAA,MAAI,CAACC,0BAAL,CAAgCF,YAAhC;AACD;AACF,aAvBM,MAuBA,IAAI3I,OAAO,CAACD,WAAW,CAACgE,kBAAb,CAAP,KAA4C8C,OAAO,CAAClD,EAAxD,EAA4D;AAC7DoF,cAAAA,YAD6D,GAC9ClC,OAAO,CAACE,OAAR,CACjB/G,OAAO,CAACD,WAAW,CAACiJ,qBAAb,CADU,CAD8C;;AAKjE,kBAAID,YAAY,KAAKxB,SAArB,EAAgC;AAC9B,gBAAA,MAAI,CAACN,QAAL,CAAc;AACZX,kBAAAA,mBAAmB,EACjByC,YAAY,CAACE,OAAb,CAAqB,GAArB,IAA4B,CAA5B,GACIF,YAAY,CAACG,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CADJ,GAEIH;AAJM,iBAAd;AAMD;AACF;;AA7M2C;AAAA;AAAA;AAAA;AAAA;AAAA;AA8M7C;;AAED5B,EAAAA,mBAAmB,CAACjB,WAAD,EAAsB;AACvC,SAAKe,QAAL,CAAc;AACZd,MAAAA,aAAa,EAAED,WAAW,KAAK,KAAhB,GAAwB,YAAxB,GAAuC;AAD1C,KAAd;AAGD;;AAEDiD,EAAAA,2BAA2B,CAACC,MAAD,EAAiD;AAC1E;AACA,UAAMvG,MAAM,GAAG;AACb,sBAAgB3C,UAAU,CAAC4C;AADd,KAAf;AAGA,UAAMC,cAAc,GAAG,IAAIjD,OAAJ,CACrBE,OAAO,CAACD,WAAW,CAACiD,qBAAb,CADc,CAAvB,CAL0E,CAQ1E;;AACA,SAAKrC,qBAAL,GAA6BoC,cAAc,CAACE,SAA5C;AACAF,IAAAA,cAAc,CAACG,OAAf,CACElD,OAAO,CAACD,WAAW,CAACoD,8BAAb,CADT,EAEEjD,UAAU,CAACmJ,mCAFb;AAIAtG,IAAAA,cAAc,CAACG,OAAf,CACElD,OAAO,CAACD,WAAW,CAACsD,2BAAb,CADT,EAEEC,IAAI,CAACC,SAAL,CAAeV,MAAf,CAFF;AAKA,SAAKoE,QAAL,CAAc;AACZb,MAAAA,UAAU,EAAEgD,MAAM,CAAChF,KAAP,GAAegF,MAAM,CAAChF,KAAtB,GAA8B;AAD9B,KAAd;AAIA,UAAMoD,IAAI,GAAG;AACX8B,MAAAA,IAAI,EAAEF,MAAM,CAAClD,WAAP,GAAqBkD,MAAM,CAAClD,WAA5B,GAA0C,eADrC;AAEXqD,MAAAA,UAAU,EAAE;AACVnF,QAAAA,KAAK,EAAEgF,MAAM,CAAChF,KAAP,GAAegF,MAAM,CAAChF,KAAtB,GAA8B;AAD3B;AAFD,KAAb;AAOA,UAAMoF,QAAQ,GAAG;AACfhC,MAAAA,IAAI,EAAEA;AADS,KAAjB;AAIAzE,IAAAA,cAAc,CAACG,OAAf,CACElD,OAAO,CAACD,WAAW,CAACyD,2BAAb,CADT,EAEEtD,UAAU,CAACuJ,cAFb;AAKA1G,IAAAA,cAAc,CAACG,OAAf,CACElD,OAAO,CAACD,WAAW,CAAC2J,yBAAb,CADT,EAEEpG,IAAI,CAACC,SAAL,CAAeiG,QAAf,CAFF;AAKA3J,IAAAA,SAAS,CAAC6D,WAAV,CAAsBX,cAAc,CAACY,EAArC,EAAyCZ,cAAzC;AACD;;AAED4G,EAAAA,2BAA2B,CAACP,MAAD,EAA4B;AACrD;AACA,QACE,CAAC,KAAKnD,KAAL,CAAWK,mBAAZ,IACA,KAAKL,KAAL,CAAWK,mBAAX,CAA+BV,MAA/B,KAA0C,CAF5C,EAGE;AACA,WAAKgE,SAAL,CACE1J,UAAU,CAAC2J,qCADb,EAEE3J,UAAU,CAAC4J,oCAFb;AAIA;AACD;;AACDC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAK/D,KAAL,CAAWK,mBAAvB,EAZqD,CAarD;;AACA,UAAMzD,MAAM,GAAG;AACb,sBAAgB3C,UAAU,CAAC4C;AADd,KAAf;AAGA,UAAMC,cAAc,GAAG,IAAIjD,OAAJ,CACrBE,OAAO,CAACD,WAAW,CAACiD,qBAAb,CADc,CAAvB,CAjBqD,CAoBrD;;AACA,SAAKpC,qBAAL,GAA6BmC,cAAc,CAACE,SAA5C;AACAF,IAAAA,cAAc,CAACG,OAAf,CACElD,OAAO,CAACD,WAAW,CAACoD,8BAAb,CADT,EAEEjD,UAAU,CAACmJ,mCAFb;AAIAtG,IAAAA,cAAc,CAACG,OAAf,CACElD,OAAO,CAACD,WAAW,CAACsD,2BAAb,CADT,EAEEC,IAAI,CAACC,SAAL,CAAeV,MAAf,CAFF;AAKA,SAAKoE,QAAL,CAAc;AACZZ,MAAAA,UAAU,EACR,KAAKJ,KAAL,CAAWK,mBAAX,IAAkC8C,MAAM,CAAC1E,KAAzC,GACI,KAAKuB,KAAL,CAAWK,mBAAX,GAAiC8C,MAAM,CAAC1E,KAD5C,GAEI;AAJM,KAAd;AAOA,UAAM8C,IAAI,GAAG;AACX8B,MAAAA,IAAI,EAAE,aADK;AAEXC,MAAAA,UAAU,EAAE;AACVU,QAAAA,iBAAiB,EAAE,KAAKhE,KAAL,CAAWI;AADpB;AAFD,KAAb;AAOA,UAAMmD,QAAQ,GAAG;AACfhC,MAAAA,IAAI,EAAEA;AADS,KAAjB;AAIAzE,IAAAA,cAAc,CAACG,OAAf,CACElD,OAAO,CAACD,WAAW,CAACyD,2BAAb,CADT,EAEEtD,UAAU,CAACuJ,cAFb;AAKA1G,IAAAA,cAAc,CAACG,OAAf,CACElD,OAAO,CAACD,WAAW,CAAC2J,yBAAb,CADT,EAEEpG,IAAI,CAACC,SAAL,CAAeiG,QAAf,CAFF;AAKA3J,IAAAA,SAAS,CAAC6D,WAAV,CAAsBX,cAAc,CAACY,EAArC,EAAyCZ,cAAzC;AACD;;AAEDmH,EAAAA,0BAA0B,CAACd,MAAD,EAA8B;AACtD;AACA;AACA,UAAMvG,MAAM,GAAG;AACb,sBAAgB3C,UAAU,CAAC4C;AADd,KAAf;AAGA,UAAMC,cAAc,GAAG,IAAIjD,OAAJ,CACrBE,OAAO,CAACD,WAAW,CAACiD,qBAAb,CADc,CAAvB,CANsD,CAStD;;AACA,SAAKnC,2BAAL,GAAmCkC,cAAc,CAACE,SAAlD;AAEAF,IAAAA,cAAc,CAACG,OAAf,CACElD,OAAO,CAACD,WAAW,CAACoD,8BAAb,CADT,EAEEjD,UAAU,CAACiK,qCAFb;AAKApH,IAAAA,cAAc,CAACG,OAAf,CACElD,OAAO,CAACD,WAAW,CAACsD,2BAAb,CADT,EAEEC,IAAI,CAACC,SAAL,CAAeV,MAAf,CAFF;AAKA,UAAM2E,IAAI,GAAG;AACXhB,MAAAA,KAAK,EAAE,KAAKzF,QAAL,GAAgB,KAAKA,QAArB,GAAgC,EAD5B;AAEXqJ,MAAAA,QAAQ,EAAEhB,MAAM,CAACrE,OAAP,GAAiBqE,MAAM,CAACrE,OAAxB,GAAkC;AAFjC,KAAb;AAKA,UAAMyE,QAAQ,GAAG;AACfhC,MAAAA,IAAI,EAAEA;AADS,KAAjB;AAIAzE,IAAAA,cAAc,CAACG,OAAf,CACElD,OAAO,CAACD,WAAW,CAACyD,2BAAb,CADT,EAEEtD,UAAU,CAACuJ,cAFb;AAKA1G,IAAAA,cAAc,CAACG,OAAf,CACElD,OAAO,CAACD,WAAW,CAAC2J,yBAAb,CADT,EAEEpG,IAAI,CAACC,SAAL,CAAeiG,QAAf,CAFF;AAKA3J,IAAAA,SAAS,CAAC6D,WAAV,CAAsBX,cAAc,CAACY,EAArC,EAAyCZ,cAAzC;AACD;;AAEDsH,EAAAA,mCAAmC,CAACjB,MAAD,EAGhC;AACD,UAAMvG,MAAM,GAAG;AACb,sBAAgB3C,UAAU,CAAC4C;AADd,KAAf;AAGA,UAAMC,cAAc,GAAG,IAAIjD,OAAJ,CACrBE,OAAO,CAACD,WAAW,CAACiD,qBAAb,CADc,CAAvB,CAJC,CAOD;;AACA,SAAKlC,6BAAL,GAAqCiC,cAAc,CAACE,SAApD;AAEAF,IAAAA,cAAc,CAACG,OAAf,CACElD,OAAO,CAACD,WAAW,CAACoD,8BAAb,CADT,EAEEjD,UAAU,CAACoK,yCAFb;AAKAvH,IAAAA,cAAc,CAACG,OAAf,CACElD,OAAO,CAACD,WAAW,CAACsD,2BAAb,CADT,EAEEC,IAAI,CAACC,SAAL,CAAeV,MAAf,CAFF;AAKA,UAAM2E,IAAI,GAAG;AACXhB,MAAAA,KAAK,EAAE,KAAKzF,QAAL,GAAgB,KAAKA,QAArB,GAAgC,EAD5B;AAEXwJ,MAAAA,YAAY,EAAEnB,MAAM,CAAChE;AAFV,KAAb;AAKA,UAAMoE,QAAQ,GAAG;AACfhC,MAAAA,IAAI,EAAEA;AADS,KAAjB;AAIAzE,IAAAA,cAAc,CAACG,OAAf,CACElD,OAAO,CAACD,WAAW,CAACyD,2BAAb,CADT,EAEEtD,UAAU,CAACuJ,cAFb;AAKA1G,IAAAA,cAAc,CAACG,OAAf,CACElD,OAAO,CAACD,WAAW,CAAC2J,yBAAb,CADT,EAEEpG,IAAI,CAACC,SAAL,CAAeiG,QAAf,CAFF;AAKA3J,IAAAA,SAAS,CAAC6D,WAAV,CAAsBX,cAAc,CAACY,EAArC,EAAyCZ,cAAzC;AACD;;AAEDyH,EAAAA,QAAQ,GAAG;AACT,UAAMrC,GAAY,GAAG,IAAIrI,OAAJ,CACnBE,OAAO,CAACD,WAAW,CAAC0K,2BAAb,CADY,CAArB;AAGAtC,IAAAA,GAAG,CAACjF,OAAJ,CAAYlD,OAAO,CAACD,WAAW,CAACsI,sBAAb,CAAnB,EAAyD,KAAK5H,KAA9D;AACA,SAAK+H,IAAL,CAAUL,GAAV;AACD;;AAEDuC,EAAAA,SAAS,GAAG;AACV,UAAMvC,GAAY,GAAG,IAAIrI,OAAJ,CACnBE,OAAO,CAACD,WAAW,CAAC4K,2BAAb,CADY,CAArB;AAGAxC,IAAAA,GAAG,CAACjF,OAAJ,CAAYlD,OAAO,CAACD,WAAW,CAACsI,sBAAb,CAAnB,EAAyD,KAAK5H,KAA9D;AACA,SAAK+H,IAAL,CAAUL,GAAV;AACD;;AA/jBD","sourcesContent":["import { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport { IBlock } from \"../../../framework/src/IBlock\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nimport { Message } from \"../../../framework/src/Message\";\nimport MessageEnum, {\n  getName,\n} from \"../../../framework/src/Messages/MessageEnum\";\n\n// Customizable Area Start\nimport * as Yup from \"yup\";\n// Customizable Area End\n\nexport const configJSON = require(\"./config\");\n\nexport interface Props {\n  navigation: any;\n  // Customizable Area Start\n  // Customizable Area End\n}\n\ninterface S {\n  // Customizable Area Start\n  accountType: string;\n  emailSchema: any;\n  phoneSchema: any;\n  otpSchema: any;\n  passwordSchema: any;\n  accountStatus: any;\n  passwordRules: any;\n  emailValue: any;\n  phoneValue: any;\n  countryCodeSelected: any;\n  token: any;\n  enablePasswordField: Boolean;\n  btnConfirmPasswordShowHide: Boolean;\n  // Customizable Area End\n}\n\ninterface SS {\n  // Customizable Area Start\n  navigation: any;\n  // Customizable Area End\n}\n\n// Customizable Area Start\nconst phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\nconst passwordInvisibleImage = require(\"../assets/ic_password_invisible.png\");\nconst passwordVisibleImage = require(\"../assets/ic_password_visible.png\");\n// Customizable Area End\n\nexport default class ForgotPasswordController extends BlockComponent<\n  Props,\n  S,\n  SS\n> {\n  // Customizable Area Start\n  validationAPICallId: any;\n  requestEmailOtpCallId: any;\n  requestPhoneOtpCallId: any;\n  requestChangePasswordCallId: any;\n  requestGoToConfirmationCallId: any;\n  otpToken: any;\n  isChangePassword: boolean;\n\n  //Properties from config\n  labelTextIsAccountRecovery: string = configJSON.labelTextIsAccountRecovery;\n  secondLabelText: string = configJSON.secondLabelText;\n  thirdLabelText: string = configJSON.thirdLabelText;\n  forthLabelText: string = configJSON.forthLabelText;\n  fifthLabelText: string = configJSON.fifthLabelText;\n  sixthLabelText: string = configJSON.sixthLabelText;\n  firstInputAutoCompleteType: any = configJSON.firstInputAutoCompleteType;\n  firstInputKeyboardStyle: any = configJSON.firstInputKeyboardStyle;\n  firstInputPlaceholder: string = configJSON.firstInputPlaceholder;\n  firstInputErrorColor: any = configJSON.firstInputErrorColor;\n  buttonTextIsNext: string = configJSON.buttonTextIsNext;\n  buttonColorForNextButton: any = configJSON.buttonColorForNextButton;\n  secondInputAutoCompleteType: any = configJSON.secondInputAutoCompleteType;\n  secondInputKeyboardType: any = configJSON.secondInputKeyboardType;\n  secondInputPlaceholder: string = configJSON.secondInputPlaceholder;\n  secondInputErrorColor: any = configJSON.secondInputErrorColor;\n  thirdInputPlaceholder: string = configJSON.thirdInputPlaceholder;\n  thirdInputErrorColor: any = configJSON.thirdInputErrorColor;\n  buttonTitleIsSMSPhoneAccount: string =\n    configJSON.buttonTitleIsSMSPhoneAccount;\n  buttonTitleIsEmailAccount: string = configJSON.buttonTitleIsEmailAccount;\n  labelTextIsPleaseEnterYourNewPassword: string =\n    configJSON.labelTextIsPleaseEnterYourNewPassword;\n  labelTextIsYourPasswordHasBeenSuccessfullyChanged: string =\n    configJSON.labelTextIsYourPasswordHasBeenSuccessfullyChanged;\n  placeholderIsPassword: string = configJSON.placeholderIsPassword;\n  passwordVisibleImage: any = passwordVisibleImage;\n  passwordInvisibleImage: any = passwordInvisibleImage;\n  placeholderIsReTypePassword: string = configJSON.placeholderIsReTypePassword;\n  buttonTitleIsOk: string = configJSON.buttonTitleIsOk;\n  buttonColorForOkButton: any = configJSON.buttonColorForOkButton;\n  countryCodeSelectorPlaceholder: string =\n    configJSON.countryCodeSelectorPlaceholder;\n  // Customizable Area End\n\n  constructor(props: Props) {\n    super(props);\n    this.subScribedMessages = [\n      // Customizable Area Start\n      getName(MessageEnum.RestAPIResponceMessage),\n      getName(MessageEnum.NavigationPayLoadMessage),\n      getName(MessageEnum.CountryCodeMessage),\n      // Customizable Area End\n    ];\n\n    this.receive = this.receive.bind(this);\n\n    runEngine.attachBuildingBlock(this as IBlock, this.subScribedMessages);\n\n    // Customizable Area Start\n    //email schema\n    let emailSchema = {\n      email: Yup.string()\n        .email(configJSON.pleaseEnterAValidEmail)\n        .required(configJSON.emailIsRequired),\n    };\n\n    //phone schema\n    let phoneSchema = {\n      // countryCode: Yup.number()\n      // .required(\"Country code is required\"),\n\n      phone: Yup.string()\n        .matches(phoneRegExp, configJSON.phoneNumberIsNotValid)\n        .required(configJSON.phoneNumberIsRequired),\n    };\n\n    //otpSchema\n    let otpSchema = {\n      otpCode: Yup.number()\n        .min(4)\n        .required(configJSON.otpCodeIsRequired),\n    };\n\n    //passwordSchema\n    let passwordSchema = {\n      password: Yup.string()\n        .required(configJSON.pleaseEnterAPassword)\n        .min(2, configJSON.passwordMustBeAtLeast2Characters),\n      confirmPassword: Yup.string()\n        .required(configJSON.pleaseConfirmYourPassword)\n        .when(\"password\", {\n          is: (val) => (val && val.length > 0 ? true : false),\n          then: Yup.string().oneOf(\n            [Yup.ref(\"password\")],\n            configJSON.passwordsMustMatch\n          ),\n        }),\n    };\n\n    this.state = {\n      accountType: \"sms\",\n      accountStatus: \"ChooseAccountType\",\n      emailValue: \"\",\n      phoneValue: \"\",\n      countryCodeSelected: \"\",\n      passwordRules: \"\",\n      emailSchema: emailSchema,\n      phoneSchema: phoneSchema,\n      otpSchema: otpSchema,\n      passwordSchema: passwordSchema,\n      token: \"\",\n      enablePasswordField: true,\n      btnConfirmPasswordShowHide: true,\n    };\n    // Customizable Area End\n  }\n\n  async componentDidMount() {\n    super.componentDidMount();\n    // this.validationRulesRequest();\n  }\n\n  validationRulesRequest = () => {\n    const header = {\n      \"Content-Type\": configJSON.forgotPasswordAPiContentType,\n    };\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n    this.validationAPICallId = requestMessage.messageId;\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.profileValidationSettingsAPiEndPoint\n    );\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(header)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.httpGetMethod\n    );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n  };\n\n  async receive(from: string, message: Message) {\n    if (getName(MessageEnum.NavigationPayLoadMessage) === message.id) {\n      const otpAuthTkn = message.getData(\n        getName(MessageEnum.AuthTokenDataMessage)\n      );\n\n      if (otpAuthTkn && otpAuthTkn.length > 0) {\n        this.setState({ token: otpAuthTkn });\n        if (this.isChangePassword) {\n          this.setState({ accountStatus: \"ChangePassword\" });\n        }\n        this.otpToken = this.state.token;\n        // runEngine.debugLog(\"otpAuthTkn\", this.state.token);\n      } else {\n        const accountType = message.getData(\n          getName(MessageEnum.NavigationForgotPasswordPageInfo)\n        );\n        if (accountType) {\n          this.startForgotPassword(accountType);\n        }\n      }\n    } else if (\n      getName(MessageEnum.RestAPIResponceMessage) === message.id &&\n      this.validationAPICallId &&\n      this.validationAPICallId ===\n        message.getData(getName(MessageEnum.RestAPIResponceDataMessage))\n    ) {\n      var responseJson = message.getData(\n        getName(MessageEnum.RestAPIResponceSuccessMessage)\n      );\n\n      if (responseJson === undefined) {\n        return;\n      }\n\n      if (responseJson && responseJson.data[0]) {\n        const passRegex = RegExp(\n          responseJson.data[0].password_validation_regexp\n        );\n        const emailRegex = RegExp(responseJson.data[0].email_validation_regexp);\n        const passwordRulesFromValidation =\n          responseJson.data[0].password_validation_rules;\n\n        this.setState({\n          //email schema\n          emailSchema: {\n            email: Yup.string()\n              .email(configJSON.pleaseEnterAValidEmail)\n              .required(configJSON.emailIsRequired)\n              .matches(emailRegex, configJSON.invalidEmailAddress),\n          },\n          //password schema\n          passwordSchema: {\n            password: Yup.string()\n              .required(configJSON.pleaseEnterAPassword)\n              .matches(passRegex, configJSON.invalidPassword),\n\n            confirmPassword: Yup.string()\n              .required(configJSON.pleaseConfirmYourPassword)\n              .when(\"password\", {\n                is: (val) => (val && val.length > 0 ? true : false),\n                then: Yup.string().oneOf(\n                  [Yup.ref(\"password\")],\n                  configJSON.passwordsMustMatch\n                ),\n              }),\n          },\n          passwordRules: passwordRulesFromValidation,\n        });\n      }\n    } else if (\n      getName(MessageEnum.RestAPIResponceMessage) === message.id &&\n      this.requestEmailOtpCallId !== null &&\n      this.requestEmailOtpCallId ===\n        message.getData(getName(MessageEnum.RestAPIResponceDataMessage))\n    ) {\n      // console.log(\"entered email!!!!\");\n      var responseJson = message.getData(\n        getName(MessageEnum.RestAPIResponceSuccessMessage)\n      );\n\n      if (\n        responseJson !== undefined &&\n        responseJson.meta &&\n        responseJson.meta.token\n      ) {\n        this.otpToken = responseJson.meta.token;\n\n        this.setState({ token: this.otpToken });\n\n        //navigate to OTP page\n        const msg: Message = new Message(\n          getName(MessageEnum.NavigationMobilePhoneOTPMessage)\n        );\n\n        msg.addData(\n          getName(MessageEnum.AuthTokenDataMessage),\n          this.state.token\n        );\n\n        msg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n\n        msg.addData(\n          getName(MessageEnum.AuthTokenEmailMessage),\n          this.state.emailValue\n        );\n\n        msg.addData(getName(MessageEnum.EnterOTPAsForgotPasswordMessage), true);\n\n        this.send(msg);\n      }\n      //error handling\n      else if (responseJson && responseJson.errors) {\n        this.parseApiErrorResponse(responseJson);\n      } else {\n        var errorReponse = message.getData(\n          getName(MessageEnum.RestAPIResponceErrorMessage)\n        );\n\n        this.parseApiCatchErrorResponse(errorReponse);\n      }\n    } else if (\n      getName(MessageEnum.RestAPIResponceMessage) === message.id &&\n      this.requestPhoneOtpCallId !== null &&\n      this.requestPhoneOtpCallId ===\n        message.getData(getName(MessageEnum.RestAPIResponceDataMessage))\n    ) {\n      // console.log(\"entered phone!!!!\");\n      var responseJson = message.getData(\n        getName(MessageEnum.RestAPIResponceSuccessMessage)\n      );\n\n      if (\n        responseJson !== undefined &&\n        responseJson.meta &&\n        responseJson.meta.token\n      ) {\n        this.otpToken = responseJson.meta.token;\n        this.setState({ token: this.otpToken });\n\n        const msg: Message = new Message(\n          getName(MessageEnum.NavigationMobilePhoneOTPMessage)\n        );\n        msg.addData(\n          getName(MessageEnum.AuthTokenDataMessage),\n          this.state.token\n        );\n\n        msg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n\n        msg.addData(\n          getName(MessageEnum.AuthTokenPhoneNumberMessage),\n          this.state.phoneValue\n        );\n\n        msg.addData(getName(MessageEnum.EnterOTPAsForgotPasswordMessage), true);\n\n        this.send(msg);\n      }\n      //error handling\n      else if (responseJson && responseJson.errors) {\n        this.parseApiErrorResponse(responseJson);\n      } else {\n        var errorReponse = message.getData(\n          getName(MessageEnum.RestAPIResponceErrorMessage)\n        );\n\n        this.parseApiCatchErrorResponse(errorReponse);\n      }\n    } else if (\n      getName(MessageEnum.RestAPIResponceMessage) === message.id &&\n      this.requestGoToConfirmationCallId !== null &&\n      this.requestGoToConfirmationCallId ===\n        message.getData(getName(MessageEnum.RestAPIResponceDataMessage))\n    ) {\n      // console.log(\"entered 3\");\n      var responseJson = message.getData(\n        getName(MessageEnum.RestAPIResponceSuccessMessage)\n      );\n      if (responseJson !== undefined && responseJson.data) {\n        this.setState({\n          accountStatus: \"Confirmation\",\n        });\n      } else if (responseJson !== undefined && responseJson.errors) {\n        this.parseApiErrorResponse(responseJson);\n      } else {\n        var errorReponse = message.getData(\n          getName(MessageEnum.RestAPIResponceErrorMessage)\n        );\n\n        this.parseApiCatchErrorResponse(errorReponse);\n      }\n    } else if (getName(MessageEnum.CountryCodeMessage) === message.id) {\n      var selectedCode = message.getData(\n        getName(MessageEnum.CountyCodeDataMessage)\n      );\n\n      if (selectedCode !== undefined) {\n        this.setState({\n          countryCodeSelected:\n            selectedCode.indexOf(\"+\") > 0\n              ? selectedCode.split(\"+\")[1]\n              : selectedCode,\n        });\n      }\n    }\n  }\n\n  startForgotPassword(accountType: String) {\n    this.setState({\n      accountStatus: accountType === \"sms\" ? \"EnterPhone\" : \"EnterEmail\",\n    });\n  }\n\n  goToOtpAfterEmailValidation(values: { accountType: string; email: string }) {\n    //change status to OTP\n    const header = {\n      \"Content-Type\": configJSON.forgotPasswordAPiContentType,\n    };\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n    //GO TO REQUEST STATE\n    this.requestEmailOtpCallId = requestMessage.messageId;\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.passwordRecoveryStartOtpAPiEndPoint\n    );\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(header)\n    );\n\n    this.setState({\n      emailValue: values.email ? values.email : \"\",\n    });\n\n    const data = {\n      type: values.accountType ? values.accountType : \"email_account\",\n      attributes: {\n        email: values.email ? values.email : \"\",\n      },\n    };\n\n    const httpBody = {\n      data: data,\n    };\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.httpPostMethod\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestBodyMessage),\n      JSON.stringify(httpBody)\n    );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n  }\n\n  goToOtpAfterPhoneValidation(values: { phone: string }) {\n    // console.log(\"entered phone validation code\");\n    if (\n      !this.state.countryCodeSelected ||\n      this.state.countryCodeSelected.length === 0\n    ) {\n      this.showAlert(\n        configJSON.goToOtpAfterPhoneValidationErrorTitle,\n        configJSON.goToOtpAfterPhoneValidationErrorBody\n      );\n      return;\n    }\n    console.log(this.state.countryCodeSelected);\n    //change status to OTP\n    const header = {\n      \"Content-Type\": configJSON.forgotPasswordAPiContentType,\n    };\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n    //GO TO REQUEST STATE\n    this.requestPhoneOtpCallId = requestMessage.messageId;\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.passwordRecoveryStartOtpAPiEndPoint\n    );\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(header)\n    );\n\n    this.setState({\n      phoneValue:\n        this.state.countryCodeSelected && values.phone\n          ? this.state.countryCodeSelected + values.phone\n          : \"\",\n    });\n\n    const data = {\n      type: \"sms_account\",\n      attributes: {\n        full_phone_number: this.state.phoneValue,\n      },\n    };\n\n    const httpBody = {\n      data: data,\n    };\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.httpPostMethod\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestBodyMessage),\n      JSON.stringify(httpBody)\n    );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n  }\n\n  goToChangePasswordAfterOtp(values: { otpCode: string }) {\n    //change status to change password\n    //change status to OTP\n    const header = {\n      \"Content-Type\": configJSON.forgotPasswordAPiContentType,\n    };\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n    //GO TO REQUEST STATE\n    this.requestChangePasswordCallId = requestMessage.messageId;\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.passwordRecoveryConfirmOtpAPiEndPoint\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(header)\n    );\n\n    const data = {\n      token: this.otpToken ? this.otpToken : \"\",\n      otp_code: values.otpCode ? values.otpCode : \"\",\n    };\n\n    const httpBody = {\n      data: data,\n    };\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.httpPostMethod\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestBodyMessage),\n      JSON.stringify(httpBody)\n    );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n  }\n\n  goToConfirmationAfterPasswordChange(values: {\n    password: any;\n    confirmPassword: any;\n  }) {\n    const header = {\n      \"Content-Type\": configJSON.forgotPasswordAPiContentType,\n    };\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n    //GO TO REQUEST STATE\n    this.requestGoToConfirmationCallId = requestMessage.messageId;\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.passwordRecoveryChangePasswordAPiEndPoint\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(header)\n    );\n\n    const data = {\n      token: this.otpToken ? this.otpToken : \"\",\n      new_password: values.password,\n    };\n\n    const httpBody = {\n      data: data,\n    };\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.httpPostMethod\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestBodyMessage),\n      JSON.stringify(httpBody)\n    );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n  }\n\n  goToHome() {\n    const msg: Message = new Message(\n      getName(MessageEnum.NavigationHomeScreenMessage)\n    );\n    msg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n    this.send(msg);\n  }\n\n  goToLogin() {\n    const msg: Message = new Message(\n      getName(MessageEnum.NavigationEmailLogInMessage)\n    );\n    msg.addData(getName(MessageEnum.NavigationPropsMessage), this.props);\n    this.send(msg);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}