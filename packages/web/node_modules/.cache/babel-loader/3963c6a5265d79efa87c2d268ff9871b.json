{"ast":null,"code":"var _jsxFileName = \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/packages/components/src/CustomCheckBox.tsx\";\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport CheckBox from \"react-native-web/dist/exports/CheckBox\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Switch from \"react-native-web/dist/exports/Switch\";\nexport default class CustomCheckBox extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isChecked: this.props.isChecked\n    };\n  }\n\n  render() {\n    const testID = this.props.testID;\n\n    if (Platform.OS === 'ios') {\n      return (\n        /*#__PURE__*/\n\n        /* <CheckBoxIos\n            checked={this.state.isChecked}\n            onPress={() => {\n              const value = !this.state.isChecked;\n              this.setState({ isChecked: value });\n              this.props.onChangeValue(value);\n            }}\n          /> */\n        React.createElement(Switch, {\n          testID: testID // eslint-disable-next-line react-native/no-inline-styles\n          ,\n          style: {\n            marginRight: 5,\n            marginLeft: 5\n          },\n          value: this.state.isChecked,\n          onValueChange: value => this.handleValueChange(value),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 9\n          }\n        })\n      );\n    } else {\n      return /*#__PURE__*/React.createElement(CheckBox, {\n        testID: testID // eslint-disable-next-line react-native/no-inline-styles\n        ,\n        style: {\n          marginRight: Platform.OS === \"web\" ? 5 : 0,\n          marginLeft: Platform.OS === \"web\" ? 5 : 0\n        },\n        value: this.state.isChecked,\n        onValueChange: value => this.handleValueChange(value),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 9\n        }\n      });\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (true) {\n      this.setState({\n        isChecked: nextProps.isChecked\n      });\n    }\n  }\n\n  handleValueChange(value) {\n    this.setState({\n      isChecked: value\n    });\n\n    if (this.props.onChangeValue) {\n      this.props.onChangeValue(value);\n    }\n  }\n\n}\nCustomCheckBox.propTypes = {\n  testID: PropTypes.string,\n  isChecked: PropTypes.bool.isRequired,\n  onChangeValue: PropTypes.func.isRequired\n};","map":{"version":3,"sources":["/home/lp-greenapex/gargi/okydpim-36944-react-native/src/packages/components/src/CustomCheckBox.tsx"],"names":["PropTypes","React","Component","CustomCheckBox","constructor","props","state","isChecked","render","testID","Platform","OS","marginRight","marginLeft","value","handleValueChange","componentWillReceiveProps","nextProps","setState","onChangeValue","propTypes","string","bool","isRequired","func"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;AAMA,eAAe,MAAMC,cAAN,SAA6BD,SAA7B,CAAyD;AAOtEE,EAAAA,WAAW,CAACC,KAAD,EAAa;AACtB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,SAAS,EAAE,KAAKF,KAAL,CAAWE;AADX,KAAb;AAGD;;AAEDC,EAAAA,MAAM,GAAG;AAAA,UAECC,MAFD,GAEY,KAAKJ,KAFjB,CAECI,MAFD;;AAIP,QAAIC,QAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B;AACzB;AAAA;;AACE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AAEQ,4BAAC,MAAD;AACE,UAAA,MAAM,EAAEF,MADV,CAEE;AAFF;AAGE,UAAA,KAAK,EAAE;AAAEG,YAAAA,WAAW,EAAE,CAAf;AAAkBC,YAAAA,UAAU,EAAE;AAA9B,WAHT;AAIE,UAAA,KAAK,EAAE,KAAKP,KAAL,CAAWC,SAJpB;AAKE,UAAA,aAAa,EAAEO,KAAK,IAAI,KAAKC,iBAAL,CAAuBD,KAAvB,CAL1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAVF;AAkBD,KAnBD,MAmBO;AACL,0BACE,oBAAC,QAAD;AACE,QAAA,MAAM,EAAEL,MADV,CAEE;AAFF;AAGE,QAAA,KAAK,EAAE;AACLG,UAAAA,WAAW,EAAEF,QAAQ,CAACC,EAAT,KAAgB,KAAhB,GAAwB,CAAxB,GAA4B,CADpC;AAELE,UAAAA,UAAU,EAAEH,QAAQ,CAACC,EAAT,KAAgB,KAAhB,GAAwB,CAAxB,GAA4B;AAFnC,SAHT;AAME,QAAA,KAAK,EAAE,KAAKL,KAAL,CAAWC,SANpB;AAOE,QAAA,aAAa,EAAEO,KAAK,IAAI,KAAKC,iBAAL,CAAuBD,KAAvB,CAP1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAWD;AACF;;AAEDE,EAAAA,yBAAyB,CAACC,SAAD,EAAiB;AACxC,QAAI,IAAJ,EAAU;AACR,WAAKC,QAAL,CAAc;AACZX,QAAAA,SAAS,EAAEU,SAAS,CAACV;AADT,OAAd;AAGD;AACF;;AAEDQ,EAAAA,iBAAiB,CAACD,KAAD,EAAiB;AAChC,SAAKI,QAAL,CAAc;AACZX,MAAAA,SAAS,EAAEO;AADC,KAAd;;AAGA,QAAI,KAAKT,KAAL,CAAWc,aAAf,EAA8B;AAC5B,WAAKd,KAAL,CAAWc,aAAX,CAAyBL,KAAzB;AACD;AACF;;AApEqE;AAAnDX,c,CACZiB,S,GAAY;AACjBX,EAAAA,MAAM,EAAET,SAAS,CAACqB,MADD;AAEjBd,EAAAA,SAAS,EAAEP,SAAS,CAACsB,IAAV,CAAeC,UAFT;AAGjBJ,EAAAA,aAAa,EAAEnB,SAAS,CAACwB,IAAV,CAAeD;AAHb,C","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { CheckBox as CheckBoxIos } from 'react-native-elements';\nimport { CheckBox, Platform, Switch } from 'react-native';\ntype MyProps = { testID:string, isChecked: boolean; onChangeValue?: (value: boolean) => void };\ntype MyState = { isChecked: boolean; onChangeValue?: (value: boolean) => void };\n\nexport default class CustomCheckBox extends Component<MyProps, MyState> {\n  static propTypes = {\n    testID: PropTypes.string, \n    isChecked: PropTypes.bool.isRequired,\n    onChangeValue: PropTypes.func.isRequired\n  };\n\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      isChecked: this.props.isChecked\n    };\n  }\n\n  render() {\n   \n    const { testID } = this.props;\n\n    if (Platform.OS === 'ios') {\n      return (\n        /* <CheckBoxIos\n            checked={this.state.isChecked}\n            onPress={() => {\n              const value = !this.state.isChecked;\n              this.setState({ isChecked: value });\n              this.props.onChangeValue(value);\n            }}\n          /> */\n\n        <Switch\n          testID={testID}\n          // eslint-disable-next-line react-native/no-inline-styles\n          style={{ marginRight: 5, marginLeft: 5 }}\n          value={this.state.isChecked}\n          onValueChange={value => this.handleValueChange(value)}\n        />\n      );\n    } else {\n      return (\n        <CheckBox\n          testID={testID}\n          // eslint-disable-next-line react-native/no-inline-styles\n          style={{\n            marginRight: Platform.OS === \"web\" ? 5 : 0,\n            marginLeft: Platform.OS === \"web\" ? 5 : 0 }}\n          value={this.state.isChecked}\n          onValueChange={value => this.handleValueChange(value)}\n        />\n      );\n    }\n  }\n\n  componentWillReceiveProps(nextProps: any) {\n    if (true) {\n      this.setState({\n        isChecked: nextProps.isChecked\n      });\n    }\n  }\n\n  handleValueChange(value: boolean) {\n    this.setState({\n      isChecked: value\n    });\n    if (this.props.onChangeValue) {\n      this.props.onChangeValue(value);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}