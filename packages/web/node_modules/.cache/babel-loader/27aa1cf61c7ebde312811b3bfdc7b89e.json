{"ast":null,"code":"import _regeneratorRuntime from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport MessageEnum, { getName } from '../../../framework/src/Messages/MessageEnum';\nimport { runEngine } from '../../../framework/src/RunEngine';\nimport { Message } from '../../../framework/src/Message';\nimport { Block } from '../../../framework/src/Block';\nimport { setStorageData } from '../../../framework/src/Utilities';\nexport default class SessionManagerBlock extends Block {\n  constructor() {\n    super();\n    this.sessionToken = void 0;\n    this.sessionData = void 0;\n    runEngine.attachBuildingBlock(this, [getName(MessageEnum.SessionRequestMessage), getName(MessageEnum.SessionSaveMessage)]);\n  }\n\n  static getInstance() {\n    if (!SessionManagerBlock.instance) {\n      SessionManagerBlock.instance = new SessionManagerBlock();\n    }\n\n    return SessionManagerBlock.instance;\n  }\n\n  receive(from, message) {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var uniqueSessionRequestId, sessionResponseMessage, sessionData, sessionToken;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            runEngine.debugLog('SessionManagerBlock', 'Session Rquest Message' + JSON.stringify(message));\n\n            if (getName(MessageEnum.SessionRequestMessage) === message.id) {\n              uniqueSessionRequestId = message.messageId;\n              sessionResponseMessage = new Message(getName(MessageEnum.SessionResponseMessage));\n              sessionResponseMessage.addData(getName(MessageEnum.SessionRequestedBy), uniqueSessionRequestId);\n\n              if (_this.isSessionValid()) {\n                sessionResponseMessage.addData(getName(MessageEnum.SessionResponseData), _this.getData());\n                sessionResponseMessage.addData(getName(MessageEnum.SessionResponseToken), _this.getToken());\n              } else {\n                sessionResponseMessage.addData(getName(MessageEnum.SessionResponseError), _this.getError());\n              }\n\n              _this.send(sessionResponseMessage);\n            } else if (getName(MessageEnum.SessionSaveMessage) === message.id) {\n              sessionData = message.getData(getName(MessageEnum.SessionResponseData));\n              sessionToken = message.getData(getName(MessageEnum.SessionResponseToken));\n\n              _this.saveSessionData(sessionToken, sessionData);\n            }\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  }\n\n  saveSessionData(sessionToken, sessionData) {\n    this.sessionToken = sessionToken;\n    this.sessionData = sessionData;\n\n    if (sessionToken) {\n      setStorageData('authToken', sessionToken);\n    }\n\n    if (sessionData && sessionData.meta && sessionData.meta.role) {\n      let role = sessionData.meta.role;\n      setStorageData('role', role);\n    }\n  }\n\n  getToken() {\n    return this.sessionToken;\n  }\n\n  getData() {\n    return this.sessionData;\n  }\n\n  getError() {\n    return 'Session Expired';\n  }\n\n  isSessionValid() {\n    return true;\n  }\n\n}\nSessionManagerBlock.instance = void 0;","map":{"version":3,"sources":["/home/lp-greenapex/gargi/okydpim-36944-react-native/src/packages/framework/src/Blocks/SessionManagerBlock.tsx"],"names":["MessageEnum","getName","runEngine","Message","Block","setStorageData","SessionManagerBlock","constructor","sessionToken","sessionData","attachBuildingBlock","SessionRequestMessage","SessionSaveMessage","getInstance","instance","receive","from","message","debugLog","JSON","stringify","id","uniqueSessionRequestId","messageId","sessionResponseMessage","SessionResponseMessage","addData","SessionRequestedBy","isSessionValid","SessionResponseData","getData","SessionResponseToken","getToken","SessionResponseError","getError","send","saveSessionData","meta","role"],"mappings":"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","sourcesContent":["import MessageEnum, {\n  getName\n} from '../../../framework/src/Messages/MessageEnum';\nimport { IBlock } from '../../../framework/src/IBlock';\nimport { runEngine } from '../../../framework/src/RunEngine';\nimport { Message } from '../../../framework/src/Message';\nimport { Block } from '../../../framework/src/Block';\nimport { setStorageData } from '../../../framework/src/Utilities';\n\nexport default class SessionManagerBlock extends Block {\n  private static instance: SessionManagerBlock;\n  sessionToken: any;\n  sessionData: any;\n\n  private constructor() {\n    super();\n    runEngine.attachBuildingBlock(this as IBlock, [\n      getName(MessageEnum.SessionRequestMessage),\n      getName(MessageEnum.SessionSaveMessage)\n    ]);\n  }\n\n  static getInstance(): SessionManagerBlock {\n    if (!SessionManagerBlock.instance) {\n      SessionManagerBlock.instance = new SessionManagerBlock();\n    }\n    return SessionManagerBlock.instance;\n  }\n\n  async receive(from: string, message: Message) {\n    runEngine.debugLog(\n      'SessionManagerBlock',\n      'Session Rquest Message' + JSON.stringify(message)\n    );\n\n    if (getName(MessageEnum.SessionRequestMessage) === message.id) {\n      let uniqueSessionRequestId = message.messageId;\n\n      let sessionResponseMessage = new Message(\n        getName(MessageEnum.SessionResponseMessage)\n      );\n\n      sessionResponseMessage.addData(\n        getName(MessageEnum.SessionRequestedBy),\n        uniqueSessionRequestId\n      );\n\n      if (this.isSessionValid()) {\n        sessionResponseMessage.addData(\n          getName(MessageEnum.SessionResponseData),\n          this.getData()\n        );\n\n        sessionResponseMessage.addData(\n          getName(MessageEnum.SessionResponseToken),\n          this.getToken()\n        );\n      } else {\n        sessionResponseMessage.addData(\n          getName(MessageEnum.SessionResponseError),\n          this.getError()\n        );\n      }\n\n      this.send(sessionResponseMessage);\n    } else if (getName(MessageEnum.SessionSaveMessage) === message.id) {\n      let sessionData = message.getData(\n        getName(MessageEnum.SessionResponseData)\n      );\n\n      let sessionToken = message.getData(\n        getName(MessageEnum.SessionResponseToken)\n      );\n\n      this.saveSessionData(sessionToken, sessionData);\n    }\n  }\n  saveSessionData(sessionToken: any, sessionData: any) {\n    this.sessionToken = sessionToken;\n    this.sessionData = sessionData;\n\n    if (sessionToken) {\n      setStorageData('authToken', sessionToken);\n    }\n\n    if (sessionData && sessionData.meta && sessionData.meta.role) {\n      let role = sessionData.meta.role;\n      setStorageData('role', role);\n    }\n  }\n  getToken(): any {\n    return this.sessionToken;\n  }\n\n  getData(): any {\n    return this.sessionData;\n  }\n\n  getError(): any {\n    return 'Session Expired';\n  }\n\n  isSessionValid() {\n    return true;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}