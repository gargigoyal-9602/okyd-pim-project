{"ast":null,"code":"import _regeneratorRuntime from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport MessageEnum, { getName } from \"../../../framework/src/Messages/MessageEnum\";\nimport { runEngine } from \"../../../framework/src/RunEngine\"; // Customizable Area Start\n// Customizable Area End\n\nexport const configJSON = require(\"./config\");\nexport default class PostCreationCommonController extends BlockComponent {\n  // Customizable Area Start\n  // Customizable Area End\n  constructor(props) {\n    super(props);\n    this.apiPostItemCallId = \"\";\n    this.apiGetCategoryCallID = \"\";\n    this.PostApiCallId = \"\";\n    this.DeleteApiCallId = void 0;\n    this.addpostApiCallId = void 0;\n    this.updatePostApiCallId = void 0;\n\n    this.editNavigation = item => {\n      this.getAllCategory();\n\n      if (this.props.navigation.navigate) {\n        this.props.navigation.navigate(\"PostCreation\", {\n          item: item\n        });\n      }\n    };\n\n    this.navigateToDetails = item => {\n      if (this.props.navigation.navigate) {\n        this.props.navigation.navigate(\"PostDetails\", item = {\n          item\n        });\n      }\n    };\n\n    this.txtInputProductNameProps = {\n      onChangeText: text => {\n        this.setState({\n          name: text\n        }); //@ts-ignore\n\n        this.txtInputProductNameProps.value = text;\n      }\n    };\n    this.txtInputProductDiscripationProps = {\n      onChangeText: text => {\n        this.setState({\n          description: text\n        }); //@ts-ignore\n\n        this.txtInputProductDiscripationProps.value = text;\n      }\n    };\n    this.ImageData = {\n      onChangeText: text => {\n        this.setState({\n          image: text\n        }); //@ts-ignore\n\n        this.ImageData.value = text;\n      }\n    };\n    this.DropDownProps = {\n      onChangeText: text => {\n        this.setState({\n          category_id: text\n        }); //@ts-ignore\n\n        this.DropDownProps.value = text;\n      }\n    };\n    this.txtInputProductPriceProps = {\n      onChangeText: text => {\n        this.setState({\n          price: text\n        }); //@ts-ignore\n\n        this.txtInputProductPriceProps.value = text;\n      }\n    };\n\n    this.chooseImage = () => {\n      this.showAlert(\"Error\", \"Image Picker Not Implemented\");\n    };\n\n    this.valueExtractor1 = val => {\n      return val.data.attributes.id;\n    };\n\n    this.onValueHanndler = val => {\n      return val.data.attributes.name;\n    };\n\n    this.receive = this.receive.bind(this); // Customizable Area Start\n\n    this.subScribedMessages = [getName(MessageEnum.AccoutLoginSuccess), getName(MessageEnum.RestAPIResponceMessage), getName(MessageEnum.SessionSaveMessage), getName(MessageEnum.SessionResponseMessage)];\n    this.state = {\n      token: \"\",\n      PostData: [],\n      name: \"\",\n      description: \"\",\n      price: \"\",\n      currency: \"$\",\n      category_id: \"\",\n      image: \"\",\n      id: \"\",\n      uploadedImages: [],\n      AllCategory: \"\",\n      file: \"\",\n      refresh: false,\n      profileImageData: {}\n    }; // Customizable Area End\n\n    console.disableYellowBox = true;\n    runEngine.attachBuildingBlock(this, this.subScribedMessages);\n  }\n\n  componentDidMount() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var authTokenReq;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            authTokenReq = new Message(getName(MessageEnum.SessionRequestMessage));\n\n            _this.send(authTokenReq);\n\n            _this.showAlert(\"ERROR\", \"PostCreationController::componentDidMount::Web:L:WIP\"); // let { params } = this.props.navigation.state;\n            // console.log(\n            //   params.item.data,\n            //   params.item.data,\n            //   \"+++++++++++===================price\"\n            // );\n            // if (params && params.item) {\n            //   this.setState({\n            //     name: params.item.data.attributes.name,\n            //     description: params.item.data.attributes.description,\n            //     price: params.item.data.attributes.price.toString(),\n            //     currency: \"$\",\n            //     category_id: params.item.data.attributes.category.data.attributes.id,\n            //     id: params.item.data.attributes.id,\n            //     profileImageData: {\n            //       data: params.item.data.attributes.product_image,\n            //       content_type: \"image/jpeg\",\n            //       filename: \"image.jpeg\"\n            //     },\n            //     image: \"\"\n            //   });\n            // }\n\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  }\n\n  receive(from, message) {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var token, apiRequestCallId, responseJson, errorReponse;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            // Customizable Area Start\n            runEngine.debugLog(\"Message Recived\", message);\n\n            if (getName(MessageEnum.SessionResponseMessage) === message.id) {\n              //runEngine.debugLog(\"Message Recived\", message);\n              token = message.getData(getName(MessageEnum.SessionResponseToken));\n\n              _this2.setState({\n                token: token\n              }, () => {\n                _this2.getPostData();\n              });\n            } else if (getName(MessageEnum.RestAPIResponceMessage) === message.id) {\n              apiRequestCallId = message.getData(getName(MessageEnum.RestAPIResponceDataMessage));\n              responseJson = message.getData(getName(MessageEnum.RestAPIResponceSuccessMessage));\n              errorReponse = message.getData(getName(MessageEnum.RestAPIResponceErrorMessage));\n              runEngine.debugLog(\"API Message Recived\", message);\n\n              if (responseJson && responseJson.errors) {\n                _this2.setState({\n                  refresh: false\n                });\n\n                _this2.parseApiErrorResponse(responseJson.errors);\n\n                _this2.parseApiCatchErrorResponse(responseJson.errors);\n              } else if (responseJson) {\n                if (apiRequestCallId === _this2.apiPostItemCallId) {\n                  _this2.setState({\n                    PostData: responseJson,\n                    refresh: false\n                  });\n                } else if (apiRequestCallId === _this2.addpostApiCallId) {\n                  _this2.setState({\n                    refresh: true\n                  });\n\n                  _this2.props.navigation.state.params.callback();\n\n                  _this2.props.navigation.goBack();\n                } else if (apiRequestCallId === _this2.apiGetCategoryCallID) {\n                  _this2.setState({\n                    AllCategory: responseJson\n                  }, () => _this2.props.navigation.navigate(\"PostCreation\", {\n                    data: _this2.state.AllCategory,\n                    callback: () => _this2.getPostData()\n                  }));\n                } else if (apiRequestCallId === _this2.updatePostApiCallId) {\n                  _this2.setState({\n                    refresh: true\n                  });\n\n                  _this2.getPostData();\n\n                  _this2.props.navigation.state.params.callback();\n\n                  _this2.props.navigation.goBack();\n                } else if (apiRequestCallId === _this2.DeleteApiCallId) {\n                  _this2.getPostData();\n                }\n              } else if (apiRequestCallId === _this2.DeleteApiCallId) {\n                _this2.getPostData();\n              } else if (errorReponse) {\n                _this2.setState({\n                  refresh: false\n                });\n\n                _this2.parseApiErrorResponse(errorReponse);\n\n                _this2.parseApiCatchErrorResponse(errorReponse);\n              }\n            }\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }))();\n  }\n\n  createPostCreation() {\n    if (this.state.category_id === \"\" || this.state.description === \"\" || this.state.name === \"\" || this.state.price === \"\") {\n      this.showAlert(\"Error\", \"Please enter all mandatory fields\");\n    } else {\n      this.AddPostCreation();\n    }\n  }\n\n  AddPostCreation() {\n    const header = {\n      \"Content-Type\": configJSON.postContentType,\n      token: this.state.token\n    };\n    const attrs = {\n      data: {\n        attributes: {\n          name: this.state.name,\n          description: this.state.description,\n          price: this.state.price,\n          currency: \"$\",\n          category_id: this.state.category_id,\n          image: this.state.profileImageData\n        }\n      }\n    }; // const data = {\n    //   attributes: attrs,\n    // };\n\n    const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n    this.addpostApiCallId = requestMessage.messageId; // const httpBody = {\n    //   data: data,\n    // };\n\n    requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.postGetUrl);\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(header));\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(attrs));\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.PostAPiMethod);\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n    console.log(attrs, \"attrsattrsattrsattrsattrs\");\n    return true;\n  }\n\n  getAllCategory() {\n    const header = {\n      \"Content-Type\": configJSON.postContentType,\n      token: this.state.token\n    };\n    const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n    console.log(\"requestMessage, \", requestMessage);\n    this.apiGetCategoryCallID = requestMessage.messageId;\n    requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.getAllCatergoryEndPoint);\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(header));\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.PostApiMethodType); //console.log('requestMessage@, ',requestMessage);\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n    return true;\n  }\n\n  getPostData() {\n    console.log(\"getPostToken \", this.state.token);\n    const header = {\n      \"Content-Type\": configJSON.postContentType,\n      token: this.state.token\n    };\n    console.log(\"header  \", JSON.stringify(header));\n    const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n    console.log(\"requestMessage, \", requestMessage);\n    this.apiPostItemCallId = requestMessage.messageId;\n    console.log(\"requestMessage, \", getName(MessageEnum.RestAPIResponceEndPointMessage));\n    requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.postGetUrl);\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(header));\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.PostApiMethodType); //console.log('requestMessage@, ',requestMessage);\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n    return true;\n  }\n\n  updateCreatePostData(Id) {\n    if (this.state.category_id === \"\" || this.state.description === \"\" || this.state.name === \"\" || this.state.price === \"\") {\n      this.showAlert(\"Error\", \"Please enter all mandatory fields\");\n      return false;\n    } else {\n      const header = {\n        \"Content-Type\": configJSON.postContentType,\n        token: this.state.token\n      };\n      const attrs = {\n        data: {\n          attributes: {\n            name: this.state.name,\n            description: this.state.description,\n            price: this.state.price,\n            currency: \"$\",\n            category_id: this.state.category_id,\n            image: this.state.profileImageData\n          }\n        }\n      }; // const data = {\n      //   attributes: attrs,\n      // };\n\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      this.updatePostApiCallId = requestMessage.messageId; // const httpBody = {\n      //   data: data,\n      // };\n\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.postGetUrl + \"/\" + \"\".concat(Id));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(header));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(attrs));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.patchPostAPiMethod);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    }\n  }\n\n  deleteRecord(Id) {\n    Alert.alert(\"Warning\", \"Are you sure for delete this post?\", [{\n      text: \"No\",\n      onPress: () => {},\n      style: \"cancel\"\n    }, {\n      text: \"Yes\",\n      onPress: () => {\n        this.setState({\n          refresh: true\n        });\n        this.delete(Id);\n      }\n    }], {\n      cancelable: false\n    });\n  }\n\n  delete(Id) {\n    this.setState({\n      refresh: true\n    });\n    const header = {\n      \"Content-Type\": configJSON.postContentType,\n      token: this.state.token\n    };\n    const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n    this.DeleteApiCallId = requestMessage.messageId;\n    requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.postGetUrl + \"/\" + \"\".concat(Id));\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(header));\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.deletePostAPiMethod);\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n    this.getPostData();\n    return true;\n  } // Customizable Area End\n\n\n}","map":{"version":3,"sources":["/home/lp-greenapex/gargi/okydpim-36944-react-native/src/packages/blocks/postcreation/src/PostCreationCommonController.tsx"],"names":["Message","BlockComponent","MessageEnum","getName","runEngine","configJSON","require","PostCreationCommonController","constructor","props","apiPostItemCallId","apiGetCategoryCallID","PostApiCallId","DeleteApiCallId","addpostApiCallId","updatePostApiCallId","editNavigation","item","getAllCategory","navigation","navigate","navigateToDetails","txtInputProductNameProps","onChangeText","text","setState","name","value","txtInputProductDiscripationProps","description","ImageData","image","DropDownProps","category_id","txtInputProductPriceProps","price","chooseImage","showAlert","valueExtractor1","val","data","attributes","id","onValueHanndler","receive","bind","subScribedMessages","AccoutLoginSuccess","RestAPIResponceMessage","SessionSaveMessage","SessionResponseMessage","state","token","PostData","currency","uploadedImages","AllCategory","file","refresh","profileImageData","console","disableYellowBox","attachBuildingBlock","componentDidMount","authTokenReq","SessionRequestMessage","send","from","message","debugLog","getData","SessionResponseToken","getPostData","apiRequestCallId","RestAPIResponceDataMessage","responseJson","RestAPIResponceSuccessMessage","errorReponse","RestAPIResponceErrorMessage","errors","parseApiErrorResponse","parseApiCatchErrorResponse","params","callback","goBack","createPostCreation","AddPostCreation","header","postContentType","attrs","requestMessage","RestAPIRequestMessage","messageId","addData","RestAPIResponceEndPointMessage","postGetUrl","RestAPIRequestHeaderMessage","JSON","stringify","RestAPIRequestBodyMessage","RestAPIRequestMethodMessage","PostAPiMethod","sendMessage","log","getAllCatergoryEndPoint","PostApiMethodType","updateCreatePostData","Id","patchPostAPiMethod","deleteRecord","Alert","alert","onPress","style","delete","cancelable","deletePostAPiMethod"],"mappings":"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","sourcesContent":["import { IBlock } from \"../../../framework/src/IBlock\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport { Alert } from \"react-native\";\nimport MessageEnum, {\n  getName\n} from \"../../../framework/src/Messages/MessageEnum\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\n\n// Customizable Area Start\n// Customizable Area End\n\nexport const configJSON = require(\"./config\");\n\nexport interface Props {\n  navigation: any;\n  // Customizable Area Start\n  // Customizable Area End\n}\n\ninterface S {\n  // Customizable Area Start\n  PostData: any;\n  token: string;\n  name: string;\n  description: string;\n  price: any;\n  currency: string;\n  category_id: string;\n  image: any;\n  uploadedImages: any;\n  AllCategory: any;\n  id: any;\n  refresh: boolean;\n  file: any;\n  profileImageData: any;\n  // Customizable Area End\n}\n\ninterface SS {\n  id: any;\n}\n\nexport default class PostCreationCommonController extends BlockComponent<Props, S, SS> {\n  // Customizable Area Start\n  apiPostItemCallId: string = \"\";\n  apiGetCategoryCallID: string = \"\";\n  PostApiCallId: string = \"\";\n  DeleteApiCallId: any;\n  addpostApiCallId: any;\n  updatePostApiCallId: any;\n  // Customizable Area End\n  constructor(props: Props) {\n    super(props);\n    this.receive = this.receive.bind(this);\n\n    // Customizable Area Start\n    this.subScribedMessages = [\n      getName(MessageEnum.AccoutLoginSuccess),\n      getName(MessageEnum.RestAPIResponceMessage),\n      getName(MessageEnum.SessionSaveMessage),\n      getName(MessageEnum.SessionResponseMessage)\n    ];\n\n    this.state = {\n      token: \"\",\n      PostData: [],\n      name: \"\",\n      description: \"\",\n      price: \"\",\n      currency: \"$\",\n      category_id: \"\",\n      image: \"\",\n      id: \"\",\n      uploadedImages: [],\n      AllCategory: \"\",\n      file: \"\",\n      refresh: false,\n      profileImageData: {}\n    };\n    // Customizable Area End\n    console.disableYellowBox = true;\n    runEngine.attachBuildingBlock(this as IBlock, this.subScribedMessages);\n  }\n\n  async componentDidMount() {\n    var authTokenReq = new Message(getName(MessageEnum.SessionRequestMessage));\n    this.send(authTokenReq);\n    this.showAlert(\"ERROR\", \"PostCreationController::componentDidMount::Web:L:WIP\")\n    // let { params } = this.props.navigation.state;\n    // console.log(\n    //   params.item.data,\n    //   params.item.data,\n    //   \"+++++++++++===================price\"\n    // );\n\n    // if (params && params.item) {\n    //   this.setState({\n    //     name: params.item.data.attributes.name,\n    //     description: params.item.data.attributes.description,\n    //     price: params.item.data.attributes.price.toString(),\n    //     currency: \"$\",\n    //     category_id: params.item.data.attributes.category.data.attributes.id,\n    //     id: params.item.data.attributes.id,\n    //     profileImageData: {\n    //       data: params.item.data.attributes.product_image,\n    //       content_type: \"image/jpeg\",\n    //       filename: \"image.jpeg\"\n    //     },\n    //     image: \"\"\n    //   });\n    // }\n  }\n\n  async receive(from: string, message: Message) {\n    // Customizable Area Start\n    runEngine.debugLog(\"Message Recived\", message);\n    if (getName(MessageEnum.SessionResponseMessage) === message.id) {\n      //runEngine.debugLog(\"Message Recived\", message);\n      let token = message.getData(getName(MessageEnum.SessionResponseToken));\n      this.setState({ token: token }, () => {\n        this.getPostData();\n      });\n    } else if (getName(MessageEnum.RestAPIResponceMessage) === message.id) {\n      const apiRequestCallId = message.getData(\n        getName(MessageEnum.RestAPIResponceDataMessage)\n      );\n\n      var responseJson = message.getData(\n        getName(MessageEnum.RestAPIResponceSuccessMessage)\n      );\n\n      var errorReponse = message.getData(\n        getName(MessageEnum.RestAPIResponceErrorMessage)\n      );\n      runEngine.debugLog(\"API Message Recived\", message);\n      if (responseJson && responseJson.errors) {\n        this.setState({ refresh: false });\n        this.parseApiErrorResponse(responseJson.errors);\n        this.parseApiCatchErrorResponse(responseJson.errors);\n      } else if (responseJson) {\n        if (apiRequestCallId === this.apiPostItemCallId) {\n          this.setState({ PostData: responseJson, refresh: false });\n        } else if (apiRequestCallId === this.addpostApiCallId) {\n          this.setState({ refresh: true });\n          this.props.navigation.state.params.callback();\n          this.props.navigation.goBack();\n        } else if (apiRequestCallId === this.apiGetCategoryCallID) {\n          this.setState({ AllCategory: responseJson }, () =>\n            this.props.navigation.navigate(\"PostCreation\", {\n              data: this.state.AllCategory,\n              callback: () => this.getPostData()\n            })\n          );\n        } else if (apiRequestCallId === this.updatePostApiCallId) {\n          this.setState({ refresh: true });\n          this.getPostData();\n          this.props.navigation.state.params.callback();\n          this.props.navigation.goBack();\n        } else if (apiRequestCallId === this.DeleteApiCallId) {\n          this.getPostData();\n        }\n      } else if (apiRequestCallId === this.DeleteApiCallId) {\n        this.getPostData();\n      }\n      else if (errorReponse) {\n        this.setState({ refresh: false });\n        this.parseApiErrorResponse(errorReponse);\n        this.parseApiCatchErrorResponse(errorReponse);\n      }\n    }\n  }\n\n  createPostCreation() {\n    if (\n      this.state.category_id === \"\" ||\n      this.state.description === \"\" ||\n      this.state.name === \"\" ||\n      this.state.price === \"\"\n    ) {\n      this.showAlert(\"Error\", \"Please enter all mandatory fields\");\n    } else {\n      this.AddPostCreation();\n    }\n  }\n\n  editNavigation = (item: any) => {\n    this.getAllCategory();\n    if ( this.props.navigation.navigate ) {\n      this.props.navigation.navigate(\"PostCreation\", { item: item });\n    }\n  };\n\n  navigateToDetails = (item: any) => {\n    if ( this.props.navigation.navigate ) {\n      this.props.navigation.navigate(\"PostDetails\", (item = { item }));\n    }\n  };\n\n  AddPostCreation(): boolean {\n    const header = {\n      \"Content-Type\": configJSON.postContentType,\n      token: this.state.token\n    };\n\n    const attrs = {\n      data: {\n        attributes: {\n          name: this.state.name,\n          description: this.state.description,\n          price: this.state.price,\n          currency: \"$\",\n          category_id: this.state.category_id,\n          image: this.state.profileImageData\n        }\n      }\n    };\n    // const data = {\n    //   attributes: attrs,\n    // };\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n    this.addpostApiCallId = requestMessage.messageId;\n    // const httpBody = {\n    //   data: data,\n    // };\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.postGetUrl\n    );\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(header)\n    );\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestBodyMessage),\n      JSON.stringify(attrs)\n    );\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.PostAPiMethod\n    );\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n    console.log(attrs, \"attrsattrsattrsattrsattrs\");\n    return true;\n  }\n\n  getAllCategory() {\n    const header = {\n      \"Content-Type\": configJSON.postContentType,\n      token: this.state.token\n    };\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n    console.log(\"requestMessage, \", requestMessage);\n\n    this.apiGetCategoryCallID = requestMessage.messageId;\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.getAllCatergoryEndPoint\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(header)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.PostApiMethodType\n    );\n    //console.log('requestMessage@, ',requestMessage);\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n    return true;\n  }\n\n  getPostData(): boolean {\n    console.log(\"getPostToken \", this.state.token);\n    const header = {\n      \"Content-Type\": configJSON.postContentType,\n      token: this.state.token\n    };\n    console.log(\"header  \", JSON.stringify(header));\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n    console.log(\"requestMessage, \", requestMessage);\n\n    this.apiPostItemCallId = requestMessage.messageId;\n    console.log(\n      \"requestMessage, \",\n      getName(MessageEnum.RestAPIResponceEndPointMessage)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.postGetUrl\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(header)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.PostApiMethodType\n    );\n    //console.log('requestMessage@, ',requestMessage);\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n    return true;\n  }\n\n  updateCreatePostData(Id: any) {\n    if (\n      this.state.category_id === \"\" ||\n      this.state.description === \"\" ||\n      this.state.name === \"\" ||\n      this.state.price === \"\"\n    ) {\n      this.showAlert(\"Error\", \"Please enter all mandatory fields\")\n      return false;\n    } else {\n      const header = {\n        \"Content-Type\": configJSON.postContentType,\n        token: this.state.token\n      };\n      const attrs = {\n        data: {\n          attributes: {\n            name: this.state.name,\n            description: this.state.description,\n            price: this.state.price,\n            currency: \"$\",\n            category_id: this.state.category_id,\n            image: this.state.profileImageData\n          }\n        }\n      };\n      // const data = {\n      //   attributes: attrs,\n      // };\n      const requestMessage = new Message(\n        getName(MessageEnum.RestAPIRequestMessage)\n      );\n\n      this.updatePostApiCallId = requestMessage.messageId;\n      // const httpBody = {\n      //   data: data,\n      // };\n      requestMessage.addData(\n        getName(MessageEnum.RestAPIResponceEndPointMessage),\n        configJSON.postGetUrl + \"/\" + `${Id}`\n      );\n      requestMessage.addData(\n        getName(MessageEnum.RestAPIRequestHeaderMessage),\n        JSON.stringify(header)\n      );\n      requestMessage.addData(\n        getName(MessageEnum.RestAPIRequestBodyMessage),\n        JSON.stringify(attrs)\n      );\n      requestMessage.addData(\n        getName(MessageEnum.RestAPIRequestMethodMessage),\n        configJSON.patchPostAPiMethod\n      );\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    }\n  }\n\n  deleteRecord(Id: any) {\n    Alert.alert(\n      \"Warning\",\n      \"Are you sure for delete this post?\",\n      [\n        { text: \"No\", onPress: () => {}, style: \"cancel\" },\n        {\n          text: \"Yes\",\n          onPress: () => {\n            this.setState({ refresh: true });\n            this.delete(Id);\n          }\n        }\n      ],\n      { cancelable: false }\n    );\n  }\n\n  delete(Id: any) {\n    this.setState({ refresh: true });\n    const header = {\n      \"Content-Type\": configJSON.postContentType,\n      token: this.state.token\n    };\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n    this.DeleteApiCallId = requestMessage.messageId;\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.postGetUrl + \"/\" + `${Id}`\n    );\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(header)\n    );\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.deletePostAPiMethod\n    );\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n    this.getPostData();\n    return true;\n  }\n\n  txtInputProductNameProps = {\n    onChangeText: (text: string) => {\n      this.setState({ name: text });\n      //@ts-ignore\n      this.txtInputProductNameProps.value = text;\n    }\n  };\n\n  txtInputProductDiscripationProps = {\n    onChangeText: (text: string) => {\n      this.setState({ description: text });\n      //@ts-ignore\n      this.txtInputProductDiscripationProps.value = text;\n    }\n  };\n\n  ImageData = {\n    onChangeText: (text: string) => {\n      this.setState({ image: text });\n      //@ts-ignore\n      this.ImageData.value = text;\n    }\n  };\n\n  DropDownProps = {\n    onChangeText: (text: string) => {\n      this.setState({ category_id: text });\n      //@ts-ignore\n      this.DropDownProps.value = text;\n    }\n  };\n\n  txtInputProductPriceProps = {\n    onChangeText: (text: string) => {\n      this.setState({ price: text });\n      //@ts-ignore\n      this.txtInputProductPriceProps.value = text;\n    }\n  };\n\n  chooseImage = () => {\n    this.showAlert(\"Error\", \"Image Picker Not Implemented\")  \n  };\n\n  valueExtractor1 = (val: { data: { attributes: { id: any } } }): any => {\n    return val.data.attributes.id;\n  };\n\n  onValueHanndler = (val: { data: { attributes: { name: any } } }): any => {\n    return val.data.attributes.name;\n  };\n  // Customizable Area End\n}\n"]},"metadata":{},"sourceType":"module"}