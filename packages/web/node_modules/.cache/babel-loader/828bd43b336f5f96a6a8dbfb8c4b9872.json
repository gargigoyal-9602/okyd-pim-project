{"ast":null,"code":"import _regeneratorRuntime from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport MessageEnum, { getName } from \"../../../framework/src/Messages/MessageEnum\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nimport * as Yup from \"yup\";\nimport { values } from \"lodash\"; // Customizable Area Start\n// Customizable Area End\n\nexport const configJSON = require(\"./config\");\nexport default class UserProfileSettingController extends BlockComponent {\n  constructor(props) {\n    super(props);\n    this.userProfileApiCallId = \"\";\n    this.userUpdateProfileApiCallId = \"\";\n    this.userUpdateChangePassword = \"\";\n\n    this.getUserProfileDetails = () => {\n      console.log(\"method called\");\n      console.log(values);\n      const headers = {\n        \"Content-Type\": configJSON.contentTypeApiGetUserProfile,\n        token: window.localStorage.getItem(\"auth\")\n      };\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      this.userProfileApiCallId = requestMessage.messageId;\n      console.log(\"this.userProfileApiCallId\", this.userProfileApiCallId);\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.endPointApiGetUserProfileDetails);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.methodTypeApiGetUserProfile);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    };\n\n    this.onMenuToggle = () => {\n      this.setState({\n        menuCollapsed: !this.state.menuCollapsed\n      });\n    };\n\n    this.handleGeneralInformation = () => {\n      this.setState({\n        generalInformation: true,\n        changePassword: false\n      });\n    };\n\n    this.handleChangePassword = () => {\n      this.setState({\n        changePassword: true,\n        generalInformation: false\n      });\n    };\n\n    this.handleUpdateProfileDetails = values => {\n      const header = {\n        \"Content-Type\": configJSON.contentTypeApiUpdateUser,\n        token: window.localStorage.getItem(\"auth\")\n      }; //console.log(values);\n\n      const attrs = {\n        \"fullname\": values.fullname,\n        \"designation\": values.designation,\n        \"address\": values.address,\n        \"country\": values.country,\n        \"full_phone_number\": values.full_phone_number\n      };\n      const data = {\n        attributes: attrs\n      };\n      const httpBody = {\n        data: data\n      }; //console.log(\"httpBody\", httpBody);\n\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage)); //console.log(\"requestMessage\", requestMessage);\n\n      this.userUpdateProfileApiCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.endPointApiPutUserProfileUpdatedDetails);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(header));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(httpBody));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.methodTypeApiPostUserProfileUpdated);\n      runEngine.sendMessage(requestMessage.id, requestMessage); //console.log(\"values\", values);\n\n      return true;\n    };\n\n    this.handleUpdateChangePassword = values => {\n      const header = {\n        \"Content-Type\": configJSON.contentTypeApiUpdateUser,\n        token: window.localStorage.getItem(\"auth\")\n      }; // console.log(\"this.state\", this.state);\n\n      const attrs = values;\n      const data = {\n        type: this.state.email,\n        attributes: attrs\n      };\n      const httpBody = {\n        data: data\n      }; //console.log(\"httpBody\", httpBody);\n\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage)); //console.log(\"requestMessage\", requestMessage);\n\n      this.userUpdateChangePassword = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.endPointApiPostUserUpdateChangePassword);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(header));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(httpBody));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.callTypeApiValidateMobileNo);\n      runEngine.sendMessage(requestMessage.id, requestMessage); //console.log(\"values\", values);\n\n      return true;\n    };\n\n    this.receive = this.receive.bind(this); // Customizable Area Start\n\n    this.subScribedMessages = [getName(MessageEnum.AccoutLoginSuccess), getName(MessageEnum.RestAPIResponceMessage)];\n    let ProfileGeneralInformationSchema = {\n      fullname: Yup.string().required(configJSON.errorNameEmpty),\n      designation: Yup.string().required(configJSON.errorDesignationEmpty),\n      full_phone_number: Yup.string().required(configJSON.errorPhoneEmpty).matches(configJSON.PHONE_REGULAR_EXPRESSION, configJSON.errorPhoneNotMatch),\n      email: Yup.string().email(configJSON.errorEmailValidation).required(configJSON.errorEmailEmpty),\n      address: Yup.string().required(configJSON.errorAddressEmpty),\n      companyName: Yup.string().required(configJSON.errorCompanyNameEmpty),\n      country: Yup.string().nullable().required(configJSON.errorCountryEmpty)\n    };\n    let ProfileChangePasswordSchema = {\n      old_password: Yup.string().required(configJSON.errorPassword),\n      new_password: Yup.string().required(configJSON.errorNewPasswordEmpty).matches(configJSON.PASSWORD_REGULAR_EXPRESSION, configJSON.errorNewPasswordNotValid),\n      confirm_new_password: Yup.string().required(configJSON.errorConfirmNewPasswordEmpty).when(\"newPassword\", {\n        is: val => val && val.length > 0 ? true : false,\n        then: Yup.string().oneOf([Yup.ref(\"newPassword\")], configJSON.errorConfirmNewPasswordNotMatch)\n      })\n    };\n    this.state = {\n      userType: configJSON.subscriber || configJSON.admin,\n      menuCollapsed: true,\n      searchText: \"\",\n      ProfileGeneralInformationSchema: ProfileGeneralInformationSchema,\n      ProfileChangePasswordSchema: ProfileChangePasswordSchema,\n      fullname: \"\",\n      designation: \"\",\n      full_phone_number: \"\",\n      email: \"\",\n      address: \"\",\n      country: \"\",\n      companyName: \"\",\n      generalInformation: true,\n      changePassword: false,\n      old_password: \"\",\n      new_password: \"\",\n      confirm_new_password: \"\"\n    };\n    runEngine.attachBuildingBlock(this, this.subScribedMessages);\n  } // Customizable Area Start\n\n\n  componentDidMount() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _this.getUserProfileDetails();\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  }\n\n  receive(from, message) {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var responseJson, apiRequestCallId, errorReponse;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            // Customizable Area Start\n            runEngine.debugLog(\"Message Recived\", message);\n\n            if (getName(MessageEnum.RestAPIResponceMessage) === message.id) {\n              responseJson = message.getData(getName(MessageEnum.RestAPIResponceSuccessMessage));\n\n              if (responseJson && !responseJson.errors && responseJson.data) {\n                apiRequestCallId = message.getData(getName(MessageEnum.RestAPIResponceDataMessage));\n\n                if (apiRequestCallId != null) {\n                  //console.log(responseJson.data)\n                  if (apiRequestCallId === _this2.userProfileApiCallId) {\n                    console.log(responseJson.data);\n\n                    _this2.setState({\n                      fullname: responseJson.data.attributes.fullname,\n                      email: responseJson.data.attributes.email,\n                      designation: responseJson.data.attributes.designation,\n                      full_phone_number: responseJson.data.attributes.full_phone_number,\n                      address: responseJson.data.attributes.address,\n                      companyName: responseJson.data.attributes.company_name,\n                      country: responseJson.data.attributes.country\n                    });\n                  }\n\n                  if (apiRequestCallId === _this2.userUpdateProfileApiCallId) {\n                    console.log(responseJson, \"updated response\");\n                  }\n\n                  if (apiRequestCallId === _this2.userUpdateChangePassword) {\n                    console.log(responseJson, \"updated password\");\n                  }\n                }\n              } else {\n                errorReponse = message.getData(getName(MessageEnum.RestAPIResponceErrorMessage));\n\n                _this2.parseApiCatchErrorResponse(errorReponse);\n              }\n            }\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }))();\n  } // Handler Profile Details\n\n\n}","map":{"version":3,"sources":["/home/lp-greenapex/gargi/okydpim-36944-react-native/src/packages/blocks/user-profile-basic/src/UserProfileSettingController.web.tsx"],"names":["Message","BlockComponent","MessageEnum","getName","runEngine","Yup","values","configJSON","require","UserProfileSettingController","constructor","props","userProfileApiCallId","userUpdateProfileApiCallId","userUpdateChangePassword","getUserProfileDetails","console","log","headers","contentTypeApiGetUserProfile","token","window","localStorage","getItem","requestMessage","RestAPIRequestMessage","messageId","addData","RestAPIResponceEndPointMessage","endPointApiGetUserProfileDetails","RestAPIRequestHeaderMessage","JSON","stringify","RestAPIRequestMethodMessage","methodTypeApiGetUserProfile","sendMessage","id","onMenuToggle","setState","menuCollapsed","state","handleGeneralInformation","generalInformation","changePassword","handleChangePassword","handleUpdateProfileDetails","header","contentTypeApiUpdateUser","attrs","fullname","designation","address","country","full_phone_number","data","attributes","httpBody","endPointApiPutUserProfileUpdatedDetails","RestAPIRequestBodyMessage","methodTypeApiPostUserProfileUpdated","handleUpdateChangePassword","type","email","endPointApiPostUserUpdateChangePassword","callTypeApiValidateMobileNo","receive","bind","subScribedMessages","AccoutLoginSuccess","RestAPIResponceMessage","ProfileGeneralInformationSchema","string","required","errorNameEmpty","errorDesignationEmpty","errorPhoneEmpty","matches","PHONE_REGULAR_EXPRESSION","errorPhoneNotMatch","errorEmailValidation","errorEmailEmpty","errorAddressEmpty","companyName","errorCompanyNameEmpty","nullable","errorCountryEmpty","ProfileChangePasswordSchema","old_password","errorPassword","new_password","errorNewPasswordEmpty","PASSWORD_REGULAR_EXPRESSION","errorNewPasswordNotValid","confirm_new_password","errorConfirmNewPasswordEmpty","when","is","val","length","then","oneOf","ref","errorConfirmNewPasswordNotMatch","userType","subscriber","admin","searchText","attachBuildingBlock","componentDidMount","from","message","debugLog","responseJson","getData","RestAPIResponceSuccessMessage","errors","apiRequestCallId","RestAPIResponceDataMessage","company_name","errorReponse","RestAPIResponceErrorMessage","parseApiCatchErrorResponse"],"mappings":";;AACA,SAASA,OAAT,QAAwB,gCAAxB;AACA,SAASC,cAAT,QAA+B,uCAA/B;AACA,OAAOC,WAAP,IACEC,OADF,QAEO,6CAFP;AAGA,SAASC,SAAT,QAA0B,kCAA1B;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,MAAT,QAAuB,QAAvB,C,CAEA;AACA;;AAEA,OAAO,MAAMC,UAAU,GAAGC,OAAO,CAAC,UAAD,CAA1B;AAyCP,eAAe,MAAMC,4BAAN,SAA2CR,cAA3C,CAAwE;AAKrFS,EAAAA,WAAW,CAACC,KAAD,EAAe;AACxB,UAAMA,KAAN;AADwB,SAJ1BC,oBAI0B,GAJK,EAIL;AAAA,SAH1BC,0BAG0B,GAHW,EAGX;AAAA,SAF1BC,wBAE0B,GAFS,EAET;;AAAA,SAgI1BC,qBAhI0B,GAgIF,MAAe;AACrCC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYX,MAAZ;AACA,YAAMY,OAAO,GAAG;AACd,wBAAgBX,UAAU,CAACY,4BADb;AAEdC,QAAAA,KAAK,EAAEC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,MAA5B;AAFO,OAAhB;AAKA,YAAMC,cAAc,GAAG,IAAIxB,OAAJ,CACrBG,OAAO,CAACD,WAAW,CAACuB,qBAAb,CADc,CAAvB;AAIA,WAAKb,oBAAL,GAA4BY,cAAc,CAACE,SAA3C;AACAV,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyC,KAAKL,oBAA9C;AAEAY,MAAAA,cAAc,CAACG,OAAf,CACExB,OAAO,CAACD,WAAW,CAAC0B,8BAAb,CADT,EAEErB,UAAU,CAACsB,gCAFb;AAKAL,MAAAA,cAAc,CAACG,OAAf,CACExB,OAAO,CAACD,WAAW,CAAC4B,2BAAb,CADT,EAEEC,IAAI,CAACC,SAAL,CAAed,OAAf,CAFF;AAKAM,MAAAA,cAAc,CAACG,OAAf,CACExB,OAAO,CAACD,WAAW,CAAC+B,2BAAb,CADT,EAEE1B,UAAU,CAAC2B,2BAFb;AAKA9B,MAAAA,SAAS,CAAC+B,WAAV,CAAsBX,cAAc,CAACY,EAArC,EAAyCZ,cAAzC;AAEA,aAAO,IAAP;AACD,KAjKyB;;AAAA,SAmK1Ba,YAnK0B,GAmKX,MAAM;AACnB,WAAKC,QAAL,CAAc;AACZC,QAAAA,aAAa,EAAE,CAAC,KAAKC,KAAL,CAAWD;AADf,OAAd;AAGD,KAvKyB;;AAAA,SAyK1BE,wBAzK0B,GAyKC,MAAM;AAC/B,WAAKH,QAAL,CAAc;AACZI,QAAAA,kBAAkB,EAAE,IADR;AAEZC,QAAAA,cAAc,EAAE;AAFJ,OAAd;AAID,KA9KyB;;AAAA,SAgL1BC,oBAhL0B,GAgLH,MAAM;AAC3B,WAAKN,QAAL,CAAc;AACZK,QAAAA,cAAc,EAAE,IADJ;AAEZD,QAAAA,kBAAkB,EAAE;AAFR,OAAd;AAID,KArLyB;;AAAA,SAyL1BG,0BAzL0B,GAyLIvC,MAAD,IAA0B;AACrD,YAAMwC,MAAM,GAAG;AACb,wBAAgBvC,UAAU,CAACwC,wBADd;AAEb3B,QAAAA,KAAK,EAAEC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,MAA5B;AAFM,OAAf,CADqD,CAOrD;;AAEA,YAAMyB,KAAK,GACX;AACE,oBAAY1C,MAAM,CAAC2C,QADrB;AAEE,uBAAe3C,MAAM,CAAC4C,WAFxB;AAGE,mBAAW5C,MAAM,CAAC6C,OAHpB;AAIE,mBAAW7C,MAAM,CAAC8C,OAJpB;AAKE,6BAAqB9C,MAAM,CAAC+C;AAL9B,OADA;AASA,YAAMC,IAAI,GAAG;AACXC,QAAAA,UAAU,EAAEP;AADD,OAAb;AAIA,YAAMQ,QAAQ,GAAG;AACfF,QAAAA,IAAI,EAAEA;AADS,OAAjB,CAtBqD,CA0BrD;;AAEA,YAAM9B,cAAc,GAAG,IAAIxB,OAAJ,CACrBG,OAAO,CAACD,WAAW,CAACuB,qBAAb,CADc,CAAvB,CA5BqD,CAgCrD;;AACA,WAAKZ,0BAAL,GAAkCW,cAAc,CAACE,SAAjD;AACAF,MAAAA,cAAc,CAACG,OAAf,CACExB,OAAO,CAACD,WAAW,CAAC0B,8BAAb,CADT,EAEErB,UAAU,CAACkD,uCAFb;AAKAjC,MAAAA,cAAc,CAACG,OAAf,CACExB,OAAO,CAACD,WAAW,CAAC4B,2BAAb,CADT,EAEEC,IAAI,CAACC,SAAL,CAAec,MAAf,CAFF;AAKAtB,MAAAA,cAAc,CAACG,OAAf,CACExB,OAAO,CAACD,WAAW,CAACwD,yBAAb,CADT,EAEE3B,IAAI,CAACC,SAAL,CAAewB,QAAf,CAFF;AAKAhC,MAAAA,cAAc,CAACG,OAAf,CACExB,OAAO,CAACD,WAAW,CAAC+B,2BAAb,CADT,EAEE1B,UAAU,CAACoD,mCAFb;AAKAvD,MAAAA,SAAS,CAAC+B,WAAV,CAAsBX,cAAc,CAACY,EAArC,EAAyCZ,cAAzC,EAtDqD,CAwDrD;;AACA,aAAO,IAAP;AACD,KAnPyB;;AAAA,SAsP1BoC,0BAtP0B,GAsPItD,MAAD,IAA0B;AACrD,YAAMwC,MAAM,GAAG;AACb,wBAAgBvC,UAAU,CAACwC,wBADd;AAEb3B,QAAAA,KAAK,EAAEC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,MAA5B;AAFM,OAAf,CADqD,CAOrD;;AACA,YAAMyB,KAAK,GAAG1C,MAAd;AAEA,YAAMgD,IAAI,GAAG;AACXO,QAAAA,IAAI,EAAE,KAAKrB,KAAL,CAAWsB,KADN;AAEXP,QAAAA,UAAU,EAAEP;AAFD,OAAb;AAKA,YAAMQ,QAAQ,GAAG;AACfF,QAAAA,IAAI,EAAEA;AADS,OAAjB,CAfqD,CAmBrD;;AAEA,YAAM9B,cAAc,GAAG,IAAIxB,OAAJ,CACrBG,OAAO,CAACD,WAAW,CAACuB,qBAAb,CADc,CAAvB,CArBqD,CAyBrD;;AACA,WAAKX,wBAAL,GAAgCU,cAAc,CAACE,SAA/C;AACAF,MAAAA,cAAc,CAACG,OAAf,CACExB,OAAO,CAACD,WAAW,CAAC0B,8BAAb,CADT,EAEErB,UAAU,CAACwD,uCAFb;AAKAvC,MAAAA,cAAc,CAACG,OAAf,CACExB,OAAO,CAACD,WAAW,CAAC4B,2BAAb,CADT,EAEEC,IAAI,CAACC,SAAL,CAAec,MAAf,CAFF;AAKAtB,MAAAA,cAAc,CAACG,OAAf,CACExB,OAAO,CAACD,WAAW,CAACwD,yBAAb,CADT,EAEE3B,IAAI,CAACC,SAAL,CAAewB,QAAf,CAFF;AAKAhC,MAAAA,cAAc,CAACG,OAAf,CACExB,OAAO,CAACD,WAAW,CAAC+B,2BAAb,CADT,EAEE1B,UAAU,CAACyD,2BAFb;AAKA5D,MAAAA,SAAS,CAAC+B,WAAV,CAAsBX,cAAc,CAACY,EAArC,EAAyCZ,cAAzC,EA/CqD,CAgDrD;;AAEA,aAAO,IAAP;AACD,KAzSyB;;AAExB,SAAKyC,OAAL,GAAe,KAAKA,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAf,CAFwB,CAIxB;;AACA,SAAKC,kBAAL,GAA0B,CACxBhE,OAAO,CAACD,WAAW,CAACkE,kBAAb,CADiB,EAExBjE,OAAO,CAACD,WAAW,CAACmE,sBAAb,CAFiB,CAA1B;AAKA,QAAIC,+BAA+B,GAAG;AACpCrB,MAAAA,QAAQ,EAAE5C,GAAG,CAACkE,MAAJ,GAAaC,QAAb,CAAsBjE,UAAU,CAACkE,cAAjC,CAD0B;AAEpCvB,MAAAA,WAAW,EAAE7C,GAAG,CAACkE,MAAJ,GAAaC,QAAb,CAAsBjE,UAAU,CAACmE,qBAAjC,CAFuB;AAGpCrB,MAAAA,iBAAiB,EAAEhD,GAAG,CAACkE,MAAJ,GAChBC,QADgB,CACPjE,UAAU,CAACoE,eADJ,EAEhBC,OAFgB,CAGfrE,UAAU,CAACsE,wBAHI,EAIftE,UAAU,CAACuE,kBAJI,CAHiB;AASpChB,MAAAA,KAAK,EAAEzD,GAAG,CAACkE,MAAJ,GACJT,KADI,CACEvD,UAAU,CAACwE,oBADb,EAEJP,QAFI,CAEKjE,UAAU,CAACyE,eAFhB,CAT6B;AAYpC7B,MAAAA,OAAO,EAAE9C,GAAG,CAACkE,MAAJ,GAAaC,QAAb,CAAsBjE,UAAU,CAAC0E,iBAAjC,CAZ2B;AAapCC,MAAAA,WAAW,EAAE7E,GAAG,CAACkE,MAAJ,GAAaC,QAAb,CAAsBjE,UAAU,CAAC4E,qBAAjC,CAbuB;AAcpC/B,MAAAA,OAAO,EAAE/C,GAAG,CAACkE,MAAJ,GACNa,QADM,GAENZ,QAFM,CAEGjE,UAAU,CAAC8E,iBAFd;AAd2B,KAAtC;AAmBA,QAAIC,2BAA2B,GAAG;AAChCC,MAAAA,YAAY,EAAElF,GAAG,CAACkE,MAAJ,GAAaC,QAAb,CAAsBjE,UAAU,CAACiF,aAAjC,CADkB;AAEhCC,MAAAA,YAAY,EAAEpF,GAAG,CAACkE,MAAJ,GACXC,QADW,CACFjE,UAAU,CAACmF,qBADT,EAEXd,OAFW,CAGVrE,UAAU,CAACoF,2BAHD,EAIVpF,UAAU,CAACqF,wBAJD,CAFkB;AAQhCC,MAAAA,oBAAoB,EAAExF,GAAG,CAACkE,MAAJ,GACnBC,QADmB,CACVjE,UAAU,CAACuF,4BADD,EAEnBC,IAFmB,CAEd,aAFc,EAEC;AACnBC,QAAAA,EAAE,EAAGC,GAAD,IAAUA,GAAG,IAAIA,GAAG,CAACC,MAAJ,GAAa,CAApB,GAAwB,IAAxB,GAA+B,KAD1B;AAEnBC,QAAAA,IAAI,EAAE9F,GAAG,CAACkE,MAAJ,GAAa6B,KAAb,CACJ,CAAC/F,GAAG,CAACgG,GAAJ,CAAQ,aAAR,CAAD,CADI,EAEJ9F,UAAU,CAAC+F,+BAFP;AAFa,OAFD;AARU,KAAlC;AAmBA,SAAK9D,KAAL,GAAa;AACX+D,MAAAA,QAAQ,EAAEhG,UAAU,CAACiG,UAAX,IAAyBjG,UAAU,CAACkG,KADnC;AAEXlE,MAAAA,aAAa,EAAE,IAFJ;AAGXmE,MAAAA,UAAU,EAAE,EAHD;AAIXpC,MAAAA,+BAA+B,EAAEA,+BAJtB;AAKXgB,MAAAA,2BAA2B,EAAEA,2BALlB;AAMXrC,MAAAA,QAAQ,EAAE,EANC;AAOXC,MAAAA,WAAW,EAAE,EAPF;AAQXG,MAAAA,iBAAiB,EAAE,EARR;AASXS,MAAAA,KAAK,EAAE,EATI;AAUXX,MAAAA,OAAO,EAAE,EAVE;AAWXC,MAAAA,OAAO,EAAE,EAXE;AAYX8B,MAAAA,WAAW,EAAE,EAZF;AAaXxC,MAAAA,kBAAkB,EAAE,IAbT;AAcXC,MAAAA,cAAc,EAAE,KAdL;AAeX4C,MAAAA,YAAY,EAAE,EAfH;AAgBXE,MAAAA,YAAY,EAAE,EAhBH;AAiBXI,MAAAA,oBAAoB,EAAE;AAjBX,KAAb;AAoBAzF,IAAAA,SAAS,CAACuG,mBAAV,CAA8B,IAA9B,EAA8C,KAAKxC,kBAAnD;AACD,GA1EoF,CA4ErF;;;AAEMyC,EAAAA,iBAAN,GAA0B;AAAA;;AAAA;AAAA;AAAA;AAAA;AACxB,YAAA,KAAI,CAAC7F,qBAAL;;AADwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEzB;;AAEKkD,EAAAA,OAAN,CAAc4C,IAAd,EAA4BC,OAA5B,EAA8C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAC5C;AACA1G,YAAAA,SAAS,CAAC2G,QAAV,CAAmB,iBAAnB,EAAsCD,OAAtC;;AAEA,gBAAI3G,OAAO,CAACD,WAAW,CAACmE,sBAAb,CAAP,KAAgDyC,OAAO,CAAC1E,EAA5D,EAAgE;AAC1D4E,cAAAA,YAD0D,GAC3CF,OAAO,CAACG,OAAR,CACjB9G,OAAO,CAACD,WAAW,CAACgH,6BAAb,CADU,CAD2C;;AAI9D,kBAAIF,YAAY,IAAI,CAACA,YAAY,CAACG,MAA9B,IAAwCH,YAAY,CAAC1D,IAAzD,EAA+D;AACvD8D,gBAAAA,gBADuD,GACpCN,OAAO,CAACG,OAAR,CACvB9G,OAAO,CAACD,WAAW,CAACmH,0BAAb,CADgB,CADoC;;AAI7D,oBAAID,gBAAgB,IAAI,IAAxB,EAA8B;AAE5B;AACA,sBAAIA,gBAAgB,KAAK,MAAI,CAACxG,oBAA9B,EAAoD;AAClDI,oBAAAA,OAAO,CAACC,GAAR,CAAY+F,YAAY,CAAC1D,IAAzB;;AACA,oBAAA,MAAI,CAAChB,QAAL,CAAc;AACZW,sBAAAA,QAAQ,EAAE+D,YAAY,CAAC1D,IAAb,CAAkBC,UAAlB,CAA6BN,QAD3B;AAEZa,sBAAAA,KAAK,EAAEkD,YAAY,CAAC1D,IAAb,CAAkBC,UAAlB,CAA6BO,KAFxB;AAGZZ,sBAAAA,WAAW,EAAE8D,YAAY,CAAC1D,IAAb,CAAkBC,UAAlB,CAA6BL,WAH9B;AAIZG,sBAAAA,iBAAiB,EAAE2D,YAAY,CAAC1D,IAAb,CAAkBC,UAAlB,CAA6BF,iBAJpC;AAKZF,sBAAAA,OAAO,EAAE6D,YAAY,CAAC1D,IAAb,CAAkBC,UAAlB,CAA6BJ,OAL1B;AAMZ+B,sBAAAA,WAAW,EAAE8B,YAAY,CAAC1D,IAAb,CAAkBC,UAAlB,CAA6B+D,YAN9B;AAOZlE,sBAAAA,OAAO,EAAE4D,YAAY,CAAC1D,IAAb,CAAkBC,UAAlB,CAA6BH;AAP1B,qBAAd;AAUD;;AAED,sBAAIgE,gBAAgB,KAAK,MAAI,CAACvG,0BAA9B,EAA0D;AACxDG,oBAAAA,OAAO,CAACC,GAAR,CAAY+F,YAAZ,EAA0B,kBAA1B;AAED;;AAED,sBAAII,gBAAgB,KAAK,MAAI,CAACtG,wBAA9B,EAAwD;AACtDE,oBAAAA,OAAO,CAACC,GAAR,CAAY+F,YAAZ,EAA0B,kBAA1B;AAED;AAGF;AACF,eAjCD,MAiCO;AACDO,gBAAAA,YADC,GACcT,OAAO,CAACG,OAAR,CACjB9G,OAAO,CAACD,WAAW,CAACsH,2BAAb,CADU,CADd;;AAIL,gBAAA,MAAI,CAACC,0BAAL,CAAgCF,YAAhC;AACD;AACF;;AA/C2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAgD7C,GAlIoF,CAoIrF;;;AApIqF","sourcesContent":["import { IBlock } from \"../../../framework/src/IBlock\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport MessageEnum, {\n  getName,\n} from \"../../../framework/src/Messages/MessageEnum\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nimport * as Yup from \"yup\";\nimport { values } from \"lodash\";\n\n// Customizable Area Start\n// Customizable Area End\n\nexport const configJSON = require(\"./config\");\n\nexport interface Props {\n  navigation: any;\n  id: string;\n  // Customizable Area Start\n  memberDetails: any;\n  // Customizable Area End\n}\n\ninterface S {\n  // Customizable Area Start\n  userType: string;\n  menuCollapsed: boolean;\n  searchText: string | null | undefined;\n  ProfileGeneralInformationSchema: any;\n  ProfileChangePasswordSchema: any;\n  generalInformation: boolean;\n  changePassword: boolean;\n  fullname: string;\n  designation: string;\n  full_phone_number: string;\n  email: string;\n  address: string;\n  country: string;\n  companyName: string;\n  old_password: string;\n  new_password: string;\n  confirm_new_password: string,\n  // Customizable Area End\n}\n\ninterface SelectOptions {\n  value: string;\n  label: string;\n}\n\ninterface SS {\n  id: any;\n}\n\nexport default class UserProfileSettingController extends BlockComponent<Props, S, SS> {\n  userProfileApiCallId: string = \"\";\n  userUpdateProfileApiCallId: string = \"\";\n  userUpdateChangePassword: string = \"\";\n\n  constructor(props: Props) {\n    super(props);\n    this.receive = this.receive.bind(this);\n\n    // Customizable Area Start\n    this.subScribedMessages = [\n      getName(MessageEnum.AccoutLoginSuccess),\n      getName(MessageEnum.RestAPIResponceMessage),\n    ];\n\n    let ProfileGeneralInformationSchema = {\n      fullname: Yup.string().required(configJSON.errorNameEmpty),\n      designation: Yup.string().required(configJSON.errorDesignationEmpty),\n      full_phone_number: Yup.string()\n        .required(configJSON.errorPhoneEmpty)\n        .matches(\n          configJSON.PHONE_REGULAR_EXPRESSION,\n          configJSON.errorPhoneNotMatch\n        ),\n      email: Yup.string()\n        .email(configJSON.errorEmailValidation)\n        .required(configJSON.errorEmailEmpty),\n      address: Yup.string().required(configJSON.errorAddressEmpty),\n      companyName: Yup.string().required(configJSON.errorCompanyNameEmpty),\n      country: Yup.string()\n        .nullable()\n        .required(configJSON.errorCountryEmpty),\n    };\n\n    let ProfileChangePasswordSchema = {\n      old_password: Yup.string().required(configJSON.errorPassword),\n      new_password: Yup.string()\n        .required(configJSON.errorNewPasswordEmpty)\n        .matches(\n          configJSON.PASSWORD_REGULAR_EXPRESSION,\n          configJSON.errorNewPasswordNotValid\n        ),\n      confirm_new_password: Yup.string()\n        .required(configJSON.errorConfirmNewPasswordEmpty)\n        .when(\"newPassword\", {\n          is: (val) => (val && val.length > 0 ? true : false),\n          then: Yup.string().oneOf(\n            [Yup.ref(\"newPassword\")],\n            configJSON.errorConfirmNewPasswordNotMatch\n          ),\n        }),\n    };\n\n    this.state = {\n      userType: configJSON.subscriber || configJSON.admin,\n      menuCollapsed: true,\n      searchText: \"\",\n      ProfileGeneralInformationSchema: ProfileGeneralInformationSchema,\n      ProfileChangePasswordSchema: ProfileChangePasswordSchema,\n      fullname: \"\",\n      designation: \"\",\n      full_phone_number: \"\",\n      email: \"\",\n      address: \"\",\n      country: \"\",\n      companyName: \"\",\n      generalInformation: true,\n      changePassword: false,\n      old_password: \"\",\n      new_password: \"\",\n      confirm_new_password: \"\",\n    };\n\n    runEngine.attachBuildingBlock(this as IBlock, this.subScribedMessages);\n  }\n\n  // Customizable Area Start\n\n  async componentDidMount() {\n    this.getUserProfileDetails();\n  }\n\n  async receive(from: string, message: Message) {\n    // Customizable Area Start\n    runEngine.debugLog(\"Message Recived\", message);\n\n    if (getName(MessageEnum.RestAPIResponceMessage) === message.id) {\n      var responseJson = message.getData(\n        getName(MessageEnum.RestAPIResponceSuccessMessage)\n      );\n      if (responseJson && !responseJson.errors && responseJson.data) {\n        const apiRequestCallId = message.getData(\n          getName(MessageEnum.RestAPIResponceDataMessage)\n        );\n        if (apiRequestCallId != null) {\n\n          //console.log(responseJson.data)\n          if (apiRequestCallId === this.userProfileApiCallId) {\n            console.log(responseJson.data)\n            this.setState({\n              fullname: responseJson.data.attributes.fullname,\n              email: responseJson.data.attributes.email,\n              designation: responseJson.data.attributes.designation,\n              full_phone_number: responseJson.data.attributes.full_phone_number,\n              address: responseJson.data.attributes.address,\n              companyName: responseJson.data.attributes.company_name,\n              country: responseJson.data.attributes.country,\n\n            });\n          }\n\n          if (apiRequestCallId === this.userUpdateProfileApiCallId) {\n            console.log(responseJson, \"updated response\")\n\n          }\n\n          if (apiRequestCallId === this.userUpdateChangePassword) {\n            console.log(responseJson, \"updated password\")\n\n          }\n\n\n        }\n      } else {\n        var errorReponse = message.getData(\n          getName(MessageEnum.RestAPIResponceErrorMessage)\n        );\n        this.parseApiCatchErrorResponse(errorReponse);\n      }\n    }\n  }\n\n  // Handler Profile Details\n  getUserProfileDetails = (): boolean => {\n    console.log(\"method called\")\n    console.log(values)\n    const headers = {\n      \"Content-Type\": configJSON.contentTypeApiGetUserProfile,\n      token: window.localStorage.getItem(\"auth\"),\n    };\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n    this.userProfileApiCallId = requestMessage.messageId;\n    console.log(\"this.userProfileApiCallId\", this.userProfileApiCallId);\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.endPointApiGetUserProfileDetails\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(headers)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.methodTypeApiGetUserProfile\n    );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n\n    return true;\n  };\n\n  onMenuToggle = () => {\n    this.setState({\n      menuCollapsed: !this.state.menuCollapsed,\n    });\n  };\n\n  handleGeneralInformation = () => {\n    this.setState({\n      generalInformation: true,\n      changePassword: false,\n    });\n  };\n\n  handleChangePassword = () => {\n    this.setState({\n      changePassword: true,\n      generalInformation: false,\n    });\n  };\n\n  //// handle api for update profile details\n\n  handleUpdateProfileDetails = (values: any): boolean => {\n    const header = {\n      \"Content-Type\": configJSON.contentTypeApiUpdateUser,\n      token: window.localStorage.getItem(\"auth\"),\n    };\n\n\n    //console.log(values);\n\n    const attrs =\n    {\n      \"fullname\": values.fullname,\n      \"designation\": values.designation,\n      \"address\": values.address,\n      \"country\": values.country,\n      \"full_phone_number\": values.full_phone_number\n    }\n\n    const data = {\n      attributes: attrs,\n    };\n\n    const httpBody = {\n      data: data,\n    };\n\n    //console.log(\"httpBody\", httpBody);\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n    //console.log(\"requestMessage\", requestMessage);\n    this.userUpdateProfileApiCallId = requestMessage.messageId;\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.endPointApiPutUserProfileUpdatedDetails\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(header)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestBodyMessage),\n      JSON.stringify(httpBody)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.methodTypeApiPostUserProfileUpdated\n    );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n\n    //console.log(\"values\", values);\n    return true;\n  };\n\n  //// handle api for change password\n  handleUpdateChangePassword = (values: any): boolean => {\n    const header = {\n      \"Content-Type\": configJSON.contentTypeApiUpdateUser,\n      token: window.localStorage.getItem(\"auth\"),\n\n    };\n\n    // console.log(\"this.state\", this.state);\n    const attrs = values\n\n    const data = {\n      type: this.state.email,\n      attributes: attrs,\n    };\n\n    const httpBody = {\n      data: data,\n    };\n\n    //console.log(\"httpBody\", httpBody);\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n    //console.log(\"requestMessage\", requestMessage);\n    this.userUpdateChangePassword = requestMessage.messageId;\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.endPointApiPostUserUpdateChangePassword\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(header)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestBodyMessage),\n      JSON.stringify(httpBody)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.callTypeApiValidateMobileNo\n    );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n    //console.log(\"values\", values);\n\n    return true\n  }\n}\n"]},"metadata":{},"sourceType":"module"}