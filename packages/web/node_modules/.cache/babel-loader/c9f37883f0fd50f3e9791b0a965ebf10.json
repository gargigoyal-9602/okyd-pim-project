{"ast":null,"code":"import _regeneratorRuntime from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport MessageEnum, { getName } from \"../../../framework/src/Messages/MessageEnum\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nexport const configJSON = require(\"./config\");\nexport default class CategoriessubcategoriesController extends BlockComponent {\n  constructor(props) {\n    super(props);\n    this.getCategoriesApiCallId = void 0;\n    this.deleteCategoriesApiCallId = void 0;\n    this.deleteSubCategoriesApiCallId = void 0;\n    this.addCategoryApiCallId = void 0;\n    this.addSubCategoryApiCallId = void 0;\n\n    this.getToken = () => {\n      const msg = new Message(getName(MessageEnum.SessionRequestMessage));\n      this.send(msg);\n    };\n\n    this.setCategoryTxt = text => {\n      this.setState({\n        category: text\n      });\n    };\n\n    this.setSubCategoryTxt = text => {\n      this.setState({\n        subCategory: text\n      });\n    };\n\n    this.clickCategory = (item, Index) => {\n      let array = this.state.categoriesArray;\n      let idarray = this.state.selectedCategoryID;\n      let index = idarray.indexOf(item.attributes.id);\n\n      if (index > -1) {\n        idarray.splice(index, 1);\n        array[Index].Check = false;\n        this.setState({\n          categoriesArray: array\n        });\n      } else {\n        idarray.push(item.attributes.id);\n        array[Index].Check = true;\n        this.setState({\n          categoriesArray: array\n        });\n        this.setState({\n          selectedCategoryID: idarray\n        });\n      }\n    };\n\n    this.toggleModal = type => {\n      this.setState({\n        activeModalType: type,\n        isVisible: !this.state.isVisible\n      });\n    };\n\n    this.expandCategoryView = () => {\n      this.setState({\n        dropdownCategoryStatus: !this.state.dropdownCategoryStatus\n      });\n    };\n\n    this.expand = id => {\n      let array = this.state.categoriesArray;\n\n      for (let i = 0; i < array.length; i++) {\n        if (array[i].id === id) {\n          array[i].expand = !array[i].expand;\n        }\n      }\n\n      this.setState({\n        categoriesArray: array\n      });\n    };\n\n    this.addCategory = () => {\n      if (this.isStringNullOrBlank(this.state.category)) {\n        this.showAlert(configJSON.errorTitle, configJSON.errorAllFieldsAreMandatory);\n        return false;\n      } else {\n        let data = {\n          categories: [{\n            name: this.state.category\n          }]\n        };\n        const header = {\n          \"Content-Type\": configJSON.categoryApiContentType,\n          token: this.state.token\n        };\n        const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n        this.addCategoryApiCallId = requestMessage.messageId;\n        requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.categoryAPIEndPoint);\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(header));\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(data));\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.httpPostType);\n        runEngine.sendMessage(requestMessage.id, requestMessage);\n        return true;\n      }\n    };\n\n    this.addSubCategory = () => {\n      if (this.isStringNullOrBlank(this.state.subCategory)) {\n        this.showAlert(configJSON.errorTitle, configJSON.errorAllFieldsAreMandatory);\n        return false;\n      } else if (this.state.selectedCategoryID.length === 0) {\n        this.showAlert(configJSON.errorTitle, configJSON.errorCategory);\n        return false;\n      } else {\n        let data = {\n          sub_category: {\n            name: this.state.subCategory\n          },\n          parent_categories: this.state.selectedCategoryID\n        };\n        const header = {\n          \"Content-Type\": configJSON.categoryApiContentType,\n          token: this.state.token\n        };\n        const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n        this.addSubCategoryApiCallId = requestMessage.messageId;\n        requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.subCategoryAPIEndPoint);\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(header));\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(data));\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.httpPostType);\n        runEngine.sendMessage(requestMessage.id, requestMessage);\n        return true;\n      }\n    };\n\n    this.deleteCategories = id => {\n      const header = {\n        \"Content-Type\": configJSON.categoryApiContentType,\n        token: this.state.token\n      };\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      this.deleteCategoriesApiCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.categoryAPIEndPoint + \"/\".concat(id));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(header));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.httpDeleteType);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    };\n\n    this.deleteSubCategories = id => {\n      const header = {\n        \"Content-Type\": configJSON.categoryApiContentType,\n        token: this.state.token\n      };\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      this.deleteSubCategoriesApiCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.subCategoryAPIEndPoint + \"/\".concat(id));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(header));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.httpDeleteType);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    };\n\n    this.getCategories = token => {\n      const header = {\n        \"Content-Type\": configJSON.categoryApiContentType,\n        token: token\n      };\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      this.getCategoriesApiCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.categoryAPIEndPoint);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(header));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.httpGetType);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n    };\n\n    this.receive = this.receive.bind(this); // Customizable Area Start\n\n    this.subScribedMessages = [getName(MessageEnum.SessionResponseMessage), getName(MessageEnum.RestAPIResponceMessage)];\n    this.state = {\n      token: \"\",\n      categoriesArray: [],\n      category: \"\",\n      subCategory: \"\",\n      isVisible: false,\n      dropdownCategoryStatus: false,\n      activeModalType: \"\",\n      selectedCategoryID: []\n    }; // Customizable Area End\n\n    runEngine.attachBuildingBlock(this, this.subScribedMessages);\n  }\n\n  componentDidMount() {\n    var _superprop_getComponentDidMount = () => super.componentDidMount,\n        _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _superprop_getComponentDidMount().call(_this);\n\n            _this.getToken();\n\n            if (_this.isPlatformWeb() === false) {\n              _this.props.navigation.addListener(\"willFocus\", () => {\n                _this.getToken();\n              });\n            }\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  }\n\n  receive(from, message) {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var token, apiRequestCallId, responseJson, errorReponse, array, i;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            // Customizable Area Start\n            if (getName(MessageEnum.SessionResponseMessage) === message.id) {\n              runEngine.debugLog(\"Message Recived\", message);\n              token = message.getData(getName(MessageEnum.SessionResponseToken));\n\n              _this2.setState({\n                token: token\n              });\n\n              _this2.getCategories(token);\n            } else if (getName(MessageEnum.RestAPIResponceMessage) === message.id) {\n              apiRequestCallId = message.getData(getName(MessageEnum.RestAPIResponceDataMessage));\n              responseJson = message.getData(getName(MessageEnum.RestAPIResponceSuccessMessage));\n              errorReponse = message.getData(getName(MessageEnum.RestAPIResponceErrorMessage));\n              runEngine.debugLog(\"API Message Recived\", message);\n\n              if (responseJson && responseJson.data) {\n                if (apiRequestCallId === _this2.getCategoriesApiCallId) {\n                  // alert(JSON.stringify(responseJson.data.faqs))\n                  array = responseJson.data;\n\n                  for (i = 0; i < array.length; i++) {\n                    array[i].expand = false;\n                    array[i].Check = false;\n                  }\n\n                  _this2.setState({\n                    categoriesArray: array\n                  });\n                } else if (apiRequestCallId === _this2.addCategoryApiCallId) {\n                  _this2.setState({\n                    isVisible: false,\n                    category: \"\"\n                  }, () => {\n                    _this2.getCategories(_this2.state.token);\n                  });\n                } else if (apiRequestCallId === _this2.addSubCategoryApiCallId) {\n                  _this2.setState({\n                    isVisible: false,\n                    category: \"\",\n                    subCategory: \"\",\n                    selectedCategoryID: []\n                  }, () => {\n                    _this2.getCategories(_this2.state.token);\n                  });\n                } //this.setState({ isVisible: false });\n\n              } else if (apiRequestCallId === _this2.deleteCategoriesApiCallId && !responseJson.error) {\n                _this2.getCategories(_this2.state.token);\n              } else if (apiRequestCallId === _this2.deleteCategoriesApiCallId && responseJson.error) {\n                _this2.parseApiCatchErrorResponse(responseJson.error.message);\n              } else if (apiRequestCallId === _this2.deleteSubCategoriesApiCallId && !responseJson.error) {\n                _this2.getCategories(_this2.state.token);\n              } else if (apiRequestCallId === _this2.deleteSubCategoriesApiCallId && responseJson.error) {\n                _this2.parseApiCatchErrorResponse(responseJson.error.message);\n              } else if (responseJson && responseJson.errors) {\n                _this2.parseApiErrorResponse(responseJson);\n\n                _this2.parseApiCatchErrorResponse(errorReponse);\n              }\n            } // Customizable Area End\n\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }))();\n  } // Customizable Area Start\n\n\n  isStringNullOrBlank(str) {\n    return str === null || str.length === 0;\n  } // Customizable Area End\n\n\n}","map":{"version":3,"sources":["/home/lp-greenapex/gargi/okydpim-36944-react-native/src/packages/blocks/categoriessubcategories/src/CategoriessubcategoriesController.tsx"],"names":["Message","BlockComponent","MessageEnum","getName","runEngine","configJSON","require","CategoriessubcategoriesController","constructor","props","getCategoriesApiCallId","deleteCategoriesApiCallId","deleteSubCategoriesApiCallId","addCategoryApiCallId","addSubCategoryApiCallId","getToken","msg","SessionRequestMessage","send","setCategoryTxt","text","setState","category","setSubCategoryTxt","subCategory","clickCategory","item","Index","array","state","categoriesArray","idarray","selectedCategoryID","index","indexOf","attributes","id","splice","Check","push","toggleModal","type","activeModalType","isVisible","expandCategoryView","dropdownCategoryStatus","expand","i","length","addCategory","isStringNullOrBlank","showAlert","errorTitle","errorAllFieldsAreMandatory","data","categories","name","header","categoryApiContentType","token","requestMessage","RestAPIRequestMessage","messageId","addData","RestAPIResponceEndPointMessage","categoryAPIEndPoint","RestAPIRequestHeaderMessage","JSON","stringify","RestAPIRequestBodyMessage","RestAPIRequestMethodMessage","httpPostType","sendMessage","addSubCategory","errorCategory","sub_category","parent_categories","subCategoryAPIEndPoint","deleteCategories","httpDeleteType","deleteSubCategories","getCategories","httpGetType","receive","bind","subScribedMessages","SessionResponseMessage","RestAPIResponceMessage","attachBuildingBlock","componentDidMount","isPlatformWeb","navigation","addListener","from","message","debugLog","getData","SessionResponseToken","apiRequestCallId","RestAPIResponceDataMessage","responseJson","RestAPIResponceSuccessMessage","errorReponse","RestAPIResponceErrorMessage","error","parseApiCatchErrorResponse","errors","parseApiErrorResponse","str"],"mappings":"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","sourcesContent":["import { IBlock } from \"../../../framework/src/IBlock\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport MessageEnum, {\n  getName\n} from \"../../../framework/src/Messages/MessageEnum\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\n\nexport const configJSON = require(\"./config\");\n\nexport interface Props {\n  navigation: any;\n  id: string;\n  // Customizable Area Start\n  // Customizable Area End\n}\n\ninterface S {\n  // Customizable Area Start\n  token: string;\n  categoriesArray: any;\n  category: string;\n  subCategory: string;\n  isVisible: boolean;\n  dropdownCategoryStatus: boolean;\n  activeModalType: string;\n  selectedCategoryID: any;\n  // Customizable Area End\n}\n\ninterface SS {\n  id: any;\n}\n\nexport default class CategoriessubcategoriesController extends BlockComponent<\n  Props,\n  S,\n  SS\n> {\n  getCategoriesApiCallId: any;\n  deleteCategoriesApiCallId: any;\n  deleteSubCategoriesApiCallId: any;\n  addCategoryApiCallId: any;\n  addSubCategoryApiCallId: any;\n  constructor(props: Props) {\n    super(props);\n    this.receive = this.receive.bind(this);\n\n    // Customizable Area Start\n    this.subScribedMessages = [\n      getName(MessageEnum.SessionResponseMessage),\n      getName(MessageEnum.RestAPIResponceMessage)\n    ];\n\n    this.state = {\n      token: \"\",\n      categoriesArray: [],\n      category: \"\",\n      subCategory: \"\",\n      isVisible: false,\n      dropdownCategoryStatus: false,\n      activeModalType: \"\",\n      selectedCategoryID: []\n    };\n    // Customizable Area End\n    runEngine.attachBuildingBlock(this as IBlock, this.subScribedMessages);\n  }\n\n  async componentDidMount() {\n    super.componentDidMount();\n    this.getToken();\n    if (this.isPlatformWeb() === false) {\n      this.props.navigation.addListener(\"willFocus\", () => {\n        this.getToken();\n      });\n    }\n  }\n  \n  getToken = () => {\n    const msg: Message = new Message(\n      getName(MessageEnum.SessionRequestMessage)\n    );\n    this.send(msg);\n  };\n\n  async receive(from: string, message: Message) {\n    // Customizable Area Start\n    if (getName(MessageEnum.SessionResponseMessage) === message.id) {\n      runEngine.debugLog(\"Message Recived\", message);\n\n      let token = message.getData(getName(MessageEnum.SessionResponseToken));\n      this.setState({ token: token });\n      this.getCategories(token);\n    } else if (getName(MessageEnum.RestAPIResponceMessage) === message.id) {\n      const apiRequestCallId = message.getData(\n        getName(MessageEnum.RestAPIResponceDataMessage)\n      );\n\n      var responseJson = message.getData(\n        getName(MessageEnum.RestAPIResponceSuccessMessage)\n      );\n\n      var errorReponse = message.getData(\n        getName(MessageEnum.RestAPIResponceErrorMessage)\n      );\n      runEngine.debugLog(\"API Message Recived\", message);\n      if (responseJson && responseJson.data) {\n        if (apiRequestCallId === this.getCategoriesApiCallId) {\n          // alert(JSON.stringify(responseJson.data.faqs))\n          let array = responseJson.data;\n          for (let i = 0; i < array.length; i++) {\n            array[i].expand = false;\n            array[i].Check = false;\n          }\n          this.setState({ categoriesArray: array });\n        } else if (apiRequestCallId === this.addCategoryApiCallId) {\n          this.setState({ isVisible: false, category: \"\" }, () => {\n            this.getCategories(this.state.token);\n          });\n        } else if (apiRequestCallId === this.addSubCategoryApiCallId) {\n          this.setState(\n            {\n              isVisible: false,\n              category: \"\",\n              subCategory: \"\",\n              selectedCategoryID: []\n            },\n            () => {\n              this.getCategories(this.state.token);\n            }\n          );\n        }\n        //this.setState({ isVisible: false });\n      } else if (\n        apiRequestCallId === this.deleteCategoriesApiCallId && !responseJson.error\n      ) {\n        this.getCategories(this.state.token);\n      } \n      else if( apiRequestCallId === this.deleteCategoriesApiCallId && responseJson.error){\n        this.parseApiCatchErrorResponse(responseJson.error.message);\n      }\n      else if (\n        apiRequestCallId === this.deleteSubCategoriesApiCallId && !responseJson.error\n      ) {\n        this.getCategories(this.state.token);\n      } \n      else if (\n        apiRequestCallId === this.deleteSubCategoriesApiCallId && responseJson.error\n      ) {\n        this.parseApiCatchErrorResponse(responseJson.error.message);\n      }\n      else if (responseJson && responseJson.errors) {\n        this.parseApiErrorResponse(responseJson);\n        this.parseApiCatchErrorResponse(errorReponse);\n      }\n    }\n    // Customizable Area End\n  }\n\n  // Customizable Area Start\n\n  setCategoryTxt = (text: string) => {\n    this.setState({ category: text });\n  };\n  setSubCategoryTxt = (text: string) => {\n    this.setState({ subCategory: text });\n  };\n  clickCategory = (item: any, Index: number) => {\n    let array = this.state.categoriesArray;\n    let idarray = this.state.selectedCategoryID;\n    let index = idarray.indexOf(item.attributes.id);\n\n    if (index > -1) {\n      idarray.splice(index, 1);\n      array[Index].Check = false;\n      this.setState({ categoriesArray: array });\n    } else {\n      idarray.push(item.attributes.id);\n      array[Index].Check = true;\n      this.setState({ categoriesArray: array });\n      this.setState({ selectedCategoryID: idarray });\n    }\n  };\n\n  toggleModal = (type: string) => {\n    this.setState({ activeModalType: type, isVisible: !this.state.isVisible });\n  };\n\n  expandCategoryView = () => {\n    this.setState({\n      dropdownCategoryStatus: !this.state.dropdownCategoryStatus\n    });\n  };\n  expand = (id: string) => {\n    let array = this.state.categoriesArray;\n    for (let i = 0; i < array.length; i++) {\n      if (array[i].id === id) {\n        array[i].expand = !array[i].expand;\n      }\n    }\n    this.setState({ categoriesArray: array });\n  };\n\n  isStringNullOrBlank(str: string) {\n    return str === null || str.length === 0;\n  }\n\n  addCategory = () => {\n    if (this.isStringNullOrBlank(this.state.category)) {\n      this.showAlert(\n        configJSON.errorTitle,\n        configJSON.errorAllFieldsAreMandatory\n      );\n      return false;\n    } else {\n      let data = {\n        categories: [{ name: this.state.category }]\n      };\n      const header = {\n        \"Content-Type\": configJSON.categoryApiContentType,\n        token: this.state.token\n      };\n      const requestMessage = new Message(\n        getName(MessageEnum.RestAPIRequestMessage)\n      );\n\n      this.addCategoryApiCallId = requestMessage.messageId;\n\n      requestMessage.addData(\n        getName(MessageEnum.RestAPIResponceEndPointMessage),\n        configJSON.categoryAPIEndPoint\n      );\n      requestMessage.addData(\n        getName(MessageEnum.RestAPIRequestHeaderMessage),\n        JSON.stringify(header)\n      );\n      requestMessage.addData(\n        getName(MessageEnum.RestAPIRequestBodyMessage),\n        JSON.stringify(data)\n      );\n      requestMessage.addData(\n        getName(MessageEnum.RestAPIRequestMethodMessage),\n        configJSON.httpPostType\n      );\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    }\n  };\n  addSubCategory = () => {\n    if (this.isStringNullOrBlank(this.state.subCategory)) {\n      this.showAlert(\n        configJSON.errorTitle,\n        configJSON.errorAllFieldsAreMandatory\n      );\n      return false;\n    } else if (this.state.selectedCategoryID.length === 0) {\n      this.showAlert(configJSON.errorTitle, configJSON.errorCategory);\n      return false;\n    } else {\n      let data = {\n        sub_category: {\n          name: this.state.subCategory\n        },\n        parent_categories: this.state.selectedCategoryID\n      };\n      const header = {\n        \"Content-Type\": configJSON.categoryApiContentType,\n        token: this.state.token\n      };\n      const requestMessage = new Message(\n        getName(MessageEnum.RestAPIRequestMessage)\n      );\n\n      this.addSubCategoryApiCallId = requestMessage.messageId;\n\n      requestMessage.addData(\n        getName(MessageEnum.RestAPIResponceEndPointMessage),\n        configJSON.subCategoryAPIEndPoint\n      );\n      requestMessage.addData(\n        getName(MessageEnum.RestAPIRequestHeaderMessage),\n        JSON.stringify(header)\n      );\n      requestMessage.addData(\n        getName(MessageEnum.RestAPIRequestBodyMessage),\n        JSON.stringify(data)\n      );\n      requestMessage.addData(\n        getName(MessageEnum.RestAPIRequestMethodMessage),\n        configJSON.httpPostType\n      );\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    }\n  };\n\n  deleteCategories = (id: number) => {\n    const header = {\n      \"Content-Type\": configJSON.categoryApiContentType,\n      token: this.state.token\n    };\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n    this.deleteCategoriesApiCallId = requestMessage.messageId;\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.categoryAPIEndPoint + `/${id}`\n    );\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(header)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.httpDeleteType\n    );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n    return true;\n  };\n\n  deleteSubCategories = (id: number) => {\n    const header = {\n      \"Content-Type\": configJSON.categoryApiContentType,\n      token: this.state.token\n    };\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n    this.deleteSubCategoriesApiCallId = requestMessage.messageId;\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.subCategoryAPIEndPoint + `/${id}`\n    );\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(header)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.httpDeleteType\n    );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n    return true;\n  };\n\n  getCategories = (token: string) => {\n    const header = {\n      \"Content-Type\": configJSON.categoryApiContentType,\n      token: token\n    };\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n    this.getCategoriesApiCallId = requestMessage.messageId;\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.categoryAPIEndPoint\n    );\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(header)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.httpGetType\n    );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n  };\n\n  // Customizable Area End\n}\n"]},"metadata":{},"sourceType":"module"}