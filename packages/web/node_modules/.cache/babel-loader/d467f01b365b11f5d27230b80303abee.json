{"ast":null,"code":"import _regeneratorRuntime from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"/home/lp-greenapex/gargi/okydpim-36944-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport RichTextEditor from 'react-rte';\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport MessageEnum, { getName } from \"../../../framework/src/Messages/MessageEnum\";\nimport { runEngine } from \"../../../framework/src/RunEngine\"; // Customizable Area Start\n// import { imgPasswordInVisible, imgPasswordVisible } from \"./assets\";\n// Customizable Area End\n\nexport const configJSON = require(\"./brands.config\");\nexport default class BrandsController extends BlockComponent {\n  constructor(props) {\n    super(props);\n    this.auth = window.localStorage.getItem(\"auth\");\n    this.getBrandApiCallId = \"\";\n    this.brandDetailsApiCallId = \"\";\n    this.brandCreateApiCallId = \"\";\n    this.brandUpdateApiCallId = \"\";\n    this.deleteBrandApiCallId = \"\";\n\n    this.getBrandList = () => {\n      const headers = {\n        \"Content-Type\": configJSON.apiContentType,\n        token: this.auth\n      };\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      this.getBrandApiCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.apiEndPoint);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.httpGetType);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    };\n\n    this.brandDetails = accountId => {\n      const headers = {\n        \"Content-Type\": configJSON.apiContentType,\n        token: this.auth\n      };\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      this.brandDetailsApiCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), \"\".concat(configJSON.apiEndPoint, \"/\").concat(accountId));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.httpGetType);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    };\n\n    this.createBrand = values => {\n      const headers = {\n        \"Content-Type\": configJSON.apiContentType,\n        token: this.auth\n      };\n      const httpBody = values;\n      const apiEndPoint = configJSON.apiEndPoint;\n      const methodType = configJSON.httpPostType;\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      this.brandCreateApiCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), apiEndPoint);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(httpBody));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), methodType);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    };\n\n    this.updateBrand = values => {\n      const brandId = values.brandId,\n            restValues = _objectWithoutProperties(values, [\"brandId\"]);\n\n      const headers = {\n        \"Content-Type\": configJSON.apiContentType,\n        token: this.auth\n      };\n      const httpBody = {\n        brand: _objectSpread({}, restValues)\n      };\n      const apiEndPoint = \"\".concat(configJSON.apiEndPoint, \"/\").concat(values.brandId);\n      const methodType = configJSON.httpPutType;\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      this.brandUpdateApiCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), apiEndPoint);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(httpBody));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), methodType);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    };\n\n    this.deleteBrandHandler = accountId => {\n      const headers = {\n        token: this.auth\n      };\n      const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      this.deleteBrandApiCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), \"\".concat(configJSON.apiEndPoint, \"/\").concat(accountId));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.httpDeleteType);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    };\n\n    this.handleImageUpload = event => {\n      var file = event.target.files[0];\n      const reader = new FileReader();\n      var url = reader.readAsDataURL(file);\n\n      reader.onloadend = e => {\n        this.setState({\n          selectedFile: [reader.result]\n        });\n      };\n\n      console.log(url);\n      this.setState({\n        selectedFile: event.target.files[0]\n      });\n    };\n\n    this.onMenuToggle = () => {\n      this.setState({\n        menuCollapsed: !this.state.menuCollapsed\n      });\n    };\n\n    this.openSnackBarHandler = (type, message) => {\n      this.setState({\n        snackBar: {\n          show: true,\n          message: message,\n          type\n        }\n      });\n    };\n\n    this.closeSnackBarHandler = () => {\n      this.setState({\n        snackBar: {\n          show: false,\n          message: this.state.snackBar.message,\n          type: this.state.snackBar.type\n        }\n      });\n    };\n\n    this.receive = this.receive.bind(this); // Customizable Area Start\n\n    this.subScribedMessages = [getName(MessageEnum.RestAPIResponceMessage)];\n    this.state = {\n      auth: \"\",\n      userType: configJSON.subscriber,\n      menuCollapsed: false,\n      brandsData: [],\n      brandDetailsData: [],\n      modulesData: [],\n      rolesUpdateModal: false,\n      checkbox: false,\n      snackBar: {\n        show: false\n      },\n      loader: false,\n      selectedFile: null,\n      editor: RichTextEditor.createEmptyValue()\n    }; // Customizable Area End\n\n    runEngine.attachBuildingBlock(this, this.subScribedMessages);\n  }\n\n  componentDidMount() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _this.getBrandList();\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  } // Handler for Get Catrgory List\n\n\n  receive(from, message) {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var responseJson, errorReponse, apiRequestCallId, _responseJson$data$at, errors, _this2$props;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            // Customizable Area Start\n            runEngine.debugLog(\"Message Recevied\", message);\n\n            if (getName(MessageEnum.RestAPIResponceMessage) === message.id) {\n              responseJson = message.getData(getName(MessageEnum.RestAPIResponceSuccessMessage));\n              errorReponse = message.getData(getName(MessageEnum.RestAPIResponceErrorMessage));\n              apiRequestCallId = message.getData(getName(MessageEnum.RestAPIResponceDataMessage));\n\n              if (responseJson && !responseJson.errors) {\n                if (apiRequestCallId != null) {\n                  // Store All Brands data\n                  if (apiRequestCallId === _this2.getBrandApiCallId && responseJson !== undefined) {\n                    _this2.setState({\n                      brandsData: responseJson.data\n                    });\n                  } // Store Brand detaills\n\n\n                  if (apiRequestCallId === _this2.brandDetailsApiCallId && responseJson !== undefined) {\n                    console.log('brandDetailsData', responseJson.data);\n\n                    _this2.setState({\n                      brandDetailsData: responseJson.data,\n                      editor: RichTextEditor.createValueFromString((_responseJson$data$at = responseJson.data.attributes) === null || _responseJson$data$at === void 0 ? void 0 : _responseJson$data$at.description, 'html')\n                    });\n                  } // Create Brand\n\n\n                  if (apiRequestCallId === _this2.brandCreateApiCallId && responseJson !== undefined) {\n                    _this2.openSnackBarHandler('success', configJSON.successCreateMsgText);\n\n                    setTimeout(() => {\n                      //@ts-ignore\n                      _this2.props.history.push('/brands');\n                    }, 1000);\n                  } // Update Brand\n\n\n                  if (apiRequestCallId === _this2.brandUpdateApiCallId && responseJson !== undefined) {\n                    _this2.openSnackBarHandler('success', configJSON.successUpdateMsgText);\n\n                    setTimeout(() => {\n                      //@ts-ignore\n                      _this2.props.history.push('/brands');\n                    }, 1000);\n                  } // Delete Brand\n\n\n                  if (apiRequestCallId === _this2.deleteBrandApiCallId && responseJson !== undefined) {\n                    console.log(responseJson);\n\n                    _this2.openSnackBarHandler('success', configJSON.deleteBrandMsgText);\n\n                    _this2.getBrandList();\n                  }\n                }\n              } else {\n                errors = responseJson.errors;\n\n                _this2.parseApiCatchErrorResponse(errorReponse);\n\n                if (errors[0].token === 'Invalid token' || 'Token has Expired') {\n                  AsyncStorage.setItem(\"auth\", \"\"); //@ts-ignore\n\n                  (_this2$props = _this2.props) === null || _this2$props === void 0 ? void 0 : _this2$props.history.push(\"/login\");\n                } else if (errors[0].message) {\n                  _this2.openSnackBarHandler('error', errors[0].message);\n                } else {\n                  if (apiRequestCallId === _this2.brandCreateApiCallId) {\n                    _this2.openSnackBarHandler('error', configJSON.errorCreateMsgText);\n                  }\n                }\n              }\n            } // Customizable Area End\n\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }))();\n  } // Customizable Area End\n\n\n}","map":{"version":3,"sources":["/home/lp-greenapex/gargi/okydpim-36944-react-native/src/packages/blocks/categoriessubcategories/src/BrandsController.web.tsx"],"names":["RichTextEditor","Message","BlockComponent","MessageEnum","getName","runEngine","configJSON","require","BrandsController","constructor","props","auth","window","localStorage","getItem","getBrandApiCallId","brandDetailsApiCallId","brandCreateApiCallId","brandUpdateApiCallId","deleteBrandApiCallId","getBrandList","headers","apiContentType","token","requestMessage","RestAPIRequestMessage","messageId","addData","RestAPIResponceEndPointMessage","apiEndPoint","RestAPIRequestHeaderMessage","JSON","stringify","RestAPIRequestMethodMessage","httpGetType","sendMessage","id","brandDetails","accountId","createBrand","values","httpBody","methodType","httpPostType","RestAPIRequestBodyMessage","updateBrand","brandId","restValues","brand","httpPutType","deleteBrandHandler","httpDeleteType","handleImageUpload","event","file","target","files","reader","FileReader","url","readAsDataURL","onloadend","e","setState","selectedFile","result","console","log","onMenuToggle","menuCollapsed","state","openSnackBarHandler","type","message","snackBar","show","closeSnackBarHandler","receive","bind","subScribedMessages","RestAPIResponceMessage","userType","subscriber","brandsData","brandDetailsData","modulesData","rolesUpdateModal","checkbox","loader","editor","createEmptyValue","attachBuildingBlock","componentDidMount","from","debugLog","responseJson","getData","RestAPIResponceSuccessMessage","errorReponse","RestAPIResponceErrorMessage","apiRequestCallId","RestAPIResponceDataMessage","errors","undefined","data","createValueFromString","attributes","description","successCreateMsgText","setTimeout","history","push","successUpdateMsgText","deleteBrandMsgText","parseApiCatchErrorResponse","AsyncStorage","setItem","errorCreateMsgText"],"mappings":"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","sourcesContent":["import { AsyncStorage } from \"react-native\";\nimport RichTextEditor from 'react-rte';\nimport { IBlock } from \"../../../framework/src/IBlock\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport MessageEnum, {\n  getName,\n} from \"../../../framework/src/Messages/MessageEnum\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\n\n// Customizable Area Start\n// import { imgPasswordInVisible, imgPasswordVisible } from \"./assets\";\n// Customizable Area End\n\nexport const configJSON = require(\"./brands.config\");\n\ninterface SelectOptions {\n  value: string;\n  label: string;\n}\nexport interface Props {\n  navigation: any;\n  id: string;\n  // Customizable Area Start\n  match: any;\n  // Customizable Area End\n}\n\ninterface S {\n  // Customizable Area Start\n  auth: string | null | undefined;\n  userType: string;\n  menuCollapsed: boolean;\n  brandsData: object[];\n  modulesData: object[];\n  brandDetailsData: any;\n  rolesUpdateModal: boolean;\n  checkbox: boolean;\n  snackBar: {\n    show: boolean,\n    message?: string,\n    type?: \"success\" | \"info\" | \"warning\" | \"error\" | undefined\n  };\n  loader: boolean,\n  selectedFile: any,\n  editor: any\n  // Customizable Area End\n}\n\ninterface SS {\n  id: any;\n}\n\nexport default class BrandsController extends BlockComponent<\n  Props,\n  S,\n  SS\n> {\n  auth: string | null | undefined = window.localStorage.getItem(\"auth\");\n  getBrandApiCallId: string = \"\";\n  brandDetailsApiCallId: string = \"\";\n  brandCreateApiCallId: string = \"\";\n  brandUpdateApiCallId: string = \"\";\n  deleteBrandApiCallId: string = \"\";\n\n  constructor(props: Props) {\n    super(props);\n    this.receive = this.receive.bind(this);\n\n    // Customizable Area Start\n    this.subScribedMessages = [getName(MessageEnum.RestAPIResponceMessage)];\n\n    this.state = {\n      auth: \"\",\n      userType: configJSON.subscriber,\n      menuCollapsed: false,\n      brandsData: [],\n      brandDetailsData: [],\n      modulesData: [],\n      rolesUpdateModal: false,\n      checkbox: false,\n      snackBar: {\n        show: false,\n      },\n      loader: false,\n      selectedFile: null,\n      editor: RichTextEditor.createEmptyValue()\n    };\n    // Customizable Area End\n    runEngine.attachBuildingBlock(this as IBlock, this.subScribedMessages);\n  }\n\n  async componentDidMount() {\n    this.getBrandList();\n  }\n\n  // Handler for Get Catrgory List\n  getBrandList = (): boolean => {\n    const headers = {\n      \"Content-Type\": configJSON.apiContentType,\n      token: this.auth,\n    };\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n    this.getBrandApiCallId = requestMessage.messageId;\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      configJSON.apiEndPoint\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(headers)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.httpGetType\n    );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n\n    return true;\n  };\n\n  // Handler for Brand Details\n  brandDetails = (accountId: number): boolean => {\n    const headers = {\n      \"Content-Type\": configJSON.apiContentType,\n      token: this.auth,\n    };\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n    this.brandDetailsApiCallId = requestMessage.messageId;\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      `${configJSON.apiEndPoint}/${accountId}`\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(headers)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.httpGetType\n    );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n\n    return true;\n  };\n\n  // Create Brand Handler\n  createBrand = (values: any): boolean => {\n    const headers = {\n      \"Content-Type\": configJSON.apiContentType,\n      token: this.auth,\n    };\n    const httpBody = values;\n    const apiEndPoint = configJSON.apiEndPoint;\n    const methodType = configJSON.httpPostType;\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n    this.brandCreateApiCallId = requestMessage.messageId;\n\n    requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), apiEndPoint);\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(httpBody));\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), methodType);\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n\n    return true;\n  };\n\n  // Update Brand Handler\n  updateBrand = (values: any): boolean => {\n    const {brandId, ...restValues}  = values;\n    const headers = {\n      \"Content-Type\": configJSON.apiContentType,\n      token: this.auth,\n    };\n    const httpBody = {\n      brand: {...restValues},\n    };\n    const apiEndPoint = `${configJSON.apiEndPoint}/${values.brandId}`;\n    const methodType = configJSON.httpPutType;\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n    this.brandUpdateApiCallId = requestMessage.messageId;\n\n    requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), apiEndPoint);\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(httpBody));\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), methodType);\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n\n    return true;\n  };\n\n  // Delete Brand handler\n  deleteBrandHandler = (accountId: number): boolean => {\n    const headers = {\n      token: this.auth,\n    };\n\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n\n    this.deleteBrandApiCallId = requestMessage.messageId;\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      `${configJSON.apiEndPoint}/${accountId}`\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(headers)\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      configJSON.httpDeleteType\n    );\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n\n    return true;\n  };\n\n  handleImageUpload = (event: any) => {\n    var file = event.target.files[0];\n    const reader = new FileReader();\n    var url = reader.readAsDataURL(file);\n\n    reader.onloadend = (e: any) => {\n      this.setState({ selectedFile: [reader.result] });\n    };\n    console.log(url);\n\n    this.setState({\n      selectedFile: event.target.files[0],\n    });\n  };\n\n  async receive(from: string, message: Message) {\n    // Customizable Area Start\n    runEngine.debugLog(\"Message Recevied\", message);\n\n    if (getName(MessageEnum.RestAPIResponceMessage) === message.id) {\n      var responseJson = message.getData(\n        getName(MessageEnum.RestAPIResponceSuccessMessage)\n      );\n      var errorReponse = message.getData(\n        getName(MessageEnum.RestAPIResponceErrorMessage)\n      );\n      const apiRequestCallId = message.getData(\n        getName(MessageEnum.RestAPIResponceDataMessage)\n      );\n      if (responseJson && !responseJson.errors) {\n        if (apiRequestCallId != null) {\n          // Store All Brands data\n          if (\n            apiRequestCallId === this.getBrandApiCallId &&\n            responseJson !== undefined\n          ) {\n            this.setState({ brandsData: responseJson.data });\n          }\n\n          // Store Brand detaills\n          if (\n            apiRequestCallId === this.brandDetailsApiCallId &&\n            responseJson !== undefined\n          ) {\n            console.log('brandDetailsData',responseJson.data)\n            this.setState({\n              brandDetailsData: responseJson.data,\n              editor:  RichTextEditor.createValueFromString(responseJson.data.attributes?.description, 'html')\n            });\n          }\n\n          // Create Brand\n          if (apiRequestCallId === this.brandCreateApiCallId && responseJson !== undefined) {\n            this.openSnackBarHandler('success', configJSON.successCreateMsgText);\n            setTimeout(() => {\n              //@ts-ignore\n              this.props.history.push('/brands');\n            }, 1000);\n          }\n\n          // Update Brand\n          if (apiRequestCallId === this.brandUpdateApiCallId && responseJson !== undefined) {\n            this.openSnackBarHandler('success', configJSON.successUpdateMsgText);\n            setTimeout(() => {\n              //@ts-ignore\n              this.props.history.push('/brands');\n            }, 1000);\n          }\n\n          // Delete Brand\n          if (apiRequestCallId === this.deleteBrandApiCallId && responseJson !== undefined) {\n            console.log(responseJson);\n            this.openSnackBarHandler('success', configJSON.deleteBrandMsgText);\n            this.getBrandList();\n          }\n        }\n      } else {\n        const errors = responseJson.errors;\n        this.parseApiCatchErrorResponse(errorReponse);\n\n        if(errors[0].token === 'Invalid token' || 'Token has Expired') {\n          AsyncStorage.setItem(\"auth\", \"\");\n          //@ts-ignore\n          this.props?.history.push(\"/login\");\n        } else if(errors[0].message) {\n          this.openSnackBarHandler('error', errors[0].message);\n        } else {\n          if (apiRequestCallId === this.brandCreateApiCallId) {\n            this.openSnackBarHandler('error', configJSON.errorCreateMsgText);\n          }\n        }\n      }\n    }\n    // Customizable Area End\n  }\n\n  onMenuToggle = () => {\n    this.setState({\n      menuCollapsed: !this.state.menuCollapsed,\n    });\n  };\n\n  // Open View Details Modal\n  openSnackBarHandler = (type: \"success\" | \"info\" | \"warning\" | \"error\" | undefined,  message: string): void => {\n    this.setState({ snackBar: {\n      show: true,\n      message: message,\n      type\n    } });\n  };\n\n  // Close View Details Modal\n  closeSnackBarHandler = () => {\n    this.setState({ snackBar: {\n      show: false,\n      message: this.state.snackBar.message,\n      type: this.state.snackBar.type\n    }});\n  };\n  // Customizable Area End\n}\n"]},"metadata":{},"sourceType":"module"}